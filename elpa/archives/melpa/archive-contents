
(1 (zygospore . [(20140703 452) nil "reversible C-x 1 (delete-other-windows)" single ((:url . "https://github.com/louiskottmann/zygospore.el"))]) (ztree . [(20140610 659) nil "Several text-tree applications" tar nil]) (zotelo . [(20140216 1438) nil "Manage Zotero collections from emacs" single ((:url . "https://github.com/vitoshka/zotelo") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager"))]) (zossima . [(20121123 1935) ((inf-ruby (2 2 3))) "Ruby from Emacs" tar ((:url . "https://github.com/technomancy/zossima") (:keywords "ruby" "convenience"))]) (zop-to-char . [(20140416 1315) ((cl-lib (0 5))) "A replacement of zap-to-char." single ((:url . "https://github.com/thierryvolpiatto/zop-to-char"))]) (zoom-frm . [(20140101 56) ((frame-fns (0)) (frame-cmds (0))) "Commands to zoom frame font size." single ((:url . "http://www.emacswiki.org/zoom-frm.el") (:keywords "frames" "extensions" "convenience"))]) (zonokai-theme . [(20140909 2241) nil "No description available." tar nil]) (znc . [(20140722 1721) ((cl-lib (0 2)) (erc (5 3))) "ZNC + ERC" single ((:url . "https://github.com/sshirokov/ZNC.el"))]) (zlc . [(20130427 343) nil "Provides zsh like completion system to Emacs" single ((:keywords "matching" "convenience"))]) (zencoding-mode . [(20140213 322) nil "Unfold CSS-selector-like expressions to markup" single ((:url . "https://github.com/rooney/zencoding") (:keywords "convenience"))]) (zenburn-theme . [(20140811 1054) nil "A low contrast color theme for Emacs." single ((:url . "http://github.com/bbatsov/zenburn-emacs"))]) (zen-and-art-theme . [(20120622 1037) nil "zen and art color theme for GNU Emacs 24" single nil]) (zeitgeist . [(20131228 1309) nil "No description available." single nil]) (zeal-at-point . [(20131210 803) nil "Search the word at point with Zeal" single ((:url . "https://github.com/jinzhu/zeal-at-point"))]) (ycmd . [(20141018 417) ((emacs (24)) (anaphora (1 0 0)) (request (0 2 0)) (deferred (0 3 2)) (request-deferred (0 2 0)) (popup (0 5 0))) "emacs bindings to the ycmd completion server ;" single ((:url . "https://github.com/abingham/emacs-ycmd"))]) (yaxception . [(20140327 709) nil "Provide framework about exception like Java for Elisp" single ((:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal"))]) (yasnippet . [(20141017 1036) nil "Yet another snippet extension for Emacs." tar ((:url . "http://github.com/capitaomorte/yasnippet") (:keywords "convenience" "emulation"))]) (yascroll . [(20140313 1108) ((cl-lib (0 3))) "Yet Another Scroll Bar Mode" single ((:keywords "convenience"))]) (yari . [(20140206 911) nil "Yet Another RI interface for Emacs" single ((:keywords "tools"))]) (yard-mode . [(20140816 1344) nil "Minor mode for Ruby YARD comments" single ((:url . "https://github.com/pd/yard-mode.el"))]) (yaoddmuse . [(20140804 1856) nil "Yet another oddmuse for Emacs" single ((:url . "http://www.emacswiki.org/emacs/download/yaoddmuse.el") (:keywords "yaoddmuse" "oddmuse"))]) (yandex-weather . [(20140423 721) nil "Fetch Yandex Weather forecasts." tar nil]) (yaml-mode . [(20140825 32) nil "Major mode for editing YAML files" single ((:keywords "data" "yaml"))]) (yalinum . [(20130217 543) nil "yet another display line numbers." single ((:keywords "convenience" "tools"))]) (yagist . [(20140321 1812) ((json (1 2 0))) "Yet Another Emacs integration for gist.github.com" single ((:url . "https://github.com/mhayashi1120/yagist.el/raw/master/yagist.el") (:keywords "gist" "git" "github" "paste" "pastie" "pastebin"))]) (yafolding . [(20141011 412) nil "Yet another folding extension for Emacs" single ((:keywords "folding"))]) (yabin . [(20140205 2251) nil "Yet Another Bignum package (A thin wrapper of calc.el)." single ((:keywords "data"))]) (xterm-title . [(20091203 1323) nil "Update xterm titles" single nil]) (xterm-frobs . [(20091211 1855) nil "manipulate xterm when running emacs in tty mode" single nil]) (xterm-color . [(20130904 2126) nil "ANSI & XTERM 256 color support" single nil]) (xquery-mode . [(20140121 1243) nil "A simple mode for editing xquery programs" tar nil]) (xmlunicode . [(20140121 923) nil "Unicode support for XML" tar ((:keywords "utf-8" "unicode" "xml" "characters"))]) (xmlgen . [(20130219 519) nil "A DSL for generating XML." single nil]) (xml-rpc . [(20130423 1656) nil "An elisp implementation of clientside XML-RPC" single ((:url . "http://launchpad.net/xml-rpc-el") (:keywords "xml" "rpc" "network"))]) (xkcd . [(20140505 811) ((json (1 3))) "View xkcd from Emacs" single ((:url . "https://github.com/vibhavp/emacs-xkcd") (:keywords "xkcd" "webcomic"))]) (xcscope . [(20140510 1737) nil "cscope interface for (X)Emacs" single ((:url . "https://github.com/dkogan/xcscope.el") (:keywords "languages" "c"))]) (xahk-mode . [(20140611 2057) nil "Major mode for editing AutoHotkey scripts." single ((:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation"))]) (x-dict . [(20091203 1323) nil "emacs interface for several online dictionaries" single nil]) (wwtime . [(20120629 1650) nil "Insert a time of day with appropriate world-wide localization" single ((:keywords "time"))]) (ws-butler . [(20140816 1748) nil "Unobtrusively remove trailing whitespace." single ((:url . "https://github.com/lewang/ws-butler"))]) (writeroom-mode . [(20140326 2359) nil "Minor mode for distraction-free writing" tar ((:keywords "text"))]) (writegood-mode . [(20140605 1034) nil "Polish up poor writing on the fly" single ((:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar"))]) (wrap-region . [(20140117 220) ((dash (1 0 3))) "Wrap text with punctation or tag" single ((:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience"))]) (world-time-mode . [(20140627 407) nil "show whole days of world-time diffs" single ((:keywords "tools" "calendar"))]) (workgroups2 . [(20140930 239) ((cl-lib (0 4)) (dash (2 8 0)) (anaphora (1 0 0)) (f (0 17))) "New workspaces for Emacs" single ((:url . "https://github.com/pashinin/workgroups2") (:keywords "session" "management" "window-configuration" "persistence"))]) (workgroups . [(20110726 1241) nil "workgroups for windows (for Emacs)" single ((:keywords "session" "management" "window-configuration" "persistence"))]) (worf . [(20140716 810) ((helm (1 5 3)) (ace-jump-mode (2 0))) "A warrior does not press so many keys! (in org-mode)" single ((:url . "https://github.com/abo-abo/worf") (:keywords "lisp"))]) (wordsmith-mode . [(20140203 727) nil "Syntax analysis and NLP text-processing in Emacs (OSX-only)" single nil]) (wonderland . [(20130912 2119) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single ((:url . "http://github.com/kurisuwhyte/emacs-wonderland") (:keywords "configuration" "profile" "wonderland"))]) (wolfram-mode . [(20140118 1057) ((emacs (24 3))) "Mathematica editing and inferior mode." single ((:url . "https://github.com/kawabata/wolfram-mode/") (:keywords "languages" "processes" "tools"))]) (with-namespace . [(20130407 1422) ((dash (1 1 0)) (loop (1 1))) "interoperable elisp namespaces" single ((:keywords "namespaces"))]) (wispjs-mode . [(20140103 1732) ((clojure-mode (0))) "Major mode for Wisp code." single ((:url . "https://github.com/krisajenkins/wispjs-mode"))]) (wisp-mode . [(20140502 1701) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ((:keywords "languages" "lisp"))]) (winpoint . [(20131023 1313) nil "Remember buffer positions per-window, not per buffer" single ((:url . "https://github.com/jorgenschaefer/winpoint") (:keywords "convenience"))]) (windsize . [(20110728 1636) nil "Simple, intuitive window resizing" single ((:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience"))]) (window-numbering . [(20130902 1230) nil "Numbered window shortcuts" single ((:url . "http://nschum.de/src/emacs/window-numbering-mode/") (:keywords "faces" "matching"))]) (window-number . [(20140124 302) nil "Select windows by numbers." single ((:url . "http://www.emacswiki.org/emacs/download/window-number.el"))]) (window-layout . [(20140820 158) nil "window layout manager" single ((:keywords "window" "layout"))]) (window-jump . [(20140312 115) nil "Move left/right/up/down through your windows." single ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience"))]) (window-end-visible . [(20140508 1641) nil "Find the last visible point in a window" single ((:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions"))]) (window+ . [(20140216 1650) nil "Extensions to `window.el'." single ((:url . "http://www.emacswiki.org/window%2b.el") (:keywords "internal" "window"))]) (windata . [(20080412 1455) nil "convert window configuration to list" single ((:keywords "convenience" "frames"))]) (win-switch . [(20130202 1237) nil "fast, dynamic bindings for window-switching/resizing" single ((:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient"))]) (wimpy-del . [(20140715 1539) nil "Require confirmation for large region deletion." single ((:url . "http://www.emacswiki.org/wimpy-del.el") (:keywords "region" "cut" "kill" "copy"))]) (wiki-nav . [(20140512 1002) ((button-lock (1 0 0)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation"))]) (wiki . [(20120807 1458) nil "hypertext authoring the WikiWay" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?WikiMode") (:keywords "hypermedia"))]) (widget-mvc . [(20130430 1057) nil "MVC framework for the emacs widgets" single ((:keywords "lisp" "widget"))]) (wide-n . [(20140812 2352) nil "Cycle among buffer restrictions" single ((:url . "http://www.emacswiki.org/wide-n.el") (:keywords "narrow" "restriction" "widen"))]) (wide-column . [(20120814 412) nil "Calls functions dependant on column position." single ((:keywords "minor mode" "cursor colour" "column width"))]) (wid-edit+ . [(20131227 210) nil "Extensions to standard library `wid-edit.el'." single ((:url . "http://www.emacswiki.org/wid-edit%2b.el") (:keywords "widget" "color"))]) (whole-line-or-region . [(20110901 430) nil "operate on current line if region undefined" single ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines"))]) (whitespace-cleanup-mode . [(20140820 428) nil "Intelligently call whitespace-cleanup on save" single ((:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience"))]) (wgrep-pt . [(20140510 1831) ((wgrep (2 1 5))) "Writable pt buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-pt.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-helm . [(20140528 1727) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-ag . [(20141012 611) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ag.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-ack . [(20141012 611) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ack.el") (:keywords "grep" "edit" "extensions"))]) (wgrep . [(20141016 1956) nil "Writable grep buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el") (:keywords "grep" "edit" "extensions"))]) (weechat . [(20141016 1722) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar nil]) (wedge-ws . [(20140714 1749) nil "Wedge whitespace between columns in text" single ((:keywords "formatting" "indentation"))]) (websocket . [(20140823 2056) nil "Emacs WebSocket client and server" single ((:keywords "communication" "websocket" "server"))]) (weblogger . [(20110926 1218) ((xml-rpc (1 6 8))) "Weblog maintenance via XML-RPC APIs" single ((:url . "http://launchpad.net/weblogger-el") (:keywords "weblog" "blogger" "cms" "movable" "type" "openweblog" "blog"))]) (web-server . [(20140905 2006) ((emacs (24 3))) "Emacs Web Server" tar ((:url . "https://github.com/eschulte/emacs-web-server") (:keywords "http" "server" "network"))]) (web-mode . [(20141022 1346) nil "major mode for editing html templates" single ((:url . "http://web-mode.org") (:keywords "html" "template" "javascript" "css" "web" "php" "django" "erb" "jsp"))]) (web-beautify . [(20131118 526) nil "Format HTML, CSS and JavaScript/JSON by js-beautify" single ((:url . "https://github.com/yasuyk/web-beautify"))]) (web . [(20140827 1525) ((dash (2 3 0)) (s (1 5 0))) "useful HTTP client" single ((:url . "http://github.com/nicferrier/emacs-web") (:keywords "lisp" "http" "hypermedia"))]) (weather-metno . [(20141005 1138) ((emacs (24)) (cl-lib (0 3))) "Weather data from met.no in Emacs" tar nil]) (wcheck-mode . [(20140621 1333) nil "General interface for text checkers" tar nil]) (wc-mode . [(20120531 1344) nil "show wc-like information in status bar" single ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "length" "characters" "words" "lines" "mode line"))]) (wc-goal-mode . [(20140829 959) nil "Running word count with goals (minor mode)" single ((:url . "https://github.com/bnbeckwith/wc-goal-mode"))]) (watch-buffer . [(20120331 1644) nil "run a shell command when saving a buffer" single ((:url . "https://github.com/mjsteger/watch-buffer") (:keywords "automation" "convenience"))]) (warm-night-theme . [(20141022 1519) ((emacs (24))) "Emacs 24 theme with a dark background." single nil]) (wand . [(20140414 136) ((dash (2 5 0))) "Magic wand for Emacs - Selecting and executing" tar ((:url . "https://github.com/cmpitg/wand") (:keywords "extensions" "tools"))]) (wakatime-mode . [(20140915 1933) nil "Automatic time tracking extension based on WakaTime" single ((:keywords "calendar" "comm"))]) (wacspace . [(20140827 132) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar nil]) (w3m . [(20141022 447) nil "an Emacs interface to w3m" tar ((:keywords "w3m" "www" "hypermedia"))]) (w32browser-dlgopen . [(20131227 209) nil "Use w32browser with standard Windows Open File box." single ((:url . "http://www.emacswiki.org/w32browser-dlgopen.el") (:keywords "files" "extensions" "convenience" "dialog"))]) (w32-browser . [(20131227 208) nil "Run Windows application associated with a file." single ((:url . "http://www.emacswiki.org/w32-browser.el") (:keywords "mouse" "dired" "w32" "explorer"))]) (vs-emulation-mode . [(20140922 1622) ((emacs (24)) (cl-lib (0 5))) "Emulate a certain proprietary IDE" single ((:url . "https://github.com/Fanael/vs-emulation-mode"))]) (volume . [(20121025 1838) nil "tweak your sound card volume from Emacs" single ((:url . "http://www.brockman.se/software/volume-el/"))]) (volatile-highlights . [(20141005 140) nil "Minor mode for visual feedback on some operations." single ((:url . "http://www.emacswiki.org/emacs/download/volatile-highlights.el") (:keywords "emulations" "convenience" "wp"))]) (vline . [(20120108 1245) nil "show vertical line (column highlighting) mode." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/vline.el") (:keywords "faces" "editing" "emulating"))]) (vlf . [(20141015 1956) nil "View Large Files" tar ((:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities"))]) (vkill . [(20091203 1322) nil "view and kill Unix processes from within Emacs" single nil]) (visual-regexp-steroids . [(20140926 708) ((visual-regexp (0 8))) "Extends visual-regexp to support other regexp engines" tar ((:url . "https://github.com/benma/visual-regexp-steroids.el/") (:keywords "external" "foreign" "regexp" "replace" "python" "visual" "feedback"))]) (visual-regexp . [(20140926 708) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single ((:url . "https://github.com/benma/visual-regexp.el/") (:keywords "regexp" "replace" "visual" "feedback"))]) (visible-mark . [(20140801 1122) nil "Make marks visible." single ((:url . "https://gitlab.com/iankelling/visible-mark") (:keywords "marking" "color" "faces"))]) (virtualenvwrapper . [(20140920 2324) ((dash (1 5 0)) (s (1 6 1))) "a featureful virtualenv tool for Emacs" single ((:url . "http://github.com/porterjamesj/virtualenvwrapper.el") (:keywords "python" "virtualenv" "virtualenvwrapper"))]) (virtualenv . [(20140220 1801) nil "Virtualenv for Python" single ((:keywords "python" "virtualenv"))]) (vimrc-mode . [(20140807 931) nil "Major mode for vimrc files" single ((:url . "https://github.com/mcandre/vimrc-mode") (:keywords "languages" "vim"))]) (vimgolf . [(20140814 1748) nil "VimGolf interface for the One True Editor" single ((:keywords "games" "vimgolf" "vim"))]) (vim-region . [(20140329 1224) ((expand-region (20140127))) "Select region as vim" single ((:url . "https://github.com/ongaeshi/emacs-vim-region"))]) (viewer . [(20141021 1838) nil "View-mode extension" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/viewer.el") (:keywords "view" "extensions"))]) (vertica . [(20131217 1011) ((sql (3 0))) "Vertica SQL mode extension" single ((:keywords "sql" "vertica"))]) (vector-utils . [(20140508 1641) nil "Vector-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions"))]) (vcomp . [(20140906 1808) nil "compare version strings" single ((:url . "https://github.com/tarsius/vcomp") (:keywords "versions"))]) (vcl-mode . [(20121129 1614) nil "Syntax highlighting for Varnish Command Language" single nil]) (vc-osc . [(20120910 511) nil "non-resident support for osc version-control" single nil]) (vc-fossil . [(20131226 224) nil "VC backend for the fossil sofware configuraiton management system" tar nil]) (vc-darcs . [(20140531 945) nil "a VC backend for darcs" single ((:keywords "vc"))]) (vc-check-status . [(20140808 525) nil "Warn you when quitting emacs and leaving repo dirty." tar ((:url . "https://github.com/thisirs/vc-check-status") (:keywords "vc" "convenience"))]) (vc-auto-commit . [(20140808 529) nil "Auto-committing feature for your repository" tar ((:url . "http://github.com/thisirs/vc-auto-commit.git") (:keywords "vc" "convenience"))]) (vbasense . [(20140221 1853) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar ((:url . "https://github.com/aki2o/emacs-vbasense") (:keywords "vba" "completion"))]) (vala-mode . [(20110407 1021) nil "Vala mode derived mode" single ((:keywords "vala" "languages" "oop"))]) (vagrant-tramp . [(20140709 1114) nil "Vagrant method for TRAMP" tar ((:url . "https://github.com/dougm/vagrant-tramp") (:keywords "vagrant"))]) (vagrant . [(20140509 2106) nil "Manage a vagrant box from emacs" single ((:url . "https://github.com/ottbot/vagrant.el") (:keywords "vagrant" "chef"))]) (uzumaki . [(20140522 2047) ((cl-lib (0 5))) "A simple buffer cycler" single ((:url . "http://github.com/geyslan/uzumaki") (:keywords "buffer" "convenience"))]) (uuidgen . [(20140918 1901) nil "Provides various UUID generating functions" single ((:keywords "extensions" "lisp" "tools"))]) (uuid . [(20120910 451) nil "UUID's for EmacsLisp" single ((:keywords "lisp"))]) (utop . [(20140822 429) ((emacs (24))) "Universal toplevel for OCaml" single ((:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages"))]) (use-package . [(20140918 1633) ((bind-key (1 0)) (diminish (0 44))) "A use-package declaration for simplifying your .emacs" single ((:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package"))]) (usage-memo . [(20110722 1551) nil "integration of Emacs help system and memo" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/usage-memo.el") (:keywords "convenience" "languages" "lisp" "help" "tools" "docs"))]) (urlenc . [(20140116 956) nil "URL encoding/decoding utility for Emacs." single ((:url . "https://github.com/buzztaiki/urlenc-el") (:keywords "url"))]) (url-shortener . [(20131218 653) nil "shorten long url and expand tinyurl" single ((:url . "https://github.com/yuyang0/url-shortener"))]) (unison-mode . [(20140127 1324) nil "Syntax highlighting for unison file synchronization program" single ((:url . "https://github.com/impaktor/unison-mode") (:keywords "symchronization" "unison"))]) (unipoint . [(20140113 1724) nil "a simple way to insert unicode characters by TeX name" single ((:url . "https://github.com/apgwoz/unipoint"))]) (unidecode . [(20140318 18) ((cl-lib (0 4))) "Convert Unicode text into safe ASCII strings" tar nil]) (unicode-whitespace . [(20140508 1641) ((ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single ((:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface"))]) (unicode-progress-reporter . [(20140508 1641) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single ((:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface"))]) (unicode-fonts . [(20140812 1035) ((font-utils (0 7 2)) (ucs-utils (0 8 0)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Configure Unicode fonts" single ((:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface"))]) (unicode-enbox . [(20140508 1641) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single ((:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface"))]) (unfill . [(20131103 513) nil "The inverse of fill-paragraph and fill-region" single ((:keywords "utilities"))]) (undohist . [(20140321 1058) ((cl-lib (1 0))) "Persistent undo history for GNU Emacs" single ((:keywords "convenience"))]) (undo-tree . [(20140509 822) nil "Treat undo history as a tree" single ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "convenience" "files" "undo" "redo" "history" "tree"))]) (underwater-theme . [(20131117 1902) nil "A gentle, deep blue color theme" single ((:keywords "faces"))]) (undercover . [(20141012 526) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs" single ((:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools"))]) (uncrustify-mode . [(20130707 959) nil "Minor mode to automatically uncrustify." single ((:keywords "uncrustify"))]) (unbound . [(20140307 928) nil "Find convenient unbound keystrokes" single ((:keywords "keyboard"))]) (ukrainian-holidays . [(20130720 949) nil "Ukrainian holidays for Emacs calendar." single ((:url . "https://github.com/abo-abo/ukrainian-holidays"))]) (ujelly-theme . [(20140504 2152) nil "Ujelly theme for GNU Emacs 24 (deftheme)" single ((:url . "http://github.com/marktran/color-theme-ujelly"))]) (ucs-utils . [(20140626 834) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar ((:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions"))]) (ucs-cmds . [(20131227 204) nil "Macro to create commands that insert Unicode chars." single ((:url . "http://www.emacswiki.org/ucs-cmds.el") (:keywords "unicode" "characters" "encoding" "commands" "ucs-names"))]) (typo . [(20130323 640) nil "Minor mode for typographic editing" single ((:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp"))]) (typing . [(20121026 2118) nil "The Typing Of Emacs" single ((:url . "http://www.emacswiki.org/emacs/TypingOfEmacs") (:keywords "games"))]) (typed-clojure-mode . [(20140615 49) ((clojure-mode (2 1 1)) (cider (0 5 0))) "Typed Clojure minor mode for Emacs" single ((:url . "https://github.com/typedclojure/typed-clojure-mode"))]) (twittering-mode . [(20140420 1305) nil "Major mode for Twitter" single ((:url . "http://twmode.sf.net/") (:keywords "twitter" "web"))]) (twilight-theme . [(20120412 903) nil "Twilight theme for GNU Emacs 24 (deftheme)" single nil]) (twilight-bright-theme . [(20130605 443) nil "A Emacs 24 faces port of the TextMate theme" single ((:url . "https://github.com/jimeh/twilight-bright-theme.el") (:keywords "themes"))]) (twilight-anti-bright-theme . [(20140810 334) nil "A soothing Emacs 24 light-on-dark theme" single ((:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes"))]) (twig-mode . [(20130220 1350) nil "A major mode for twig" single nil]) (turnip . [(20140726 1541) ((dash (2 6 0)) (s (1 9 0))) "Interacting with tmux from Emacs" single ((:keywords "terminals" "tools"))]) (tup-mode . [(20140410 1214) nil "Major mode for editing files for Tup" single ((:url . "https://github.com/ejmr/tup-mode"))]) (tumblesocks . [(20140215 1547) ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) "An Emacs tumblr client." tar nil]) (tumble . [(20130327 1307) ((http-post-simple (0))) "an Tumblr mode for Emacs" single ((:keywords "tumblr"))]) (tuareg . [(20140914 2153) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar ((:url . "http://forge.ocamlcore.org/projects/tuareg/") (:keywords "ocaml" "languages"))]) (ttrss . [(20130409 1349) ((emacs (23 1))) "Tiny Tiny RSS elisp bindings" single ((:url . "https://github.com/pedros/ttrss.el") (:keywords "news" "local"))]) (tt-mode . [(20130804 710) nil "Emacs major mode for editing Template Toolkit files." single nil]) (tss . [(20140914 604) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar ((:url . "https://github.com/aki2o/emacs-tss") (:keywords "typescript" "completion"))]) (truthy . [(20140508 1641) ((list-utils (0 4 2))) "Test the content of a value" single ((:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions"))]) (tronesque-theme . [(20140922 556) nil "Color Theme based on Tron universe." single ((:url . "https://github.com/aurelienbottazini/tronesque"))]) (trident-mode . [(20130726 1507) ((emacs (24)) (slime (20130526)) (skewer-mode (1 5 0)) (dash (1 0 3))) "Live Parenscript interaction" single ((:url . "https://github.com/johnmastro/trident-mode.el") (:keywords "languages" "lisp" "processes" "tools"))]) (tree-mode . [(20121207 1538) nil "A mode to manage tree widgets" single ((:keywords "help" "convenience" "widget"))]) (tracwiki-mode . [(20140108 1153) ((xml-rpc (1 6 8))) "Emacs Major mode for working with Trac" single ((:keywords "trac" "wiki" "tickets"))]) (tracking . [(20140906 848) ((shorten (0 1))) "Buffer modification tracking" single ((:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking"))]) (traad-autocomplete . [(20140817 711) ((traad (0 1)) (auto-complete (1 4 0))) "auto-complete sources for traad" single ((:url . "https://github.com/abingham/traad"))]) (traad . [(20140910 1012) ((deferred (0 3 2)) (popup (0 5 0)) (request (0 2 0)) (request-deferred (0 2 0))) "emacs interface to the traad refactoring server." single ((:url . "https://github.com/abingham/traad"))]) (toxi-theme . [(20130418 1539) ((emacs (24))) "A dark color theme by toxi" single ((:url . "http://hg.postspectacular.com/toxi-theme/"))]) (tox . [(20141004 1703) nil "Launch current python test with tox" single ((:url . "https://github.com/chmouel/tox.el") (:keywords "convenience" "tox" "python" "tests"))]) (top-mode . [(20130605 1739) nil "run \"top\" from emacs" single ((:keywords "extensions" "processes"))]) (tool-bar+ . [(20131227 203) nil "Extensions to standard library tool-bar.el" single ((:url . "http://www.emacswiki.org/tool-bar%2b.el") (:keywords "tool-bar" "convenience" "mouse" "button" "frame"))]) (tommyh-theme . [(20131004 1930) nil "A bright, bold-colored theme for emacs" single nil]) (toml-mode . [(20130302 1048) nil "Mojor mode for editing TOML files" single ((:url . "https://github.com/dryman/toml-mode") (:keywords "data" "toml"))]) (toml . [(20130903 855) nil "TOML (Tom's Obvious, Minimal Language) parser" single ((:url . "https://github.com/gongo/emacs-toml") (:keywords "toml" "parser"))]) (tomatinho . [(20140120 1840) nil "Tomatinho" tar ((:keywords "time" "productivity" "pomodoro technique"))]) (toggle-test . [(20140723 137) nil "Toggle between source and test files in various programming languages" single ((:url . "https://github.com/rags/toggle-test") (:keywords "tdd" "test" "toggle" "productivity"))]) (toggle-quotes . [(20140710 526) nil "Toggle between single and double quoted string" single ((:url . "https://github.com/toctan/toggle-quotes.el") (:keywords "convenience" "quotes"))]) (toggle . [(20140815 545) nil "quickly open corresponding file (eg test vs impl)." single ((:keywords "files" "extensions" "convenience"))]) (todotxt . [(20131231 1150) nil "A major mode for editing todo.txt files" single ((:url . "https://github.com/rpdillon/todotxt.el") (:keywords "todo.txt" "todotxt" "todotxt.el"))]) (todochiku . [(20120202 2005) nil "A mode for interfacing with Growl, Snarl, and the like." single nil]) (tmmofl . [(20121025 701) nil "Calls functions dependant on font lock highlighting at point" single ((:keywords "minor mode" "font lock" "toggling."))]) (tiny . [(20140103 605) nil "Quickly generate linear ranges in Emacs" single ((:url . "https://github.com/abo-abo/tiny"))]) (timesheet . [(20140418 802) ((s (1)) (org (7)) (auctex (11 87 4))) "Timesheet management add-on for org-mode" tar ((:url . "https://github.com/tmarble/timesheet.el") (:keywords "org" "timesheet"))]) (time-ext . [(20130130 2151) nil "more function for time/date" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/time-ext.el") (:keywords "lisp"))]) (tidy . [(20111222 1756) nil "Interface to the HTML Tidy program" single ((:url . "http://www.emacswiki.org/elisp/tidy.el") (:keywords "languages"))]) (thumb-through . [(20120119 34) nil "Plain text reader of HTML documents" single ((:keywords "html"))]) (thumb-frm . [(20140827 1643) ((frame-fns (0)) (frame-cmds (0))) "Commands for thumbnail frames." single ((:url . "http://www.emacswiki.org/thumb-frm.el") (:keywords "frame" "icon"))]) (thrift . [(20140312 1648) nil "Major mode for Apache Thrift files" single ((:keywords "files"))]) (thread-dump . [(20130323 1325) nil "Java thread dump viewer" single ((:url . "http://github.com/nd/thread-dump.el"))]) (thingopt . [(20120717 1126) nil "Thing at Point optional utilities" single ((:keywords "convenience"))]) (thingatpt+ . [(20140822 2056) nil "Extensions to `thingatpt.el'." single ((:url . "http://www.emacswiki.org/thingatpt%2b.el") (:keywords "extensions" "matching" "mouse"))]) (thing-cmds . [(20140607 1433) ((hide-comnt (0))) "Commands that use things, as defined by `thingatpt.el'." single ((:url . "http://www.emacswiki.org/thing-cmds.el") (:keywords "thingatpt" "thing" "region" "selection"))]) (thesaurus . [(20121125 1937) nil "replace a word with a synonym looked up in a web service." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/thesaurus.el") (:keywords "thesaurus" "synonym"))]) (theme-changer . [(20130725 2219) nil "Sunrise/Sunset Theme Changer for Emacs" single ((:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset"))]) (tfs . [(20120508 1820) nil "MS Team Foundation Server commands for Emacs." single ((:url . "http://cheeso.members.winisp.net/srcview.aspx?dir=emacs&file=tfs.el"))]) (textmate-to-yas . [(20130509 1154) nil "Import Textmate macros into yasnippet syntax" tar ((:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate"))]) (textmate . [(20110816 1746) nil "TextMate minor mode for Emacs" single ((:keywords "textmate" "osx" "mac"))]) (textile-mode . [(20120721 1558) nil "Textile markup editing major mode" single nil]) (tex-smart-umlauts . [(20131211 246) nil "Smart umlaut conversion for TeX." single ((:url . "http://hub.darcs.net/lyro/tex-smart-umlauts") (:keywords "tex" "wp"))]) (test-simple . [(20140326 2148) nil "Simple Unit Test Framework for Emacs Lisp" single ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test"))]) (test-case-mode . [(20140123 1415) nil "unit test front-end" single ((:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools"))]) (terraform-mode . [(20140801 128) ((cl-lib (0 5))) "Major mode for terraform configuration file" single ((:url . "https://github.com/syohex/emacs-terraform-mode"))]) (tern-auto-complete . [(20140905 943) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single nil]) (tern . [(20140814 1050) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single ((:url . "http://ternjs.net/"))]) (term-cmd . [(20140803 413) nil "Send commands to Emacs from programs running under term.el" single ((:url . "https://github.com/CallumCameron/term-cmd") (:keywords "processes"))]) (term-alert . [(20140804 343) ((term-cmd (1 0)) (alert (1 1))) "Get notifications when commands complete in the Emacs terminal emulator" single ((:url . "https://github.com/CallumCameron/term-alert") (:keywords "notifications" "processes"))]) (term+mux . [(20140211 249) ((term+ (0 1)) (tab-group (0 1))) "term+ terminal multiplexer and session management" single ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation"))]) (term+key-intercept . [(20140211 250) ((term+ (0 1)) (key-intercept (0 1))) "term+ intercept key mapping" single ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation"))]) (term+ . [(20130612 952) nil "term-mode enhancement" tar ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation"))]) (tempbuf . [(20111124 1607) nil "kill unused buffers in the background" single ((:keywords "convenience"))]) (telepathy . [(20131209 758) nil "Access Telepathy from Emacs" single ((:keywords "telepathy" "tools"))]) (tea-time . [(20120331 420) nil "Simple timer package, useful to make perfect tea." single ((:keywords "timer" "tea-time"))]) (tdd-status-mode-line . [(20131123 1216) nil "TDD status on the mode-line" single ((:url . "https://github.com/algernon/tdd-status-mode-line") (:keywords "faces" "tdd"))]) (tco . [(20140412 912) ((dash (1 2 0)) (emacs (24))) "tail-call optimisation for Emacs lisp" single nil]) (tc . [(20140407 1521) nil "a Japanese input method with T-Code on Emacs" tar nil]) (tbx2org . [(20140224 1059) ((dash (2 5 0)) (s (1 8 0)) (cl-lib (0 4))) "Tinderbox to org-mode conversion" single ((:url . "https://github.com/istib/tbx2org") (:keywords "org-mode"))]) (tangotango-theme . [(20140727 1138) nil "Tango Palette color theme for Emacs 24." single ((:url . "https://github.com/juba/color-theme-tangotango") (:keywords "tango" "palette" "color" "theme" "emacs"))]) (tango-plus-theme . [(20140425 1811) nil "A color theme based on the tango palette" single ((:url . "https://github.com/tmalsburg/tango-plus-theme"))]) (tango-2-theme . [(20120312 1625) nil "Tango 2 color theme for GNU Emacs 24" single nil]) (take-off . [(20140531 517) ((emacs (24 3)) (web-server (0 1 0))) "Emacs remote web access" tar ((:url . "https://github.com/tburette/take-off"))]) (tagedit . [(20141022 39) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single ((:keywords "convenience"))]) (tabulated-list . [(20120406 1651) nil "generic major mode for tabulated lists." single ((:keywords "extensions" "lisp"))]) (tabbar-ruler . [(20140905 1843) ((tabbar (2 0 1))) "Pretty tabbar, autohide, use both tabbar/ruler" tar ((:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar."))]) (tabbar . [(20140316 900) nil "No description available." tar nil]) (tab-group . [(20140306 950) nil "Grouped tabs and their tabbar" single ((:url . "http://github.com/tarao/tab-group-el") (:keywords "convenience" "tabs"))]) (systemtap-mode . [(20121209 1810) nil "A mode for SystemTap" single ((:url . "https://github.com/ruediger/systemtap-mode") (:keywords "tools" "languages"))]) (system-specific-settings . [(20140818 1057) nil "Apply settings only on certain systems" single ((:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords "configuration"))]) (syslog-mode . [(20140217 1918) ((hide-lines (20130623))) "Major-mode for viewing log files" single ((:url . "https://github.com/vapniks/syslog-mode") (:keywords "unix"))]) (syntactic-sugar . [(20140508 1641) nil "Effect-free forms such as if/then/else" single ((:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions"))]) (synonyms . [(20131227 159) nil "Look up synonyms for a word or phrase in a thesaurus." single ((:url . "http://www.emacswiki.org/synonyms.el") (:keywords "text" "dictionary" "thesaurus" "spelling" "apropos" "help"))]) (sws-mode . [(20120802 1352) nil "(S)ignificant (W)hite(S)pace mode" single ((:url . "https://github.com/brianc/jade-mode"))]) (swoop . [(20140605 1710) ((ht (2 0)) (pcre2el (1 5)) (async (1 1)) (emacs (24))) "Peculiar buffer navigation for Emacs" tar ((:url . "https://github.com/ShingoFukuyama/swoop") (:keywords "swoop" "inner" "buffer" "search" "navigation"))]) (switch-window . [(20140919 1034) nil "A *visual* way to choose a window to switch to" single ((:url . "http://tapoueh.org/emacs/switch-window.html") (:keywords "window" "navigation"))]) (swift-mode . [(20141022 719) ((emacs (24 1))) "Major-mode for Apple's Swift programming language." single ((:keywords "languages" "swift"))]) (swbuff-x . [(20130607 1014) ((swbuff (19991231 1800))) "Modifications to David Ponce's swbuff" single ((:url . "http://www.emacswiki.org/elisp/swbuff-x.el") (:keywords "files" "convenience"))]) (svg-mode-line-themes . [(20140210 1240) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar ((:url . "https://github.com/sabof/svg-mode-line-themes"))]) (supergenpass . [(20130329 148) nil "SuperGenPass for Emacs" single ((:keywords "supergenpass"))]) (suomalainen-kalenteri . [(20140615 250) nil "Finnish national and Christian holidays for calendar" tar nil]) (sunny-day-theme . [(20140413 1725) nil "Emacs24 theme with a light background." single ((:url . "http://github.com/mswift42/sunny-day-theme"))]) (summarye . [(20130328 1027) nil "list up matched strings from a buffer, and display them in summary buffer" single nil]) (sudo-ext . [(20130130 2151) nil "sudo support" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sudo-ext.el") (:keywords "unix"))]) (sudden-death . [(20140829 838) nil "Totsuzen-no-Shi" single ((:url . "https://github.com/yewton/sudden-death.el"))]) (subshell-proc . [(20130122 1622) nil "Functions for working with comints" single ((:url . "https://github.com/andrewmains12/subshell-proc"))]) (subr+ . [(20140714 2255) nil "Extensions to standard library `subr.el'." single ((:url . "http://www.emacswiki.org/simple%2b.el") (:keywords "strings" "text"))]) (sublimity . [(20140901 116) nil "smooth-scrolling, minimap and distraction-free mode" tar ((:url . "http://hins11.yu-yake.com/"))]) (sublime-themes . [(20141011 1434) nil "A collection of themes based on Sublime Text" tar ((:keywords "faces"))]) (subatomic256-theme . [(20130620 2210) nil "Fork of subatomic-theme for terminals." single ((:url . "https://github.com/cryon/subatomic256"))]) (subatomic-theme . [(20141019 1432) nil "Low contrast bluish color theme" single ((:url . "https://github.com/cryon/subatomic") (:keywords "color-theme" "blue" "low contrast"))]) (stylus-mode . [(20140508 950) ((sws-mode (0))) "Major mode for editing .jade files" single ((:url . "https://github.com/brianc/jade-mode"))]) (stupid-indent-mode . [(20130816 1654) nil "Plain stupid indentation minor mode" single nil]) (stumpwm-mode . [(20140130 2116) nil "special lisp mode for evaluating code into running stumpwm" single ((:keywords "comm" "lisp" "tools"))]) (stripe-buffer . [(20140923 1522) ((cl-lib (1 0))) "Use a different background for even and odd lines" single ((:url . "https://github.com/sabof/stripe-buffer"))]) (strings . [(20131227 158) nil "Miscellaneous string functions." single ((:url . "http://www.emacswiki.org/strings.el") (:keywords "internal" "strings" "text"))]) (string-utils . [(20140508 1641) ((list-utils (0 4 2))) "String-manipulation utilities" single ((:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions"))]) (string-inflection . [(20140705 240) nil "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" single ((:keywords "elisp"))]) (string-edit . [(20130816 15) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single nil]) (strie . [(20140109 912) nil "A simple trie data structure implementation" single nil]) (sticky-windows . [(20121025 1813) nil "Make windows stay visible" single nil]) (sticky . [(20101130 252) nil "Sticky key for capital letters" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sticky.el") (:keywords "convenience"))]) (stgit . [(20140213 648) nil "major mode for StGit interaction" single ((:url . "http://www.procode.org/stgit"))]) (stem . [(20131102 709) nil "Routines for stemming" single ((:url . "https://github.com/yuutayamada/stem") (:keywords "stemming"))]) (stekene-theme . [(20140908 1319) ((emacs (24))) "The stekene dark and light color themes." tar nil]) (state . [(20140714 1116) ((emacs (24))) "Quick navigation between workspaces" single ((:url . "https://github.com/thisirs/state.git") (:keywords "convenience" "workspaces"))]) (starter-kit-ruby . [(20120202 1432) ((inf-ruby (2 2 3)) (starter-kit (2 0 1))) "Saner defaults and goodies for Ruby" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit-perl . [(20120202 1432) nil "Some helpful Perl code" single nil]) (starter-kit-lisp . [(20120504 1525) ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) "Saner defaults and goodies for lisp languages" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit-js . [(20111009 2354) ((starter-kit (2 0 1))) "Saner defaults and goodies for Javascript" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit-eshell . [(20121001 2014) nil "Saner defaults and goodies: eshell tweaks" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit-bindings . [(20120101 2255) ((starter-kit (2 0 2))) "Saner defaults and goodies: bindings" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit . [(20130904 1847) ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 2)) (ido-ubiquitous (0 3)) (magit (0 8 1))) "Saner defaults and goodies." tar nil]) (stan-snippets . [(20140727 2158) ((yasnippet (0 8 0)) (stan-mode (2 4 1))) "Yasnippets for Stan" tar ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languages"))]) (stan-mode . [(20140727 2158) nil "Major mode for editing Stan files" tar ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges"))]) (ssh-config-mode . [(20120514 133) nil "Mode for fontification of ~/.ssh/config" single ((:url . "http://www.mahalito.net/~harley/elisp/ssh-config-mode.el") (:keywords "ssh" "config" "emacs"))]) (ssh . [(20120904 1642) nil "Support for remote logins using ssh." single ((:keywords "unix" "comm"))]) (sr-speedbar . [(20141004 532) nil "Same frame speedbar" single ((:url . "http://www.emacswiki.org/emacs/download/sr-speedbar.el") (:keywords "speedbar" "sr-speedbar.el"))]) (sqlup-mode . [(20140918 1013) nil "Upcase SQL words for you" single ((:url . "https://github.com/trevoke/sqlup-mode.el") (:keywords "sql" "tools"))]) (sqlplus . [(20140902 1004) nil "User friendly interface to SQL*Plus and support for PL/SQL compilation" single ((:keywords "sql" "sqlplus" "oracle" "plsql"))]) (sqlite . [(20140106 2309) nil "use sqlite via elisp" single nil]) (sql-indent . [(20090325 2254) nil "indentation of SQL statements" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?SqlIndent") (:keywords "languages"))]) (sprintly-mode . [(20121006 134) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single ((:url . "https://github.com/sprintly/sprintly-mode"))]) (spray . [(20140801 1058) nil "a speed reading mode" single ((:url . "https://github.com/ian-kelling/spray") (:keywords "convenience"))]) (spotify . [(20140830 1537) nil "Control the spotify application from emacs" single ((:url . "https://github.com/remvee/spotify-el") (:keywords "convenience"))]) (splitter . [(20130705 350) nil "Manage window splits" single ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience"))]) (sphinx-frontend . [(20131223 629) nil "Launch build process for rst documents via sphinx." single ((:url . "https://github.com/kostafey/sphinx-frontend") (:keywords "compile" "sphinx" "restructuredtext"))]) (sphinx-doc . [(20140524 1157) ((s (1 9 0)) (cl-lib (0 5))) "Sphinx friendly docstrings for Python functions" single ((:url . "https://github.com/naiquevin/sphinx-doc.el") (:keywords "sphinx" "python"))]) (speechd-el . [(20141022 2357) nil "Client to speech synthesizers and Braille displays." tar nil]) (speck . [(20140901 1835) nil "minor mode for spell checking" single ((:keywords "spell" "checking"))]) (sparql-mode . [(20141020 1834) nil "Edit and interactively evaluate SPARQL queries." tar ((:url . "https://github.com/ljos/sparql-mode"))]) (sparkline . [(20130803 842) nil "Make sparkline images from a list of numbers" single ((:keywords "extensions"))]) (spaces . [(20130610 349) nil "Create and switch between named window configurations." single ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience"))]) (spacegray-theme . [(20131230 1427) ((emacs (24 1))) "A Hyperminimal UI Theme" single ((:url . "http://github.com/bruce/emacs-spacegray-theme") (:keywords "themes"))]) (sourcetalk . [(20140823 1039) ((request (0 2 0))) "SourceTalk (http://sourcetalk.net) plugin for Emacs" single ((:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion"))]) (sourcemap . [(20140930 121) ((cl-lib (0 5)) (emacs (24))) "Sourcemap parser" single ((:url . "https://github.com/syohex/emacs-sourcemap"))]) (sourcegraph . [(20141021 1) ((emacs (24 3))) "Minor mode for interacting with srclib and Sourcegraph.com" single ((:url . "https://github.com/sourcegraph/emacs-sourcegraph-mode") (:keywords "sourcegraph"))]) (soundklaus . [(20140810 1113) ((dash (1 5 0)) (emacs (24)) (emms (3 0)) (deferred (0 3 2)) (s (1 6 0)) (pkg-info (0 4)) (cl-lib (0 5))) "Play SoundCloud music in Emacs via EMMS" single ((:url . "https://github.com/r0man/soundklaus.el") (:keywords "soundcloud" "music" "emms"))]) (soundcloud . [(20131210 1403) ((emms (20131016)) (json (1 2)) (deferred (0 3 1)) (string-utils (0 3 2))) "a SoundCloud client for Emacs" single ((:keywords "soundcloud" "music" "audio"))]) (sos . [(20140912 1313) ((org (7))) "StackOverflow Search" single ((:url . "https://github.com/omouse/emacs-sos") (:keywords "tools" "search" "questions"))]) (soothe-theme . [(20141014 2235) ((emacs (24 1))) "a dark colorful theme for Emacs24." single ((:url . "https://github.com/jasonm23/emacs-soothe-theme"))]) (sonic-pi . [(20141001 535) ((cl-lib (0 5)) (osc (0 1)) (dash (2 2 0)) (emacs (24))) "A Emacs client for SonicPi" tar ((:url . "http://www.github.com/repl-electric/sonic-pi.el") (:keywords "sonicpi" "ruby"))]) (solarized-theme . [(20141005 15) ((dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar nil]) (soft-stone-theme . [(20140614 435) ((emacs (24))) "Emacs 24 theme with a light background." single ((:url . "http://github.com/mswift42/soft-stone-theme"))]) (soft-morning-theme . [(20140615 840) nil "Emacs24 theme with a light background." single ((:url . "http://github.com/mswift42/soft-morning-theme"))]) (soft-charcoal-theme . [(20140420 1243) nil "Dark charcoal theme with soft colors" single ((:url . "http://github.com/mswift42/soft-charcoal-theme"))]) (snippet . [(20130210 1815) nil "Insert snippets of text into a buffer" single nil]) (snakemake-mode . [(20140823 904) ((emacs (24))) "Major mode for editing Snakemake files" single ((:url . "https://github.com/kyleam/snakemake-mode") (:keywords "tools"))]) (smyx-theme . [(20141013 1626) nil "smyx Color Theme" single ((:keywords "color" "theme" "smyx"))]) (smotitah . [(20140710 921) nil "Modular emacs configuration framework" tar nil]) (smooth-scrolling . [(20131219 2339) nil "Make emacs scroll smoothly" single ((:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience"))]) (smooth-scroll . [(20130322 14) nil "Minor mode for smooth scrolling and in-place scrolling." single ((:url . "http://www.emacswiki.org/emacs/download/smooth-scroll.el") (:keywords "convenience" "emulations" "frames"))]) (smex . [(20140425 1614) ((emacs (24))) "M-x interface with Ido-style fuzzy matching." single ((:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability"))]) (smeargle . [(20140629 159) ((cl-lib (0 5)) (emacs (24))) "Highlighting region by last updated time" single ((:url . "https://github.com/syohex/emacs-smeargle"))]) (smarty-mode . [(20100703 758) nil "major mode for editing smarty templates" single ((:url . "none yet") (:keywords "smarty" "php" "languages" "templates"))]) (smartscan . [(20131230 1039) nil "Jumps between other symbols found at point" single ((:keywords "extensions"))]) (smartrep . [(20140404 2014) nil "Support sequential operation which omitted prefix keys." tar ((:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience"))]) (smartparens . [(20141009 1608) ((cl-lib (0 3)) (dash (2 6 0))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar nil]) (smart-window . [(20130214 1442) nil "vim-like window controlling plugin" single ((:url . "https://github.com/dryman/smart-window.el") (:keywords "window"))]) (smart-tabs-mode . [(20140331 1929) nil "Intelligently indent with tabs, align with spaces!" single ((:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages"))]) (smart-tab . [(20130317 1457) nil "Intelligent tab completion and indentation." single ((:url . "http://github.com/genehack/smart-tab/tree/master") (:keywords "extensions"))]) (smart-shift . [(20140616 1127) nil "Smart shift text left/right." single ((:url . "https://github.com/hbin/smart-shift") (:keywords "convenience" "tools"))]) (smart-operator . [(20051013 1756) nil "Beautify the operators in codes" single nil]) (smart-newline . [(20131207 2240) nil "Provide smart newline for one keybind." single nil]) (smart-mode-line-powerline-theme . [(20140926 442) ((emacs (24 3)) (powerline (2 3)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." single ((:url . "http://github.com/Bruce-Connor/smart-mode-line"))]) (smart-mode-line . [(20140904 1444) ((emacs (24 3)) (dash (2 2 0)) (rich-minority (0 1))) "A color coded smart mode-line." tar ((:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "theme" "themes"))]) (smart-indent-rigidly . [(20140801 1351) nil "Smart rigid indenting" single ((:url . "https://github.com/re5et/smart-indent-rigidly") (:keywords "indenting" "coffee-mode" "haml-mode" "sass-mode"))]) (smart-forward . [(20140430 313) ((expand-region (0 8 0))) "Semantic navigation" single ((:keywords "navigation"))]) (smart-cursor-color . [(20140630 1019) nil "Change cursor color dynamically" single ((:url . "https://github.com/7696122/smart-cursor-color/") (:keywords "cursor" "color" "face"))]) (smart-compile . [(20140622 919) nil "an interface to `compile'" single ((:keywords "tools" "unix"))]) (sly . [(20141020 928) ((emacs (24 3))) "Sylvester the Cat's Common Lisp IDE" tar ((:url . "https://github.com/capitaomorte/sly") (:keywords "languages" "lisp" "sly"))]) (slovak-holidays . [(20140915 1429) nil "Adds a list of slovak holidays to Emacs calendar" single ((:keywords "calendar"))]) (slime-volleyball . [(20140718 41) nil "An SVG Slime Volleyball Game" tar ((:keywords "games"))]) (slime-ritz . [(20130218 1837) nil "slime extensions for ritz" single ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime"))]) (slime-company . [(20140908 814) ((slime (2 3 2)) (company (0 7))) "slime completion backend for company mode" single ((:keywords "convenience" "lisp" "abbrev"))]) (slime-annot . [(20131230 2208) ((slime (0))) "cl-annot support for SLIME" single ((:url . "https://github.com/arielnetworks/cl-annot"))]) (slime . [(20141010 1657) ((cl-lib (0 5))) "Superior Lisp Interaction Mode for Emacs" tar ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime"))]) (slim-mode . [(20140611 1250) nil "Major mode for editing Slim files" single ((:url . "http://github.com/slim-template/emacs-slim") (:keywords "markup" "language"))]) (slideview . [(20130513 42) nil "File slideshow" single ((:keywords "slideshow"))]) (slamhound . [(20140506 1918) nil "Rip Clojure namespaces apart and rebuild them." single ((:url . "https://github.com/technomancy/slamhound") (:keywords "tools" "lisp"))]) (skype . [(20131002 18) nil "skype UI for emacs users.." tar ((:keywords "skype" "chat"))]) (skewer-reload-stylesheets . [(20140121 844) ((skewer-mode (1 5 3))) "live-edit CSS stylesheets." tar nil]) (skewer-mode . [(20140702 947) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar nil]) (skewer-less . [(20131015 922) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single ((:keywords "languages" "tools"))]) (skeletor . [(20140927 324) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar nil]) (simplezen . [(20130421 600) ((s (1 4 0)) (dash (1 1 0))) "A simple subset of zencoding-mode for Emacs." single nil]) (simplenote . [(20130416 1802) nil "Interact with simple-note.appspot.com" single ((:keywords "simplenote"))]) (simpleclip . [(20140508 1641) nil "Simplified access to the system clipboard" single ((:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience"))]) (simple-rtm . [(20140926 739) nil "Interactive Emacs mode for Remember The Milk" tar ((:keywords "remember" "the" "milk" "productivity" "todo"))]) (simple-httpd . [(20140908 2208) ((cl-lib (0 3))) "pure elisp HTTP server" single ((:url . "https://github.com/skeeto/emacs-http-server"))]) (simple-call-tree . [(20130330 940) nil "analyze source code based on font-lock text-properties" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?CallTree") (:keywords "programming"))]) (simple-call-tree+ . [(20131009 1412) nil "Extensions to simple-call-tree" single ((:url . "http://www.emacswiki.org/emacs/download/simple-call-tree+.el") (:keywords "programming"))]) (simple+ . [(20131227 154) ((strings (0))) "Extensions to standard library `simple.el'." single ((:url . "http://www.emacswiki.org/simple%2b.el") (:keywords "internal" "lisp" "extensions" "abbrev"))]) (simp . [(20140824 1403) nil "Simple project definition, chiefly for file finding, and grepping" tar ((:url . "https://github.com/re5et/simp") (:keywords "project" "grep" "find"))]) (signature . [(20140730 1549) nil "Signature Survey" tar nil]) (sicp . [(20121014 1614) nil "No description available." tar nil]) (shut-up . [(20140904 344) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single ((:url . "http://github.com/rejeep/shut-up.el"))]) (showtip . [(20080330 259) nil "Show tip at cursor" single ((:keywords "help"))]) (show-marks . [(20130805 1049) ((fm (1 0))) "Navigate and visualize the mark-ring" single ((:url . "https://github.com/vapniks/mark") (:keywords "convenience"))]) (show-css . [(20140816 1308) ((dom (1 0 1))) "Show the css of the html attribute the cursor is on" tar ((:url . "https://github.com/smmcg/showcss-mode") (:keywords "hypermedia"))]) (shoulda . [(20140616 1433) ((cl-lib (0 5))) "Shoulda test support for ruby" single ((:keywords "ruby" "tests" "shoulda"))]) (shorten . [(20131201 920) nil "component-wise string shortener" single ((:url . "https://github.com/jorgenschaefer/circe/blob/master/lisp/shorten.el") (:keywords "extensions"))]) (shm . [(20141011 808) nil "Structured Haskell Mode" tar ((:keywords "development" "haskell" "structured"))]) (shimbun . [(20120718 2338) nil "interfacing with web newspapers" tar ((:keywords "news"))]) (shift-text . [(20130831 1255) ((cl-lib (1 0)) (es-lib (0 3))) "Move the region in 4 directions, in a way similar to Eclipse's" single ((:url . "https://github.com/sabof/shift-text"))]) (shell-switcher . [(20140217 938) nil "Provide fast switching between shell buffers" tar ((:url . "https://github.com/DamienCassou/shell-switcher") (:keywords "emacs" "package" "elisp" "shell" "eshell" "term" "switcher"))]) (shell-pop . [(20140714 501) nil "helps you to use shell easily on Emacs. Only one key action to work." single ((:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools"))]) (shell-history . [(20100504 850) nil "integration with shell history" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/shell-history.el") (:keywords "processes" "convenience"))]) (shell-here . [(20120807 2213) nil "Open a shell relative to the working directory" single ((:keywords "unix" "tools" "processes"))]) (shell-current-directory . [(20140101 1854) nil "create new shell based on buffer directory" single ((:keywords "shell" "comint"))]) (shell-command . [(20090621 1332) nil "enables tab-completion for `shell-command'" single ((:keywords "shell"))]) (shampoo . [(20131230 519) nil "A remote Smalltalk development mode" tar nil]) (shadow . [(20110507 324) nil "That's not the file. That's shadow." single ((:keywords "shadow.vim" "files" "processes"))]) (seti-theme . [(20140816 1038) nil "A dark colored theme, inspired by Seti Atom Theme" single ((:url . "https://github.com/caisah/seti-ui-theme.el") (:keywords "themes"))]) (session . [(20120510 2000) nil "use variables, registers and buffer places across sessions" single ((:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools"))]) (serverspec . [(20140612 615) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar ((:url . "http://101000lab.org"))]) (servant . [(20140216 719) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar ((:url . "http://github.com/rejeep/servant.el") (:keywords "elpa" "server"))]) (sequential-command . [(20100504 855) nil "Many commands into one command" tar ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sequential-command.el") (:keywords "convenience" "lisp"))]) (sequences . [(20130908 1422) ((emacs (24))) "Ports of some Clojure sequence functions." single ((:keywords "convenience"))]) (sentence-highlight . [(20121026 1450) nil "highlight the current sentence" single ((:keywords "plain text" "writing" "highlight" "editing" "focus"))]) (sensitive . [(20131015 935) ((emacs (24)) (sequences (0 1 0))) "A dead simple way to load sensitive information" single ((:keywords "convenience"))]) (sekka . [(20140929 922) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 0))) "A client for Sekka IME server" single ((:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese"))]) (second-sel . [(20131227 151) nil "Secondary selection commands" single ((:url . "http://www.emacswiki.org/second-sel.el") (:keywords "region" "selection" "yank" "paste" "edit"))]) (seclusion-mode . [(20121118 1853) nil "Edit in seclusion. A Dark Room mode." single ((:url . "http://github.com/dleslie/seclusion-mode"))]) (search-web . [(20120129 120) nil "Post web search queries using `browse-url'." single nil]) (scss-mode . [(20130105 1711) nil "Major mode for editing SCSS files" single ((:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode"))]) (screenshot . [(20120509 1105) nil "Take a screenshot in Emacs" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/screenshot.el") (:keywords "images" "hypermedia"))]) (scratch-pop . [(20131108 630) nil "popup \"scratch\"es" single ((:url . "http://hins11.yu-yake.com/"))]) (scratch-palette . [(20131108 629) nil "save scratch notes on each file" single ((:url . "http://hins11.yu-yake.com/"))]) (scratch-log . [(20120130 1821) nil "Utility for *scratch* buffer." single nil]) (scratch-ext . [(20140104 16) nil "Extensions for *scratch*" single ((:url . "https://github.com/kyanagi/scratch-ext-el"))]) (scratch . [(20120830 1328) nil "Mode-specific scratch buffers" tar ((:keywords "editing"))]) (scpaste . [(20110617 1856) ((htmlfontify (0 21))) "Paste to the web via scp." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/SCPaste") (:keywords "convenience" "hypermedia"))]) (sclang-snippets . [(20130513 351) ((yasnippet (0 8 0))) "Snippets for the SuperCollider Emacs mode" tar ((:keywords "snippets" "version" "1.0.0"))]) (sclang-extensions . [(20131117 1739) ((auto-complete (1 4 0)) (s (1 3 1)) (dash (1 2 0)) (emacs (24 1))) "Extensions for the SuperCollider Emacs mode." tar ((:keywords "sclang" "supercollider" "languages" "tools"))]) (scion . [(20130315 855) nil "Haskell Minor Mode for Interacting with the Scion Library" single ((:url . "https://code.google.com/p/scion-lib/"))]) (scheme-here . [(20140803 226) nil "cmuscheme extension for multiple inferior processes" single ((:url . "https://github.com/kaihaosw/scheme-here") (:keywords "scheme"))]) (scheme-complete . [(20130220 703) nil "Smart tab completion for Scheme in Emacs" single nil]) (scf-mode . [(20111202 1007) nil "shorten file-names in compilation type buffers" single ((:url . "https://github.com/lewang/scf-mode") (:keywords "compilation"))]) (scala-mode2 . [(20140701 1523) nil "Major mode for editing Scala >= 2.9" tar nil]) (scala-mode . [(20140310 1035) nil "Major mode for editing Scala code." tar ((:keywords "scala" "languages" "oop"))]) (scad-mode . [(20140610 140) nil "Major mode for editing SCAD files" single ((:url . "https://raw.github.com/openscad/openscad/master/contrib/scad-mode.el") (:keywords "languages"))]) (sbt-mode . [(20140514 1555) ((scala-mode2 (0 22))) "Major mode for sbt >= 0.12 with scala >= 2.9" tar nil]) (savekill . [(20140418 234) nil "Save kill ring to disk" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/savekill.el") (:keywords "tools"))]) (save-visited-files . [(20131224 1828) nil "save opened files across sessions" single ((:url . "http://github.com/nflath/save-visited-files"))]) (save-sexp . [(20130106 942) nil "save variables in files using setter forms like `setq'" tar ((:url . "https://github.com/tarsius/save-sexp") (:keywords "convenience"))]) (save-load-path . [(20131228 1952) nil "save load-path and reuse it to test" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/save-load-path.el") (:keywords "lisp"))]) (sauron . [(20141011 958) nil "Track (erc/org/dbus/...) events and react to them." tar nil]) (sass-mode . [(20141010 1536) ((haml-mode (3 0 15))) "Major mode for editing Sass files" single ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css"))]) (sane-term . [(20141019 1243) ((emacs (24 1))) "Multi Term is crazy. This is not." single ((:url . "http://github.com/adamrt/sane-term"))]) (sage-shell-mode . [(20141011 2131) ((cl-lib (0 5)) (deferred (0 3 2))) "A front-end for Sage Math" tar ((:url . "https://github.com/stakemori/sage-shell-mode") (:keywords "sage" "math"))]) (sackspace . [(20130719 556) nil "A better backspace" single ((:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience"))]) (s-buffer . [(20130605 1724) ((s (1 6 0)) (noflet (0 0 3))) "s operations for buffers" single ((:url . "http://github.com/nicferrier/emacs-s-buffer") (:keywords "lisp"))]) (s . [(20140910 634) nil "The long lost Emacs string manipulation library." single ((:keywords "strings"))]) (rvm . [(20140601 758) nil "Emacs integration for rvm" single ((:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm"))]) (rust-mode . [(20140817 1056) nil "A major emacs mode for editing Rust source code" single ((:url . "https://github.com/rust-lang/rust") (:keywords "languages"))]) (runner . [(20140106 1058) nil "Improved \"open with\" suggestions for dired" single ((:url . "https://github.com/thamer/runner") (:keywords "shell command" "dired" "file extension" "open with"))]) (ruby-tools . [(20140113 345) nil "Collection of handy functions for ruby-mode." tar nil]) (ruby-test-mode . [(20140727 504) ((ruby-mode (1 0))) "Minor mode for Behaviour and Test Driven" single ((:keywords "ruby" "unit" "test" "rspec"))]) (ruby-refactor . [(20140719 1945) ((ruby-mode (1 2))) "A minor mode which presents various Ruby refactoring helpers." single ((:url . "https://github.com/ajvargo/ruby-refactor") (:keywords "refactor" "ruby"))]) (ruby-interpolation . [(20131112 1152) nil "Ruby string interpolation helpers" single ((:url . "http://github.com/leoc/ruby-interpolation.el"))]) (ruby-hash-syntax . [(20141010 1139) nil "Toggle ruby hash syntax between classic and 1.9 styles" single ((:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages"))]) (ruby-end . [(20131016 337) nil "Automatic insertion of end blocks for Ruby" single ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby"))]) (ruby-electric . [(20131217 333) nil "Minor mode for electrically editing ruby code" single ((:url . "https://github.com/knu/ruby-electric.el") (:keywords "languages" "ruby"))]) (ruby-dev . [(20130811 451) nil "Interactive developement environment for Ruby." tar nil]) (ruby-compilation . [(20140620 517) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single ((:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience"))]) (ruby-block . [(20131211 331) nil "highlight matching block" single ((:keywords "languages" "faces" "ruby"))]) (ruby-additional . [(20140729 341) ((emacs (24 3)) (ruby-mode (1 2))) "ruby-mode extensions yet to be merged into Emacs" tar ((:url . "http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/misc/") (:keywords "ruby" "languages"))]) (rubocop . [(20131101 1442) ((dash (1 0 0))) "An Emacs interface for RuboCop" single ((:url . "https://github.com/bbatsov/rubocop-emacs") (:keywords "project" "convenience"))]) (rtags . [(20141020 1258) nil "No description available." tar nil]) (rspec-mode . [(20141005 1809) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar ((:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby"))]) (rsense . [(20100511 5) nil "RSense client for Emacs" single ((:keywords "convenience"))]) (rpm-spec-mode . [(20140120 350) nil "RPM spec file editing commands for Emacs/XEmacs" single ((:keywords "unix" "languages"))]) (roy-mode . [(20121208 658) nil "Roy major mode" single ((:url . "https://github.com/folone/roy-mode") (:keywords "extensions"))]) (rotate . [(20140123 416) nil "Rotate the layout of emacs" single ((:url . "https://github.com/daic-h/emacs-rotate") (:keywords "window" "layout"))]) (roguel-ike . [(20140227 1029) ((popup (0 5 0))) "A coffee-break roguelike" tar nil]) (robe . [(20140915 2000) ((inf-ruby (2 3 0))) "Code navigation, documentation lookup and completion for Ruby" tar ((:url . "https://github.com/dgutov/robe") (:keywords "ruby" "convenience" "rails"))]) (rnc-mode . [(20121227 1802) nil "A major mode for editing RELAX NG Compact syntax." single nil]) (rings . [(20140102 1836) nil "Buffer rings. Like tabs, but better." single ((:url . "http://github.com/konr/rings") (:keywords "utilities" "productivity"))]) (rinari . [(20141021 1127) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single ((:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web"))]) (rich-minority . [(20140821 2320) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single ((:url . "http://github.com/Bruce-Connor/rich-minority") (:keywords "mode-line" "faces"))]) (rhtml-mode . [(20130422 911) nil "major mode for editing RHTML files" tar nil]) (rfringe . [(20110405 1520) nil "display the relative location of the region, in the fringe." single ((:url . "http://www.emacswiki.org/emacs/rfringe.el") (:keywords "fringe" "bitmap"))]) (revive . [(20121022 711) nil "Resume Emacs" single nil]) (review-mode . [(20140329 2326) nil "major mode for ReVIEW" single ((:url . "https://github.com/kmuto/review-el"))]) (reverse-theme . [(20130402 612) nil "Reverse theme for Emacs" single ((:url . "https://github.com/syohex/emacs-reverse-theme"))]) (reveal-next . [(20140516 1521) nil "Progressively reveal text after the cursor." single ((:url . "http://www.emacswiki.org/reveal-next.el") (:keywords "hide" "show" "invisible" "learning"))]) (reveal-in-finder . [(20140905 635) nil "Reveal file associated with buffer in OS X Finder" single ((:url . "https://github.com/kaz-yos/elisp") (:keywords "os x" "finder"))]) (restclient . [(20141007 1341) nil "An interactive HTTP client for Emacs" tar ((:keywords "http"))]) (requirejs-mode . [(20130215 1604) nil "Improved AMD module management" single ((:keywords "javascript" "amd" "requirejs"))]) (request-deferred . [(20130526 1315) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single nil]) (request . [(20140316 717) nil "Compatible layer for URL request in Emacs" single nil]) (req-package . [(20140618 735) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0))) "A use-package wrapper for package runtime dependencies management" single ((:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package"))]) (replace-from-region . [(20140526 2223) nil "Replace commands whose query is from region" single ((:url . "http://www.emacswiki.org/emacs/download/replace-from-region.el") (:keywords "replace" "search" "region"))]) (replace+ . [(20140416 1604) nil "Extensions to `replace.el'." single ((:url . "http://www.emacswiki.org/replace%2b.el") (:keywords "matching" "help" "internal" "tools" "local"))]) (repl-toggle . [(20140501 831) ((fullframe (0 0 5))) "Switch to/from repl buffer for current major-mode" single ((:keywords "repl" "buffers" "toggle"))]) (relax . [(20131029 1734) ((json (1 2))) "For browsing and interacting with CouchDB" single ((:url . "http://github.com/technomancy/relax.el") (:keywords "database" "http"))]) (relative-line-numbers . [(20141018 1552) ((emacs (24))) "Display relative line numbers on the margin" single ((:url . "https://github.com/Fanael/relative-line-numbers"))]) (relative-buffers . [(20140523 146) ((cl-lib (0 5)) (dash (2 6 0)) (s (1 9 0)) (f (0 16 2))) "Emacs buffers naming convention" single ((:url . "https://github.com/proofit404/relative-buffers"))]) (register-channel . [(20140803 1709) nil "Jump around fast using registers" single ((:keywords "convenience"))]) (region-bindings-mode . [(20140407 1814) nil "Enable custom bindings when mark is active." single ((:url . "https://github.com/fgallina/region-bindings-mode") (:keywords "convenience"))]) (regex-tool . [(20131104 1734) nil "A regular expression evaluation tool for programmers" single ((:url . "http://www.newartisans.com/") (:keywords "regex" "languages" "programming" "development"))]) (regex-dsl . [(20100124 528) nil "lisp syntax for regexps" single nil]) (refheap . [(20140902 1702) ((json (1 2))) "A library for pasting to https://refheap.com" single ((:url . "https://github.com/Raynes/refheap.el"))]) (redshank . [(20120510 1530) nil "No description available." tar nil]) (redo+ . [(20131117 1151) nil "Redo/undo system for Emacs" single ((:keywords "lisp" "extensions"))]) (recursive-narrow . [(20140902 1327) nil "narrow-to-region that operates recursively" single ((:url . "http://github.com/nflath/recursive-narrow"))]) (rectangle-utils . [(20140622 231) ((emacs (24)) (cl-lib (0 5))) "Some useful rectangle functions." single ((:url . "https://github.com/thierryvolpiatto/rectangle-utils"))]) (rect+ . [(20140117 908) nil "Extensions to rect.el" single ((:url . "https://github.com/mhayashi1120/Emacs-rectplus/raw/master/rect+.el") (:keywords "extensions" "data" "tools"))]) (recompile-on-save . [(20140317 1633) ((dash (1 1 0))) "Trigger recompilation on file save." single ((:url . "https://github.com/maio/recompile-on-save.el") (:keywords "convenience" "files" "processes" "tools"))]) (recentf-ext . [(20130130 2150) nil "Recentf extensions" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/recentf-ext.el") (:keywords "convenience" "files"))]) (rebox2 . [(20121113 800) nil "Handling of comment boxes in various styles." single ((:url . "https://github.com/lewang/rebox2"))]) (realgud . [(20140925 330) ((load-relative (20130410)) (list-utils (20140508)) (loc-changes (20130723)) (test-simple (20130710))) "A modular front-end for interacting with external debuggers" tar ((:url . "http://github.com/rocky/emacs-dbgr"))]) (readline-complete . [(20141016 528) nil "offers completions in shell mode" single nil]) (readability . [(20140715 2027) ((oauth (1 4)) (ov (1 0)) (emacs (24 3))) "Read articles from Readability in Emacs" single ((:url . "https://github.com/ShingoFukuyama/emacs-readability") (:keywords "readability" "oauth"))]) (react-snippets . [(20140120 1334) ((yasnippet (0 7 0))) "Yasnippets for React" tar nil]) (rdp . [(20120928 2154) nil "Recursive Descent Parser library" single ((:url . "https://github.com/skeeto/rdp"))]) (rdf-prefix . [(20140510 1122) nil "Prefix lookup for RDF" single ((:keywords "convenience" "abbrev"))]) (rcirc-notify . [(20141016 111) nil "libnotify popups" single ((:keywords "lisp" "rcirc" "irc" "notify" "growl"))]) (rcirc-groups . [(20140622 514) nil "an emacs buffer in rcirc-groups major mode" single ((:url . "http://tapoueh.org/emacs/rcirc-groups.html") (:keywords "comm" "convenience"))]) (rcirc-controls . [(20141019 436) nil "control sequences" single nil]) (rcirc-color . [(20140131 956) nil "color nicks" single ((:keywords "comm"))]) (rcirc-alertify . [(20140406 2119) ((alert (20140406 1353))) "Cross platform notifications for rcirc" single ((:keywords "comm" "convenience"))]) (rcirc-alert . [(20140613 1034) nil "Configurable alert messages on top of RCIRC" tar ((:keywords "lisp" "rcirc" "irc" "alert" "awesome"))]) (rbenv . [(20140318 724) nil "Emacs integration for rbenv" single ((:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv"))]) (rase . [(20120928 1645) nil "Run At Sun Event daemon" single ((:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight"))]) (rainbow-identifiers . [(20140916 1423) ((emacs (24))) "Highlight identifiers according to their names" single ((:url . "https://github.com/Fanael/rainbow-identifiers"))]) (rainbow-delimiters . [(20141017 1229) nil "Highlight nested parens, brackets, braces a different color at each depth." single ((:url . "http://github.com/jlr/rainbow-delimiters/raw/master/rainbow-delimiters.el") (:keywords "faces" "convenience" "lisp" "matching" "tools" "rainbow" "rainbow parentheses" "rainbow parens"))]) (rainbow-blocks . [(20140306 1333) nil "Block syntax highlighting for lisp code" single ((:url . "https://github.com/istib/rainbow-blocks"))]) (rails-log-mode . [(20140408 25) nil "Major mode for viewing Rails log files" single ((:keywords "rails" "log"))]) (railgun . [(20121017 157) nil "No description available." single nil]) (racket-mode . [(20141022 1647) nil "Major mode for Racket language." tar ((:url . "https://github.com/greghendershott/racket-mode"))]) (r-autoyas . [(20140101 1010) ((ess (0)) (yasnippet (0 8 0))) "Provides automatically created yasnippets for R function argument lists." tar ((:url . "https://github.com/mlf176f2/r-autoyas.el") (:keywords "r" "yasnippet"))]) (quickrun . [(20141018 857) nil "Run commands quickly" single ((:url . "https://github.com/syohex/emacs-quickrun"))]) (quickref . [(20130113 1800) ((dash (1 0 3)) (s (1 0 0))) "Display relevant notes-to-self in the echo area" single ((:url . "https://github.com/pd/quickref.el"))]) (quick-buffer-switch . [(20140324 2235) nil "Quick switch to file or dir buffers." single ((:keywords "emacs" "configuration"))]) (quack . [(20130126 1923) nil "enhanced support for editing and running Scheme code" single nil]) (qml-mode . [(20130427 1108) nil "Major mode for editing QT Declarative (QML) code." single ((:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative"))]) (qiita . [(20140118 344) ((helm (1 5 9)) (markdown-mode (2 0))) "Qiita API Library for emacs" single ((:url . "https://github.com/gongo/qiita-el") (:keywords "qiita"))]) (pyvenv . [(20140921 1116) nil "Python virtual environment interface" single ((:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools"))]) (python-magic . [(20120505 1355) nil "outline mode extension for python mode" single ((:keywords "outlines" "languages"))]) (python-info . [(20130916 920) nil "Python info manual for Emacs" tar nil]) (python-environment . [(20140321 1416) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar ((:keywords "applications" "tools"))]) (python-django . [(20140614 2314) nil "A Jazzy package for managing Django projects" single ((:url . "https://github.com/fgallina/python-django.el") (:keywords "languages"))]) (python-cell . [(20131029 1916) nil "Support for MATLAB-like cells in python mode" single ((:keywords "python" "matlab" "cell"))]) (pylint . [(20140729 1417) nil "minor mode for running `pylint'" single ((:keywords "languages" "python"))]) (pyenv-mode . [(20141013 1604) nil "Integrate pyenv with python-mode" single ((:url . "https://github.com/proofit404/pyenv-mode"))]) (pydoc-info . [(20110301 334) nil "Better Python support for info-lookup-symbol." tar nil]) (py-isort . [(20141019 311) nil "Use isort to sort the imports in a Python buffer" single ((:url . "http://paetzke.me/project/py-isort.el"))]) (py-import-check . [(20130802 711) nil "Finds the unused python imports using importchecker" single ((:url . "https://github.com/psibi/emacs-py-import-check") (:keywords "python" "import" "check"))]) (py-gnitset . [(20140224 2310) nil "Run your Python tests any way you'd like" single ((:url . "https://www.github.com/quodlibetor/py-gnitset"))]) (py-autopep8 . [(20140908 331) nil "Use autopep8 to beautify a Python buffer" single ((:url . "http://paetzke.me/project/py-autopep8.el"))]) (px . [(20141006 848) nil "preview inline latex in any mode" single ((:url . "http://github.com/aaptel/preview-latex"))]) (pushbullet . [(20140809 832) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single ((:url . "http://www.github.com/theanalyst/revolver") (:keywords "convenience"))]) (purty-mode . [(20131004 1859) nil "Safely pretty-print greek letters, mathematical symbols, or anything else." single nil]) (purple-haze-theme . [(20141014 2229) ((emacs (24 0))) "an overtly purple color theme for Emacs24." single ((:url . "https://github.com/jasonm23/emacs-purple-haze-theme"))]) (puppetfile-mode . [(20131017 1133) nil "Syntax highlighting for Puppetfiles" single nil]) (puppet-mode . [(20141014 1028) ((emacs (24 1)) (pkg-info (0 4))) "Major mode for Puppet manifests" single ((:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages"))]) (pungi . [(20140615 1313) ((jedi (0 2 0 -3 2))) "Integrates jedi with virtualenv and buildout python environments" single ((:keywords "convenience"))]) (pt . [(20141018 1128) nil "A front-end for pt, The Platinum Searcher." single ((:url . "https://github.com/bling/pt.el") (:keywords "pt" "ack" "ag" "grep" "search"))]) (psvn . [(20120401 1740) nil "Subversion interface for emacs" single nil]) (psession . [(20140829 517) ((emacs (24)) (cl-lib (0 5))) "Persistent save of elisp objects." single ((:url . "https://github.com/thierryvolpiatto/psession"))]) (protobuf-mode . [(20091217 2055) nil "major mode for editing protocol buffers." single ((:keywords "google" "protobuf" "languages"))]) (prosjekt . [(20140822 753) ((dash (2 8 0))) "a software project tool for emacs" tar ((:url . "https://github.com/abingham/prosjekt"))]) (projmake-mode . [(20140909 1029) ((dash (2 6 0))) "Project oriented automatic builder and error highlighter, flymake for projects" tar nil]) (projekt . [(20140424 633) ((emacs (24))) "some kind of staging for CVS" single nil]) (projector . [(20140929 1218) ((alert (1 1)) (projectile (0 11 0))) "Lightweight library for managing project/repository-aware shell and command buffers" single ((:url . "https://github.com/waymondo/projector"))]) (projectile-rails . [(20141008 400) ((projectile (1 0 0 -3)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0))) "Minor mode for Rails projects based on projectile-mode" single ((:url . "https://github.com/asok/projectile-rails") (:keywords "rails" "projectile"))]) (projectile . [(20141023 347) ((s (1 6 0)) (dash (1 5 0)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience"))]) (project-root . [(20110206 1530) nil "Define a project root and take actions based upon it." single nil]) (project-persist . [(20131030 1508) nil "A minor mode to allow loading and saving of project settings." tar nil]) (project-local-variables . [(20080502 1652) nil "Set project-local variables from a file." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ProjectLocalVariables") (:keywords "project" "convenience"))]) (project-explorer . [(20140619 1745) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single ((:url . "https://github.com/sabof/project-explorer"))]) (prognth . [(20130920 1359) nil "Extend prog1 to arbitrary index" single ((:keywords "lisp"))]) (professional-theme . [(20140916 1017) nil "Emacs port of Vim's professional theme" single ((:url . "https://github.com/juanjux/professional-theme") (:keywords "theme" "light" "professional"))]) (prodigy . [(20140915 1508) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single ((:url . "http://github.com/rejeep/prodigy.el"))]) (processing-snippets . [(20140426 1028) ((yasnippet (0 8 0))) "Snippets for processing-mode" tar nil]) (processing-mode . [(20141016 1621) nil "Major mode for Processing 2.0" single ((:url . "https://github.com/ptrv/processing2-emacs") (:keywords "languages" "snippets"))]) (proc-net . [(20130321 2012) nil "network process tools" single ((:url . "http://github.com/nicferrier/emacs-procnet") (:keywords "processes"))]) (pretty-symbols . [(20140814 559) nil "Draw tokens as Unicode glyphs." single ((:url . "http://github.com/drothlis/pretty-symbols") (:keywords "faces"))]) (pretty-sha-path . [(20141021 649) nil "Prettify Guix/Nix store paths" single ((:url . "https://gitorious.org/alezost-emacs/pretty-sha-path") (:keywords "faces" "convenience"))]) (pretty-mode . [(20141011 1639) nil "Redisplay parts of the buffer as pretty symbols." single ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols"))]) (pretty-lambdada . [(20131227 148) nil "Show the word `lambda' as the Greek letter." single ((:url . "http://www.emacswiki.org/pretty-lambdada.el") (:keywords "convenience" "display"))]) (pp-c-l . [(20131227 147) nil "Display Control-l characters in a pretty way" single ((:url . "http://www.emacswiki.org/pp-c-l.el") (:keywords "display" "convenience" "faces"))]) (pp+ . [(20131227 147) nil "Extensions to `pp.el'." single ((:url . "http://www.emacswiki.org/pp%2b.el") (:keywords "lisp"))]) (powershell-mode . [(20100203 558) nil "Mode for editing Powershell scripts" single ((:keywords "powershell" "monad" "msh"))]) (powershell . [(20140826 2111) nil "No description available." single nil]) (powerline-evil . [(20140517 301) ((evil (1 0 8)) (powerline (2 3))) "Utilities for better Evil support for Powerline" tar ((:url . "http://github.com/raugturi/powerline-evil/") (:keywords "evil" "mode-line" "powerline"))]) (powerline . [(20140517 28) ((cl-lib (0 2))) "Rewrite of Powerline" tar ((:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line"))]) (pow . [(20140420 406) ((emacs (24)) (cl-lib (0 5))) "pow (http://pow.cx/) manager for emacs" tar ((:url . "http://github.com/yukihr/emacs-pow") (:keywords "develop" "web" "pow"))]) (pov-mode . [(20120825 1016) nil "Major mode for editing POV-Ray scene files." tar nil]) (pos-tip . [(20140613 524) nil "Show tooltip at point" single ((:keywords "tooltip"))]) (portage-navi . [(20140203 56) ((concurrent (0 3 1)) (ctable (0 1 2))) "portage viewer" single ((:url . "https://github.com/kiwanami/emacs-portage-navi") (:keywords "tools" "gentoo"))]) (popwin . [(20140902 2027) nil "Popup Window Manager." single ((:keywords "convenience"))]) (popup-switcher . [(20140930 842) ((cl-lib (0 3)) (popup (0 5 0))) "switch to other buffers and files via popup." single ((:url . "https://github.com/kostafey/popup-switcher") (:keywords "popup" "switch" "buffers" "functions"))]) (popup-kill-ring . [(20131020 1454) ((popup (0 4)) (pos-tip (0 4))) "interactively insert item from kill-ring" single ((:url . "https://github.com/waymondo/popup-kill-ring") (:keywords "popup" "kill-ring" "pos-tip"))]) (popup-complete . [(20140917 819) ((popup (0 5 0))) "completion with popup" single ((:url . "https://github.com/syohex/emacs-popup-complete"))]) (popup . [(20141002 620) ((cl-lib (0 3))) "Visual Popup User Interface" single ((:keywords "lisp"))]) (poporg . [(20140616 1753) nil "Pop a comment or string to an empty buffer for text editing" single ((:url . "https://github.com/QBobWatson/poporg") (:keywords "outlines" "tools"))]) (pophint . [(20141011 1032) ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar ((:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup"))]) (pony-mode . [(20140528 909) nil "Minor mode for working with Django Projects" tar nil]) (pomodoro . [(20140318 1349) nil "A timer for the Pomodoro Technique" single nil]) (polymode . [(20140614 1601) ((emacs (24))) "Versatile multiple modes with extensive literate programming support" tar ((:url . "https://github.com/vitoshka/polymode") (:keywords "emacs"))]) (pointback . [(20100210 1052) nil "Restore window points when returning to buffers" single ((:keywords "convenience"))]) (point-undo . [(20100504 829) nil "undo/redo position" single nil]) (point-stack . [(20140102 1523) nil "A forward/back stack for point" single nil]) (plsql . [(20121115 1043) nil "Programming support for PL/SQL code" single ((:url . "http://www.emacswiki.org/elisp/plsql.el") (:keywords "languages"))]) (plsense-direx . [(20140520 1608) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single ((:url . "https://github.com/aki2o/plsense-direx") (:keywords "perl" "convenience"))]) (plsense . [(20140519 1358) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single ((:url . "https://github.com/aki2o/emacs-plsense") (:keywords "perl" "completion"))]) (plim-mode . [(20140812 2013) nil "Major mode for editing Plim files" single ((:url . "http://github.com/dongweiming/plim-mode") (:keywords "markup" "language"))]) (plenv . [(20130707 216) nil "A plenv wrapper for Emacs" single ((:keywords "emacs" "perl"))]) (plantuml-mode . [(20131031 1932) ((auto-complete (1 4))) "Major mode for plantuml" single ((:url . "https://github.com/wildsoul/plantuml-mode") (:keywords "uml" "ascii"))]) (planet-theme . [(20140328 930) ((emacs (24))) "A dark theme inspired by Gmail's 'Planets' theme of yore" single ((:url . "https://github.com/cmack/emacs-planet-theme") (:keywords "themes"))]) (pkgbuild-mode . [(20140331 1246) nil "Interface to the ArchLinux package manager" single nil]) (pkg-info . [(20140610 930) ((epl (0 4))) "Information about packages" single ((:url . "https://github.com/lunaryorn/pkg-info.el") (:keywords "convenience"))]) (pivotal-tracker . [(20140805 801) nil "Interact with Pivotal Tracker through its API" single ((:url . "http://github.com/jxa/pivotal-tracker"))]) (pip-requirements . [(20140922 1630) ((dash (2 8 0))) "A major mode for editing pip requirements files." single nil]) (pinot . [(20140211 1526) nil "Emacs interface to pinot-search" tar nil]) (pinboard-api . [(20140324 748) nil "Rudimentary http://pinboard.in integration" single ((:url . "https://github.com/danieroux/pinboard-api-el") (:keywords "pinboard" "www"))]) (pillar . [(20140627 1058) ((makey (0 3))) "Major mode for editing Pillar files" tar ((:url . "http://github.com/DamienCassou/pillar-mode") (:keywords "markup" "major-mode"))]) (pig-snippets . [(20130913 224) ((yasnippet (0 8 0))) "Snippets for pig-mode" tar nil]) (pig-mode . [(20140617 1358) nil "Major mode for Pig files" single nil]) (pianobar . [(20120128 1601) nil "thin wrapper for Pianobar, a Pandora Radio client" single ((:url . "http://github.com/agrif/pianobar.el"))]) (phpunit . [(20140505 652) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Launch PHP unit tests using phpunit" single ((:url . "https://github.com/nlamirault/phpunit.el") (:keywords "php" "tests" "phpunit"))]) (php-refactor-mode . [(20140920 1711) nil "Minor mode to quickly and safely perform common refactorings" single ((:url . "https://github.com/keelerm84/php-refactor-mode.el") (:keywords "php" "refactor"))]) (php-mode . [(20141023 116) nil "Major mode for editing PHP code" single ((:url . "https://github.com/ejmr/php-mode"))]) (php-eldoc . [(20140202 1441) nil "eldoc backend for php" tar ((:url . "https://github.com/sabof/php-eldoc"))]) (php-boris-minor-mode . [(20140209 1335) ((php-boris (0 0 1)) (highlight (0))) "a minor mode to evaluate PHP code in the Boris repl" single ((:url . "https://github.com/steckerhalter/php-boris-minor-mode") (:keywords "php" "repl" "eval"))]) (php-boris . [(20130527 421) nil "Run boris php REPL" single ((:keywords "php" "commint" "repl" "boris"))]) (php-auto-yasnippets . [(20140704 1542) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar ((:url . "https://github.com/ejmr/php-auto-yasnippets"))]) (php+-mode . [(20121129 1552) nil "A better PHP mode with Zend Framework 1 support." tar nil]) (phoenix-dark-pink-theme . [(20140717 1351) nil "Port of the Sublime Text 2 theme of the same name" single ((:url . "http://github.com/j0ni/phoenix-dark-pink"))]) (phoenix-dark-mono-theme . [(20130306 1515) nil "Monochromatic version of the Phoenix theme" single ((:url . "http://github.com/j0ni/phoenix-dark-mono"))]) (phi-search-mc . [(20140620 129) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single ((:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors"))]) (phi-search . [(20140926 134) nil "another incremental search command, compatible with \"multiple-cursors\"" tar ((:url . "http://hins11.yu-yake.com/"))]) (phi-rectangle . [(20140818 235) nil "another rectangle-mark command (rewrite of rect-mark)" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-autopair . [(20141008 2341) ((paredit (20))) "another simple-minded autopair implementation" single ((:url . "http://hins11.yu-yake.com/"))]) (ph . [(20130312 1437) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar nil]) (pgdevenv . [(20130527 557) nil "Manage your PostgreSQL development envs" tar ((:keywords "emacs" "postgresql" "development" "environment" "shell" "debug" "gdb"))]) (pg . [(20130731 1742) nil "Emacs Lisp interface to the PostgreSQL RDBMS" single ((:keywords "data" "comm" "database" "postgresql"))]) (perspective . [(20140606 1546) nil "switch between named \"perspectives\" of the editor" single ((:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames"))]) (persp-projectile . [(20141010 210) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single ((:keywords "project" "convenience"))]) (persp-mode . [(20141010 1518) ((workgroups (0 2 0))) "\"perspectives\" + save/load + shared among frames - bugs." single ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session"))]) (persistent-soft . [(20140508 1641) ((pcache (0 2 3)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single ((:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions"))]) (perlbrew . [(20130127 624) nil "A perlbrew wrapper for Emacs" single ((:keywords "emacs" "perl"))]) (perl-completion . [(20090528 236) nil "No description available." single nil]) (peg . [(20130320 158) nil "Parsing Expression Grammars in Emacs Lisp" single nil]) (peep-dired . [(20140901 510) nil "Peep at files in another window from dired buffers" single ((:keywords "files" "convenience"))]) (peek-mode . [(20130620 1546) ((elnode (0 9 8 1))) "Serve buffers live over HTTP with elnode backend" tar ((:url . "https://github.com/erikriverson/peek-mode"))]) (pcsv . [(20131110 1050) nil "Parser of csv" single ((:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el") (:keywords "data"))]) (pcre2el . [(20140724 336) ((cl-lib (0 3))) "parse, convert, and font-lock PCRE, Emacs and rx regexps" single ((:url . "https://github.com/joddie/pcre2el"))]) (pcomplete-extension . [(20140604 1247) ((emacs (24)) (cl-lib (0 5))) "additional completion for pcomplete" single ((:url . "https://github.com/thierryvolpiatto/pcomplete-extension"))]) (pcmpl-pip . [(20140910 855) nil "pcomplete for pip" single ((:keywords "pcomplete" "pip" "python" "tools"))]) (pcmpl-homebrew . [(20140817 722) nil "pcomplete for homebrew" single ((:keywords "pcomplete" "homebrew" "tools"))]) (pcmpl-git . [(20140218 2104) nil "pcomplete for git" tar ((:keywords "tools"))]) (pcmpl-args . [(20120912 124) nil "Enhanced shell command completion" single ((:url . "https://github.com/JonWaltman/pcmpl-args.el") (:keywords "abbrev" "completion" "convenience" "processes" "terminals" "unix"))]) (pcache . [(20131201 1459) ((eieio (1 3))) "persistent caching for Emacs" single nil]) (path-headerline-mode . [(20140423 932) nil "Displaying file path on headerline." single ((:url . "https://github.com/7696122/path-headerline-mode") (:keywords "headerline"))]) (pastels-on-dark-theme . [(20120304 1322) nil "Pastels on Dark theme for Emacs 24" single ((:url . "http://gist.github.com/1906662") (:keywords "theme" "color"))]) (pastehub . [(20140615 220) nil "A client for the PasteHub cloud service" single ((:url . "https://github.com/kiyoka/pastehub"))]) (pastebin . [(20101125 1955) nil "A simple interface to the www.pastebin.com webservice" single nil]) (password-vault . [(20131105 2003) ((cl-lib (0 2)) (emacs (24))) "A Password manager for Emacs." single ((:url . "http://github.com/PuercoPop/password-vault.el") (:keywords "password" "productivity"))]) (password-store . [(20140616 1441) ((dash (1 5 0)) (f (0 11 0)) (s (1 9 0))) "Password store (pass) support" single ((:keywords "pass"))]) (passthword . [(20140717 857) ((cl-lib (0 5))) "Simple password manager" single nil]) (parse-csv . [(20140203 416) nil "Parse strings with CSV fields into s-expressions" single ((:url . "https://github.com/mrc/el-csv") (:keywords "csv"))]) (parent-mode . [(20141013 1341) nil "get major mode's parent modes" single ((:url . "https://github.com/Fanael/parent-mode"))]) (parenface . [(20140322 2123) nil "Provide a face for parens in lispy modes." tar nil]) (paren-face . [(20140309 2059) nil "a face for parentheses in lisp modes" single ((:url . "http://github.com/tarsius/paren-face"))]) (paredit-menu . [(20130923 1554) nil "Adds a menu to paredit.el as memory aid" single ((:keywords "paredit"))]) (paredit-everywhere . [(20140906 510) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single ((:keywords "languages" "convenience"))]) (paredit . [(20140128 1548) nil "minor mode for editing parentheses" single ((:keywords "lisp"))]) (paradox . [(20141022 633) ((emacs (24 1)) (dash (2 6 0)) (cl-lib (0 5)) (json (1 3))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar ((:url . "http://github.com/Bruce-Connor/paradox") (:keywords "package" "packages" "mode-line"))]) (pangu-spacing . [(20140627 2152) nil "Minor-mode to add space between Chinese and English characters." single ((:url . "http://github.com/coldnew/pangu-spacing"))]) (pandoc-mode . [(20141021 1017) nil "Minor mode for interacting with Pandoc" tar ((:keywords "text" "pandoc"))]) (pallet . [(20140819 1556) ((cask (0 6))) "A package management tool for Emacs, using Cask." tar nil]) (palimpsest . [(20130731 1121) nil "Various deletion strategies when editing" single nil]) (palette . [(20141020 323) ((hexrgb (0))) "Color palette useful with RGB, HSV, and color names" single ((:url . "http://www.emacswiki.org/palette.el") (:keywords "color" "rgb" "hsv" "hexadecimal" "face" "frame"))]) (pager-default-keybindings . [(20130719 1657) ((pager (1 0))) "Add the default keybindings suggested for pager.el" single ((:url . "http://github.com/nflath/pager-default-keybindings"))]) (pager . [(20100330 1431) nil "windows-scroll commands" single nil]) (page-break-lines . [(20140128 1317) nil "Display ugly ^L page breaks as tidy horizontal lines" single ((:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces"))]) (packed-git . [(20140828 1448) ((cl-lib (0 5)) (magit (2 1 0)) (packed (0 3 5))) "Utilities for Emacs packages living in Git repositories" single ((:url . "http://tarsius.github.com/packed") (:keywords "compile" "convenience" "lisp" "package" "library"))]) (packed . [(20140913 1831) ((cl-lib (0 5))) "package manager agnostic Emacs Lisp package utilities" single ((:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library"))]) (package-utils . [(20141005 928) ((epl (0 7 -3))) "Extensions for package.el" single ((:url . "https://github.com/Silex/package-utils") (:keywords "package" "convenience"))]) (package-safe-delete . [(20141021 1311) ((emacs (24 3)) (epl (0 7 -3))) "Safely delete package.el packages" single ((:url . "https://github.com/Fanael/package-safe-delete"))]) (package-filter . [(20140105 1726) nil "special handling for package.el" single ((:url . "https://github.com/milkypostman/package-filter"))]) (package-build . [(20141022 1358) ((cl-lib (0 2))) "Tools for assembling a package archive" single ((:keywords "tools"))]) (package+ . [(20140504 625) nil "Extensions for the package library." single ((:url . "TBA") (:keywords "extensions" "tools"))]) (pabbrev . [(20141021 1734) nil "Predictive abbreviation expansion" single nil]) (p4 . [(20141009 1101) nil "Simple Perforce-Emacs Integration" single ((:url . "https://github.com/gareth-rees/p4.el"))]) (ox-twiki . [(20140121 139) ((org (8))) "org Twiki and Foswiki export" single ((:url . "https://github.com/dfeich/org8-wikiexporters") (:keywords "org"))]) (ox-tiddly . [(20131124 1104) ((org (8))) "org TiddlyWiki exporter" single ((:url . "https://github.com/dfeich/org8-wikiexporters") (:keywords "org"))]) (ox-textile . [(20140215 907) ((org (8 1))) "Textile Back-End for Org Export Engine" single ((:url . "https://github.com/yashi/org-textile") (:keywords "org" "textile"))]) (ox-reveal . [(20141016 1140) ((org (8 0))) "reveal.js Presentation Back-End for Org Export Engine" single ((:keywords "outlines" "hypermedia" "slideshow" "presentation"))]) (ox-pukiwiki . [(20140215 909) ((org (8 1))) "Pukiwiki Back-End for Org Export Engine" single ((:url . "https://github.com/yashi/org-pukiwiki") (:keywords "org" "pukiwiki"))]) (ox-pandoc . [(20140819 27) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) "org exporter for pandoc." single ((:url . "https://github.com/kawabata/ox-pandoc") (:keywords "tools"))]) (ox-html5slide . [(20131228 106) ((org (8 0))) "Export org-mode to HTML5 slide." single ((:url . "http://github.com/coldnew/org-html5slide") (:keywords "html" "presentation"))]) (ox-asciidoc . [(20140215 910) ((org (8 1))) "AsciiDoc Back-End for Org Export Engine" single ((:url . "https://github.com/yashi/org-asciidoc") (:keywords "org" "asciidoc"))]) (owdriver . [(20141011 1038) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single ((:url . "https://github.com/aki2o/owdriver") (:keywords "convenience"))]) (ov . [(20140817 852) ((emacs (24 3))) "Overlay library for Emacs Lisp" single ((:url . "https://github.com/ShingoFukuyama/ov.el") (:keywords "overlay"))]) (outshine . [(20141014 1301) nil "outline with outshine outshines outline" single ((:url . "https://github.com/tj64/outshine"))]) (outorg . [(20140921 1140) nil "Org-style comment editing" single ((:url . "https://github.com/tj64/outorg"))]) (outlined-elisp-mode . [(20131108 627) nil "outline-minor-mode settings for emacs lisp" single ((:url . "http://hins11.yu-yake.com/"))]) (outline-magic . [(20130813 1633) nil "outline mode extensions for Emacs" single ((:keywords "outlines"))]) (otter-mode . [(20121202 1203) nil "Major mode for source files of the Otter automated theorem prover" single ((:url . "https://github.com/scvalex/script-fu/blob/master/otter-mode.el"))]) (osx-pseudo-daemon . [(20131026 2030) nil "Daemon mode that plays nice with OSX." single ((:url . "https://github.com/DarwinAwardWinner/osx-pseudo-daemon") (:keywords "convenience" "osx"))]) (osx-plist . [(20101130 748) nil "Apple plist file parser" single ((:keywords "convenience"))]) (osx-location . [(20130907 433) nil "Watch and respond to changes in geographical location on OS X" tar nil]) (osx-clipboard . [(20141012 317) nil "Use the OS X clipboard from terminal Emacs" single ((:url . "https://github.com/joddie/osx-clipboard-mode"))]) (osx-browse . [(20140508 1641) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single ((:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external"))]) (orgtbl-show-header . [(20141023 437) nil "Show the header of the current column in the minibuffer" single nil]) (orgtbl-ascii-plot . [(20140905 1314) ((org (7))) "ascii-art bar plots in org-mode tables" single ((:keywords "org" "table" "ascii" "plot"))]) (orglue . [(20130912 2142) ((org (8 1)) (epic (0 1)) (org-mac-link (1 2))) "more functionality to org-mode." tar ((:keywords "org"))]) (orglink . [(20140518 1952) ((dash (1 3 2)) (org (8 0))) "use Org Mode links in other modes" single ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext"))]) (orgbox . [(20140528 2126) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single ((:url . "https://github.com/yasuhito/orgbox") (:keywords "org"))]) (organic-green-theme . [(20140925 1039) nil "Low-contrast green color theme." single nil]) (org2blog . [(20140530 454) ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) "Blog from Org mode to wordpress" tar nil]) (org-vcard . [(20140916 737) nil "org-mode support for vCard export and import." tar ((:keywords "outlines" "org" "vcard"))]) (org-trello . [(20141020 425) ((request-deferred (0 1 0)) (deferred (0 3 2)) (s (1 9 0)) (dash (2 8 0)) (emacs (24))) "Minor mode to synchronize org-mode buffer and trello board" tar nil]) (org-toodledo . [(20140331 906) nil "Toodledo integration for Emacs Org mode" tar ((:keywords "outlines" "data"))]) (org-toc . [(20141018 39) nil "add table of contents to org-mode files" single ((:url . "https://github.com/snosov1/org-toc") (:keywords "org-mode" "org" "toc" "table" "of" "contents"))]) (org-screenshot . [(20140503 1534) ((org (7))) "screenshots integrated with org attachment dirs" single ((:url . "https://github.com/dfeich/org-screenshot") (:keywords "org"))]) (org-repo-todo . [(20140205 941) nil "Simple repository todo management with org-mode" single ((:url . "https://github.com/waymondo/org-repo-todo") (:keywords "convenience"))]) (org-redmine . [(20140117 310) ((anything (0))) "Redmine tools using Emacs OrgMode" single ((:url . "https://github.com/gongo/org-redmine") (:keywords "redmine"))]) (org-readme . [(20130508 1005) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) "Integrates Readme.org and Commentary/Change-logs." tar ((:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git"))]) (org-protocol-jekyll . [(20130810 1750) nil "Jekyll's handler for org-protocol" single nil]) (org-present . [(20140525 1201) ((org (7))) "Minimalist presentation minor-mode for Emacs org-mode." single ((:url . "https://github.com/rlister/org-present"))]) (org-pomodoro . [(20140908 946) ((alert (0 5 10))) "Pomodoro implementation for org-mode." tar nil]) (org-pandoc . [(20130729 2150) nil "Export from Org using Pandoc" tar nil]) (org-page . [(20140722 2314) ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0))) "a static site generator based on org mode" tar nil]) (org-outlook . [(20140807 1014) nil "Outlook org" tar ((:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook"))]) (org-octopress . [(20140106 1940) ((org (8 0)) (orglue (0 1)) (ctable (0 1 1))) "Compose octopress articles using org-mode." tar ((:keywords "org" "jekyll" "octopress" "blog"))]) (org-mobile-sync . [(20131118 1416) ((emacs (24 3 50)) (org (8 0))) "automatically sync org-mobile on changes" single ((:url . "https://github.com/steckerhalter/org-mobile-sync") (:keywords "org-mode" "org" "mobile" "sync" "todo"))]) (org-magit . [(20140815 1643) ((magit (1 2 0)) (org (6 1))) "basic support for magit links" single ((:keywords "git" "magit" "outlines"))]) (org-mac-link . [(20141015 908) nil "Insert org-mode links to items selected in various Mac apps" single ((:keywords "org" "mac" "hyperlink"))]) (org-mac-iCal . [(20140107 819) nil "Imports events from iCal.app to the Emacs diary" single ((:keywords "outlines" "calendar"))]) (org-linkany . [(20140314 1408) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single ((:url . "https://github.com/aki2o/org-linkany") (:keywords "org" "completion"))]) (org-link-travis . [(20140405 1927) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single ((:url . "https://github.com/aki2o/org-link-travis") (:keywords "org"))]) (org-journal . [(20140915 738) nil "a simple org-mode based journaling mode" single ((:url . "http://github.com/bastibe/emacs-journal"))]) (org-jira . [(20141020 2157) nil "Syncing between Jira and Org-mode." tar ((:url . "https://github.com/baohaojun/org-jira"))]) (org-jekyll . [(20130508 539) ((org (8 0))) "Export jekyll-ready posts form org-mode entries" single ((:url . "http://juanreyero.com/open/org-jekyll/") (:keywords "hypermedia"))]) (org-impress-js . [(20140616 912) nil "No description available." tar nil]) (org-grep . [(20140214 2322) nil "Kind of M-x rgrep adapted for Org mode." single ((:url . "https://github.com/pinard/org-grep"))]) (org-gnome . [(20140111 1113) ((notify (2010 8 20)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single ((:keywords "org" "gnome"))]) (org-gcal . [(20140606 2322) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" single ((:url . "https://github.com/myuhe/org-gcal.el") (:keywords "convenience"))]) (org-fstree . [(20090723 1119) nil "include a filesystem subtree into an org file" single ((:url . "http://www.burtzlaff.de/org-fstree/org-fstree.el") (:keywords "org-mode" "filesystem" "tree"))]) (org-elisp-help . [(20130423 1845) ((cl-lib (0 2)) (org (8 0))) "org links to emacs-lisp documentation" single ((:url . "https://github.com/tarsius/org-elisp-help") (:keywords "org" "remember" "lisp"))]) (org-eldoc . [(20141018 1933) ((org (8))) "display org header and src block info using eldoc" single ((:url . "https://bitbucket.org/ukaszg/org-eldoc") (:keywords "eldoc" "outline" "breadcrumb" "org" "babel" "minibuffer"))]) (org-ehtml . [(20140524 1424) ((web-server (20140109 2200)) (emacs (24 3))) "Export Org-mode files as editable web pages" tar nil]) (org-drill-table . [(20140117 437) ((s (1 7 0)) (dash (2 2 0)) (cl-lib (0 3)) (org-plus-contrib (8 2)) (emacs (24 1))) "Generate drill cards from org tables" single nil]) (org-dotemacs . [(20130908 2056) ((org (7 9 3)) (cl-lib (1 0))) "Store your emacs config as an org file, and choose which bits to load." single ((:url . "https://github.com/vapniks/org-dotemacs") (:keywords "local"))]) (org-cua-dwim . [(20120203 34) nil "Org-mode and Cua mode compatibility layer" single ((:keywords "org-mode" "cua-mode"))]) (org-context . [(20140808 458) nil "Contextual capture and agenda commands for Org-mode" single ((:url . "https://github.com/thisirs/org-context") (:keywords "org" "capture" "agenda" "convenience"))]) (org-caldav . [(20140630 1305) ((org (7))) "Sync org files with external calendar through CalDAV" single ((:keywords "calendar" "caldav"))]) (org-bullets . [(20140918 1437) nil "Show bullets in org-mode as UTF-8 characters" single ((:url . "https://github.com/sabof/org-bullets"))]) (org-agenda-property . [(20140626 1716) ((emacs (24 2))) "Display org properties in the agenda buffer." single ((:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar"))]) (org-ac . [(20140302 713) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single ((:url . "https://github.com/aki2o/org-ac") (:keywords "org" "completion"))]) (operate-on-number . [(20140522 730) nil "Operate on number at point with arithmetic functions" single ((:url . "https://github.com/knu/operate-on-number.el") (:keywords "editing"))]) (openwith . [(20120531 1736) nil "Open files with external programs" single ((:url . "https://bitbucket.org/jpkotta/openwith") (:keywords "files" "processes"))]) (openstack-cgit-browse-file . [(20130819 527) nil "Browse the current file in OpenStack cgit" single ((:url . "https://github.com/chmouel/openstack-cgit-browse-file") (:keywords "convenience" "vc" "git" "cgit" "gerrit" "openstack"))]) (open-junk-file . [(20130131 720) nil "Open a junk (memo) file to try-and-error" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/open-junk-file.el") (:keywords "convenience" "tools"))]) (oneonone . [(20140903 1656) ((hexrgb (0))) "Frame configuration that uses one frame per window." single ((:url . "http://www.emacswiki.org/oneonone.el") (:keywords "local" "frames"))]) (on-screen . [(20140502 2310) ((cl-lib (0))) "guide your eyes while scrolling" single ((:url . "https://github.com/michael-heerdegen/on-screen.el") (:keywords "convenience"))]) (omnisharp . [(20141015 1541) ((json (1 2)) (dash (1 8 0)) (popup (0 5)) (auto-complete (1 4)) (flycheck (0 19)) (csharp-mode (0 8 6))) "Omnicompletion (intellisense) and more for C#" single ((:url . "https://github.com/sp3ctum/omnisharp-emacs") (:keywords "csharp" "c#" "ide" "auto-complete" "intellisense"))]) (omniref . [(20140222 1526) nil "Omniref Ruby documentation search engine interface" single ((:url . "http://github.org/dotemacs/omniref.el") (:keywords "docs" "help" "tools"))]) (om-mode . [(20140915 1710) nil "Insert Om component template with life cycle." single ((:keywords "clojurescript"))]) (olivetti . [(20141016 2107) nil "Minor mode for a nice writing environment" single ((:keywords "wp"))]) (oldlace-theme . [(20140831 718) ((emacs (24))) "Emacs 24 theme with an 'oldlace' background." single nil]) (offlineimap . [(20130331 1041) nil "Run OfflineIMAP from Emacs" single ((:url . "http://julien.danjou.info/offlineimap-el.html"))]) (ocp-indent . [(20140826 729) nil "automatic indentation with ocp-indent" single ((:url . "http://www.typerex.org/ocp-indent.html") (:keywords "ocaml" "languages"))]) (occur-x . [(20130610 943) nil "Extra functionality for occur" single ((:keywords "occur" "search" "convenience"))]) (occur-context-resize . [(20140826 1549) nil "dynamically resize context around matches in occur-mode" single ((:url . "https://github.com/dgtized/occur-context-resize.el") (:keywords "matching"))]) (occidental-theme . [(20130312 1558) nil "Custom theme for faces based on Adwaita" single ((:url . "http://github.com/olcai/occidental-theme"))]) (obsidian-theme . [(20140420 1243) nil "port of the eclipse obsidian theme" single ((:url . "http://github.com/mswift42/obsidian-theme"))]) (object-registry . [(20130521 1513) ((cl-lib (0 2))) "OBSOLETE track data items by various instance slots" single ((:url . "https://github.com/emacsattic/object-registry") (:keywords "data" "oo"))]) (objc-font-lock . [(20141021 1422) nil "Highlight Objective-C method calls." single ((:url . "https://github.com/Lindydancer/objc-font-lock") (:keywords "languages" "faces"))]) (ob-translate . [(20130718 1029) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." single ((:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation"))]) (ob-sml . [(20130829 1443) ((sml-mode (6 4))) "org-babel functions for template evaluation" single ((:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research"))]) (ob-mongo . [(20130718 1032) ((org (8))) "Execute mongodb queries within org-mode blocks." single ((:url . "https://github.com/krisajenkins/ob-mongo") (:keywords "org" "babel" "mongo" "mongodb"))]) (ob-browser . [(20130724 1202) ((org (8))) "Translation of text blocks in org-mode." tar ((:url . "https://github.com/krisajenkins/ob-browser") (:keywords "org" "babel" "browser" "phantomjs"))]) (oauth . [(20130127 2051) nil "Oauth library." tar ((:keywords "comm"))]) (o-blog . [(20140711 1132) nil "" tar ((:keywords "emacs"))]) (nyan-prompt . [(20140810 108) nil "Nyan Cat on the eshell prompt." tar ((:url . "http://github.com/PuercoPop/nyan-prompt") (:keywords "nyan" "cat" "lulz" "eshell" "rainbow dependencies ((rx 0))"))]) (nyan-mode . [(20140801 1629) nil "Nyan Cat shows position in current buffer in mode-line." tar ((:url . "http://nyan-mode.buildsomethingamazing.com") (:keywords "nyan" "cat" "lulz" "pop tart cat" "build something amazing"))]) (nvm . [(20140121 840) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0))) "Manage Node versions within Emacs" single ((:url . "http://github.com/rejeep/nvm.el") (:keywords "node" "nvm"))]) (nummm-mode . [(20131117 514) nil "Display the number of minor modes instead of their names" single ((:url . "http://github.com/agpchil/nummm-mode"))]) (number . [(20140719 539) nil "Working with numbers at point." single nil]) (nu-mode . [(20141022 1700) ((undo-tree (0 6 5)) (helm (20140902 1005))) "Modern Emacs Prompts Based Keybinding." tar nil]) (nsis-mode . [(20130723 2228) nil "NSIS-mode" tar ((:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis"))]) (nrepl-sync . [(20140807 1154) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single ((:url . "https://github.com/phillord/lein-sync"))]) (nrepl-ritz . [(20130516 1339) ((nrepl (0 1 7)) (fringe-helper (0 1 1))) "nrepl extensions for ritz" single ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "nrepl"))]) (nrepl-eval-sexp-fu . [(20140311 641) ((highlight (0 0 0)) (smartparens (0 0 0)) (thingatpt (0 0 0))) "Tiny functionality enhancements for evaluating sexps." single ((:keywords "lisp" "highlight" "convenience"))]) (novice+ . [(20131227 143) nil "Extensions to `novice.el'." single ((:url . "http://www.emacswiki.org/novice+.el") (:keywords "internal" "help"))]) (notmuch-unread . [(20140613 744) ((notmuch (0 18))) "Display unread mail count in the mode line" single nil]) (notmuch-labeler . [(20131230 1219) ((notmuch (0))) "Improve notmuch way of displaying labels" tar ((:url . "https://github.com/DamienCassou/notmuch-labeler") (:keywords "emacs" "package" "elisp" "notmuch" "emails"))]) (notmuch . [(20140924 1355) nil "No description available." tar nil]) (nose . [(20140520 1248) nil "Easy Python test running in Emacs" single ((:keywords "nose" "python" "testing"))]) (noflet . [(20140822 837) nil "locally override functions" single ((:url . "https://github.com/nicferrier/emacs-noflet") (:keywords "lisp"))]) (nodejs-repl . [(20130520 1142) nil "Run Node.js REPL" single nil]) (node-resolver . [(20140930 1323) ((cl-lib (0 5))) "hook to install node modules in background" single ((:url . "https://github.com/meandavejustice/node-resolver.el") (:keywords "convenience" "nodejs" "javascript" "npm"))]) (noctilux-theme . [(20140406 302) nil "Dark theme inspired by LightTable" tar nil]) (noccur . [(20140905 812) ((projectile (0 10 0))) "Run multi-occur on project/dired files" single ((:keywords "convenience"))]) (nnir-est . [(20140301 902) nil "Gnus nnir interface for HyperEstraier" single ((:url . "https://github.com/kawabata/nnir-est") (:keywords "mail"))]) (nm . [(20140819 1029) ((notmuch (0 18)) (peg (0 6)) (company (0)) (emacs (24))) "N E V E R M O R E: an experimental email interface for Notmuch" tar ((:url . "https://github.com/tjim/nevermore"))]) (nix-mode . [(20140917 735) nil "Major mode for editing Nix expressions" single ((:url . "https://github.com/NixOS/nix/tree/master/misc/emacs"))]) (ninja-mode . [(20140629 2217) nil "Major mode for editing .ninja files" single nil]) (nimrod-mode . [(20110125 1804) nil "A major mode for the Nimrod programming language" single ((:keywords "nimrod"))]) (niflheim-theme . [(20140827 1430) nil "A port of the Nifleim theme to Emacs" single ((:url . "https://github.com/niflheim-theme/emacs") (:keywords "themes"))]) (nginx-mode . [(20140321 2328) nil "major mode for editing nginx config files" single ((:keywords "nginx"))]) (nexus . [(20140114 805) nil "REST Client for Nexus Maven Repository servers" tar ((:keywords "comm"))]) (newlisp-mode . [(20141018 1550) nil "newLISP editing mode for Emacs" single ((:url . "https://github.com/kosh04/newlisp-mode") (:keywords "language" "lisp" "newlisp"))]) (never-comment . [(20140104 1707) nil "Never blocks are comment" single ((:url . "http://stackoverflow.com/a/4554658/89376"))]) (neotree . [(20141006 949) nil "A tree plugin like NerdTree for Vim" single ((:url . "https://github.com/jaypei/emacs-neotree"))]) (nemerle . [(20130328 1046) nil "major mode for editing nemerle programs" single ((:keywords "nemerle" "mode" "languages"))]) (nclip . [(20130617 1615) nil "Network (HTTP) Clipboard" tar ((:url . "http://www.github.com/maio/nclip.el") (:keywords "nclip" "clipboard" "network"))]) (ncl-mode . [(20141013 244) nil "Major Mode for editing NCL scripts and other goodies" tar nil]) (navorski . [(20140915 1623) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single ((:keywords "terminal"))]) (navi2ch . [(20140717 224) nil "Navigator for 2ch for Emacsen" tar ((:keywords "network" "2ch"))]) (navi-mode . [(20141019 510) nil "major-mode for easy buffer-navigation" single ((:url . "https://github.com/tj64/navi"))]) (nav-flash . [(20140508 1641) nil "Briefly highlight the current line" single ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface"))]) (nav . [(20120507 307) nil "Emacs mode for filesystem navigation" tar nil]) (narrow-indirect . [(20140915 37) nil "Narrow using an indirect buffer that is a clone" single ((:url . "http://www.emacswiki.org/narrow-indirect.el") (:keywords "narrow" "indirect" "buffer" "clone" "view" "multiple-modes"))]) (naquadah-theme . [(20140731 509) nil "A theme based on Tango color set" single nil]) (nanowrimo . [(20131201 40) nil "Track progress for nanowrimo" single ((:url . "https://bitbucket.org/gvol/nanowrimo-mode"))]) (namespaces . [(20130326 1850) nil "An implementation of namespaces for Elisp, with an emphasis on immutabilty." single ((:url . "https://github.com/chrisbarrett/elisp-namespaces"))]) (names . [(20141019 2133) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Works like C++ namespaces to avoid name clobbering." tar ((:url . "http://github.com/Bruce-Connor/names"))]) (naked . [(20131227 142) nil "Provide for naked key descriptions: no angle brackets." single ((:url . "http://www.emacswiki.org/naked.el") (:keywords "lisp" "key" "print" "format" "help"))]) (n3-mode . [(20130116 1729) nil "mode for Notation 3" single nil]) (mysql2sqlite . [(20120514 1031) nil "Convert mysql databases into sqlite databases." single nil]) (mykie . [(20140221 2225) nil "Command multiplexer: Register multiple functions to a keybind" tar ((:url . "https://github.com/yuutayamada/mykie-el") (:keywords "emacs" "configuration" "keybind"))]) (mwe-log-commands . [(20100703 841) nil "log keyboard commands to buffer" single ((:keywords "help"))]) (mvn . [(20131228 212) nil "helpers for compiling with maven" single ((:url . "https://github.com/apgwoz/mvn-el") (:keywords "compilation" "maven" "java"))]) (muttrc-mode . [(20090804 2252) nil "Major mode to edit muttrc under Emacs" single nil]) (mustang-theme . [(20141017 1923) nil "port of vim's mustang theme" single ((:url . "http://github.com/mswift42/mustang-theme"))]) (mustache-mode . [(20111003 1403) nil "A major mode for editing Mustache files." single nil]) (mustache . [(20131117 1707) ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) "a mustache templating library in emacs lisp" tar nil]) (multiple-cursors . [(20141022 639) nil "Multiple cursors for Emacs." tar nil]) (multifiles . [(20130615 1733) nil "View and edit parts of multiple files in one buffer" single ((:keywords "multiple" "files"))]) (multi-web-mode . [(20130823 2354) nil "multiple major mode support for web editing" tar ((:url . "https://github.com/fgallina/multi-web-mode") (:keywords "convenience" "languages" "wp"))]) (multi-term . [(20140827 704) nil "Managing multiple terminal buffers in Emacs." single ((:url . "http://www.emacswiki.org/emacs/download/multi-term.el") (:keywords "term" "terminal" "multiple buffer"))]) (multi-project . [(20140103 937) nil "Easily work with multiple projects." single ((:url . "https://bitbucket.org/ellisvelo/multi-project/overview") (:keywords "project" "management"))]) (multi-eshell . [(20120608 1835) nil "Create and manage multiple shells within Emacs" single ((:url . "http://cims.nyu.edu/~stucchio"))]) (multi . [(20131013 1144) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single ((:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch"))]) (mu4e-maildirs-extension . [(20140314 531) nil "Show mu4e maildirs summary in mu4e-main-view" single ((:url . "http://github.com/agpchil/mu4e-maildirs-extension"))]) (mpages . [(20140915 1638) nil "An Emacs buffer for quickly writing your Morning Pages" single ((:url . "https://github.com/slevin/mpages"))]) (moz-controller . [(20141002 247) ((moz (0))) "Control Firefox from Emacs" single ((:url . "https://github.com/RenWenshan/emacs-moz-controller"))]) (moz . [(20090407 1705) nil "Lets current buffer interact with inferior mozilla." single ((:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el"))]) (mowedline . [(20140708 1756) nil "elisp utilities for using mowedline" single nil]) (move-text . [(20140307 1644) nil "Move current line or region with M-up or M-down." single ((:keywords "edit"))]) (move-dup . [(20140925 1108) nil "Eclipse-like moving and duplicating lines or rectangles." single ((:keywords "convenience" "wp"))]) (mouse3 . [(20140721 2100) nil "Customizable behavior for `mouse-3'." single ((:url . "http://www.emacswiki.org/mouse3.el") (:keywords "mouse" "menu" "keymap" "kill" "rectangle" "region"))]) (mouse-slider-mode . [(20130609 1126) nil "scale numbers dragged under the mouse" single ((:url . "https://github.com/skeeto/mouse-slider-mode"))]) (mouse+ . [(20140713 1755) nil "Extensions to `mouse.el'." single ((:url . "http://www.emacswiki.org/mouse+.el") (:keywords "mouse"))]) (motion-mode . [(20140919 2156) ((flymake-easy (0 7)) (flymake-cursor (1 0 2))) "major mode for RubyMotion enviroment" tar ((:url . "https://github.com/ainame/motion-mode"))]) (mote-mode . [(20121015 19) ((ruby-mode (1 1))) "Mote minor mode" single ((:url . "http://inkel.github.com/mote-mode/"))]) (morlock . [(20140309 2059) nil "more font-lock keywords for elisp" single ((:url . "http://github.com/tarsius/morlock") (:keywords "convenience"))]) (monroe . [(20141021 2005) nil "Yet another client for nREPL" single ((:url . "http://www.github.com/sanel/monroe") (:keywords "languages" "clojure" "nrepl" "lisp"))]) (monokai-theme . [(20141002 710) nil "A fruity color theme for Emacs." single ((:url . "http://github.com/oneKelvinSmith/monokai-emacs"))]) (monochrome-theme . [(20140326 650) nil "A dark Emacs 24 theme for your focused hacking sessions" tar nil]) (monky . [(20130513 813) nil "Control Hg from Emacs." tar nil]) (mongo . [(20120904 2305) nil "MongoDB driver for Emacs Lisp" tar ((:keywords "convenience"))]) (molokai-theme . [(20130828 300) nil "molokai theme with Emacs theme engine" single ((:url . "https://github.com/alloy-d/color-theme-molokai"))]) (moe-theme . [(20141023 56) nil "A colorful eye-candy theme. Moe, moe, kyun!" tar nil]) (modtime-skip-mode . [(20140128 1701) nil "Minor mode for disabling modtime and supersession checks on files." single ((:url . "http://www.github.com/jordonbiondo/modtime-skip-mode"))]) (modeline-posn . [(20140721 2113) nil "Set up `mode-line-position'." single ((:url . "http://www.emacswiki.org/modeline-posn.el") (:keywords "mode-line" "region" "column"))]) (mode-line-debug . [(20140330 1015) nil "show status of `debug-on-error' in the mode-line" single ((:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp"))]) (mode-icons . [(20130602 848) nil "Show icons for modes" tar ((:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia"))]) (mocker . [(20131006 1234) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single ((:keywords "lisp" "testing"))]) (mocha-snippets . [(20141009 1013) ((yasnippet (0 8 0))) "Yasnippets for the Mocha JS Testing Framework" tar ((:keywords "test" "javascript"))]) (mobdebug-mode . [(20140109 2246) ((lua-mode (20130419)) (emacs (24))) "Major mode for MobDebug" single ((:url . "https://github.com/deftsp/mobdebug-mode"))]) (mo-vi-ment-mode . [(20131029 233) nil "Provide vi-like cursor movement that's easy on the fingers" single ((:keywords "convenience"))]) (mo-git-blame . [(20140409 620) nil "An interactive, iterative 'git blame' mode for Emacs" single ((:keywords "tools"))]) (mmm-mode . [(20140212 4) nil "Allow Multiple Major Modes in a buffer" tar ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools"))]) (mmm-mako . [(20121020 251) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single ((:url . "https://bitbucket.org/pjenvey/mmm-mako"))]) (mkdown . [(20140517 1018) ((markdown-mode (2 0))) "Pretty Markdown previews based on mkdown.com" tar ((:url . "https://github.com/ajtulloch/mkdown.el") (:keywords "markdown"))]) (misc-fns . [(20141014 1823) nil "Miscellaneous non-interactive functions." single ((:url . "http://www.emacswiki.org/misc-fns.el") (:keywords "internal" "unix" "lisp" "extensions" "local"))]) (misc-cmds . [(20140817 2006) nil "Miscellaneous commands (interactive functions)." single ((:url . "http://www.emacswiki.org/misc-cmds.el") (:keywords "internal" "unix" "extensions" "maint" "local"))]) (mip-mode . [(20140930 1014) ((dash (2 5 0))) "virtual projects for emacs." single ((:keywords "workspaces" "workspace" "project" "projects" "mip-mode"))]) (minor-mode-hack . [(20130212 1228) nil "Change priority of minor-mode keymaps" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/minor-mode-hack.el") (:keywords "lisp"))]) (minitest . [(20140829 1152) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" single ((:url . "https://github.com/arthurnn/minitest-emacs"))]) (minimap . [(20140201 1509) nil "Minimap sidebar for Emacs" single ((:keywords "minimap"))]) (minimal-theme . [(20140409 1901) nil "A light/dark minimalistic Emacs 24 theme." tar ((:url . "http://github.com/ikame/minimal-theme") (:keywords "color" "theme" "minimal"))]) (minimal-session-saver . [(20140508 1641) nil "Very lean session saver" single ((:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project"))]) (miniedit . [(20100419 1345) nil "Enhanced editing for minibuffer fields." single nil]) (minibuffer-cua . [(20130906 734) nil "Make CUA mode's S-up/S-down work in minibuffer" single ((:url . "https://github.com/knu/minibuffer-cua.el") (:keywords "completion" "editing"))]) (minibuffer-complete-cycle . [(20130813 1245) nil "Cycle through the *Completions* buffer" single ((:url . "https://github.com/knu/minibuffer-complete-cycle") (:keywords "completion"))]) (minibuf-isearch . [(20071112 534) nil "incremental search on minibuffer history" tar ((:keywords "minibuffer" "history" "incremental search"))]) (minesweeper . [(20140803 22) nil "play minesweeper in Emacs" single ((:url . "https://bitbucket.org/zck/minesweeper.el") (:keywords "game" "fun" "minesweeper" "inane" "diversion"))]) (milkode . [(20140927 129) nil "Command line search and direct jump with Milkode" single ((:keywords "milkode" "search" "grep" "jump" "keyword"))]) (migemo . [(20140823 2303) ((cl-lib (0 5))) "Japanese incremental search through dynamic pattern expansion" single ((:url . "https://github.com/emacs-jp/migemo"))]) (midje-test-mode . [(20131208 1214) ((clojure-mode (1 7)) (cider (0 3 0))) "Minor mode for midje" single ((:keywords "languages" "lisp" "test"))]) (midje-mode . [(20131019 1657) ((cider (0 1 4)) (clojure-mode (1 0))) "Minor mode for running Midje tests in emacs" tar nil]) (mic-paren . [(20140714 719) nil "advanced highlighting of matching parentheses" single ((:keywords "languages" "faces" "parenthesis" "matching"))]) (mew . [(20140901 2037) nil "Messaging in the Emacs World" tar nil]) (metaweblog . [(20130707 731) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar nil]) (message-x . [(20140505 1407) nil "No description available." single nil]) (merlin . [(20141020 1352) nil "Mode for Merlin, an assistant for OCaml." tar ((:url . "http://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages"))]) (menu-bar+ . [(20140504 2038) nil "Extensions to `menu-bar.el'." single ((:url . "http://www.emacswiki.org/menu-bar+.el") (:keywords "internal" "local" "convenience"))]) (mentor . [(20140904 2010) ((xml-rpc (1 6 9))) "Frontend for the rTorrent bittorrent client" tar ((:keywords "bittorrent" "rtorrent"))]) (memoize . [(20130421 1534) nil "Memoization functions" single ((:url . "https://github.com/skeeto/emacs-memoize"))]) (melpa-upstream-visit . [(20130720 633) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single ((:keywords "convenience"))]) (mediawiki . [(20130223 1441) nil "mediawiki frontend" single ((:url . "http://launchpad.net/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki"))]) (md-readme . [(20140819 715) nil "Markdown-formatted READMEs for your ELisp" single ((:url . "http://github.com/thomas11/md-readme/tree/master") (:keywords "lisp" "help" "readme" "markdown" "header" "documentation" "github"))]) (mc-extras . [(20130909 327) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar ((:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors"))]) (mb-depth+ . [(20131227 137) nil "Indicate minibuffer-depth in prompt" single ((:url . "http://www.emacswiki.org/mb-depth+.el") (:keywords "convenience"))]) (maxframe . [(20140916 1054) nil "maximize the emacs frame based on display size" single ((:keywords "display" "frame" "window" "maximize"))]) (maude-mode . [(20140212 602) nil "Emacs mode for the programming language Maude" single ((:keywords "maude"))]) (matlab-mode . [(20140923 1233) nil "No description available." tar nil]) (math-symbols . [(20130910 331) ((helm (1 0))) "Math Symbol Input methods and conversion tools" tar ((:url . "https://github.com/kawabata/math-symbols") (:keywords "math symbols" "tex" "latex"))]) (marmalade-upload . [(20141022 1847) nil "No description available." tar nil]) (marmalade . [(20110602 1922) ((furl (0 0 2))) "Elisp interface for the Emacs Lisp package server." single ((:url . "http://code.google.com/p/marmalade"))]) (markup-faces . [(20130117 546) nil "collection of faces for markup language modes" single ((:url . "https://github.com/sensorflo/markup-faces") (:keywords "wp" "faces"))]) (markup . [(20130207 1609) nil "Simple markup generation helpers." single ((:url . "http://github.com/leoc/markup.el") (:keywords "convenience" "markup" "html"))]) (markdown-toc . [(20140630 713) ((s (1 7 0)) (dash (2 5 0)) (markdown-mode (2 0))) "A simple TOC generator for markdown file" tar nil]) (markdown-mode . [(20140914 1312) nil "Emacs Major mode for Markdown-formatted text files" single ((:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex"))]) (markdown-mode+ . [(20120829 810) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar ((:url . "http://github.com/milkypostman/markdown-mode+.el") (:keywords "markdown" "latex" "osx" "rtf"))]) (mark-tools . [(20130614 625) nil "Some simple tools to access the mark-ring in Emacs" single ((:url . "https://github.com/stsquad/emacs-mark-tools"))]) (mark-multiple . [(20121118 1054) nil "Sorta lets you mark several regions at once." tar nil]) (map-regexp . [(20130522 1703) ((cl-lib (0 2))) "map over matches of a regular expression" single ((:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience"))]) (map-progress . [(20140310 1732) nil "mapping macros that report progress" single ((:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience"))]) (mandoku-meta-zb . [(20141023 222) ((org (8)) (mandoku (0 5))) "Metadata for the ZB repository to be used by Mandoku" tar ((:url . "http://www.mandoku.org") (:keywords "convenience"))]) (mandoku . [(20141015 134) ((org (8 0))) "A tool to access repositories of premodern Chinese texts" tar nil]) (manage-minor-mode . [(20140310 1200) ((emacs (24 3))) "Manage your minor-modes easily" single ((:url . "https://github.com/ShingoFukuyama/manage-minor-mode") (:keywords "minor-mode" "manage" "emacs"))]) (man-commands . [(20130627 1953) nil "Add interactive commands for every manpages installed in your computer." single ((:url . "http://github.com/nflath/man-commands"))]) (mallard-snippets . [(20131023 1451) ((yasnippet (0 8 0)) (mallard-mode (0 1 1))) "Yasnippets for Mallard" tar ((:url . "https://github.com/jhradilek/emacs-mallard-snippets") (:keywords "snippets" "mallard"))]) (mallard-mode . [(20131203 2325) nil "Major mode for editing Mallard files" tar ((:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard"))]) (malinka . [(20140807 1743) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single ((:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management"))]) (malabar-mode . [(20140903 1647) ((fringe-helper (1 0 1))) "A better Java mode for Emacs" tar ((:url . "http://www.github.com/m0smith/malabar-mode") (:keywords "java" "maven" "language" "malabar"))]) (makey . [(20131231 930) ((cl-lib (0 2))) "interactive commandline mode" single nil]) (maker-mode . [(20141022 1031) ((s (1 3 0)) (dash (2 8 0))) "Emacs mode for maker (scala build tool)" single ((:url . "https://github.com/fommil/maker-mode") (:keywords "processes" "tools"))]) (make-it-so . [(20140916 437) ((helm (1 5 3)) (emacs (24))) "Transform files with Makefile recipes." tar ((:url . "https://github.com/abo-abo/make-it-so") (:keywords "make" "dired"))]) (make-color . [(20140625 750) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single ((:url . "https://github.com/alezost/make-color.el") (:keywords "color"))]) (main-line . [(20130404 2204) nil "modeline replacement forked from an early version of powerline.el" single ((:url . "https://github.com/jasonm23/emacs-mainline") (:keywords "statusline" "/" "modeline"))]) (magma-mode . [(20141006 1726) ((cl-lib (0 3)) (dash (2 6 0)) (f (0 17 1))) "Magma mode for Emacs" tar nil]) (magit-tramp . [(20140815 1933) ((magit (1 2 0))) "git method for TRAMP" tar ((:url . "https://github.com/sigma/magit-tramp"))]) (magit-topgit . [(20140807 1209) ((cl-lib (0 3)) (magit (1 3 0))) "topgit plug-in for Magit" single ((:keywords "vc" "tools"))]) (magit-svn . [(20140807 1209) ((cl-lib (0 3)) (magit (1 3 0))) "git-svn plug-in for Magit" single ((:keywords "vc" "tools"))]) (magit-stgit . [(20140807 1209) ((cl-lib (0 3)) (magit (1 3 0))) "StGit plug-in for Magit" single ((:keywords "vc" "tools"))]) (magit-push-remote . [(20140108 1600) ((magit (1 3 0))) "push remote support for Magit" single ((:url . "https://github.com/tarsius/magit-push-remote") (:keywords "convenience"))]) (magit-log-edit . [(20140522 1437) ((cl-lib (0 3)) (magit (1 3 0))) "[SEMI-OBSOLETE] major mode for editing Git commit messages" single ((:keywords "vc" "tools"))]) (magit-gitflow . [(20140512 1737) ((magit (1 3 0))) "gitflow extension for magit" single ((:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools"))]) (magit-gh-pulls . [(20140919 1501) ((emacs (24)) (gh (0 4 3)) (magit (1 1 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single ((:url . "https://github.com/sigma/magit-gh-pulls") (:keywords "tools"))]) (magit-gerrit . [(20140929 659) ((magit (1 2 0))) "Magit plugin for Gerrit Code Review" single ((:url . "https://github.com/terranpro/magit-gerrit"))]) (magit-find-file . [(20140908 1058) ((magit (1 2 0)) (dash (2 8 0))) "completing-read over all files in Git" single ((:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git"))]) (magit-filenotify . [(20140807 640) ((magit (1 3 0))) "Refresh status buffer when git tree changes" single ((:keywords "tools"))]) (magit-annex . [(20140629 1757) ((cl-lib (0 3)) (magit (1 2 0))) "Use git annex within magit" single ((:url . "https://github.com/kyleam/magit-annex") (:keywords "vc" "tools"))]) (magit . [(20141016 1355) ((cl-lib (0 3)) (git-commit-mode (0 14 0)) (git-rebase-mode (0 14 0))) "control Git from Emacs" tar ((:keywords "vc" "tools"))]) (magic-latex-buffer . [(20140909 2229) ((cl-lib (0 5)) (emacs (24 3))) "magical syntax highlighting for LaTeX-mode buffers" single ((:url . "http://hins11.yu-yake.com/"))]) (mag-menu . [(20130224 356) ((splitter (0 1 0))) "Intuitive keyboard-centric menu system" single ((:url . "https://github.com/chumpage/mag-menu") (:keywords "convenience"))]) (macrostep . [(20141015 250) nil "interactive macro stepper for Emacs Lisp" single ((:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging"))]) (macros+ . [(20131227 136) nil "Extensions to `macros.el'." single ((:url . "http://www.emacswiki.org/macros+.el") (:keywords "abbrev" "local"))]) (macro-math . [(20130328 1204) nil "in-buffer mathematical operations" single ((:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience"))]) (m-buffer . [(20140929 1627) ((dash (2 5 0)) (emacs (24 3))) "Buffer Manipulation Functions" single nil]) (lxc . [(20140410 1622) nil "lxc integration with Emacs" single ((:url . "https://github.com/nicferrier/emacs-lxc") (:keywords "processes"))]) (lusty-explorer . [(20130407 1356) nil "Dynamic filesystem explorer and buffer switcher" single ((:keywords "convenience" "files" "matching"))]) (lush-theme . [(20141022 427) ((emacs (24))) "A dark theme with strong colors" single ((:url . "https://github.com/andre-richter/emacs-lush-theme") (:keywords "theme" "dark" "strong colors"))]) (lui . [(20141003 734) ((tracking (0))) "Linewise User Interface" tar nil]) (lua-mode . [(20141021 1722) nil "a major-mode for editing Lua scripts" single ((:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools"))]) (love-minor-mode . [(20130429 1759) ((lua-mode (20130419))) "Minor mode for working on LÖVE projects" single ((:url . "https://github.com/ejmr/love-minor-mode"))]) (lorem-ipsum . [(20140911 1708) nil "Insert dummy pseudo Latin text." single ((:keywords "tools" "language" "convenience"))]) (loop . [(20130309 1105) nil "friendly imperative loop structures" single ((:keywords "loop" "while" "for each" "break" "continue"))]) (look-mode . [(20130824 1206) nil "quick file viewer for image and text file browsing" single nil]) (look-dired . [(20130511 1924) ((look-mode (1 0))) "Extensions to look-mode for dired buffers" single ((:url . "https://github.com/vapniks/look-dired") (:keywords "convenience"))]) (lolcode-mode . [(20111002 447) nil "Major mode for editing LOLCODE" single ((:url . "http://github.com/bodil/lolcode-mode") (:keywords "lolcode" "major" "mode"))]) (logstash-conf . [(20141022 1734) nil "basic mode for editing logstash configuration" single nil]) (logito . [(20120225 1555) ((eieio (1 3))) "logging library for Emacs" single ((:keywords "lisp" "tool"))]) (logalimacs . [(20131021 1429) ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120))) "Front-end to logaling-command for Ruby gems" single ((:url . "https://github.com/logaling/logalimacs") (:keywords "translation" "logaling-command"))]) (log4j-mode . [(20101016 1122) nil "major mode for viewing log files" single ((:keywords "log" "log4j" "java"))]) (log4e . [(20130514 1212) nil "provide logging framework for elisp" single ((:url . "https://github.com/aki2o/log4e") (:keywords "log"))]) (loccur . [(20131022 519) nil "Performs an occur-like folding in current buffer." single ((:url . "https://github.com/fourier/loccur") (:keywords "matching"))]) (loc-changes . [(20130723 2230) nil "Helps users and programs keep track of positions even after buffer changes." single ((:url . "http://github.com/rocky/emacs-loc-changes"))]) (load-theme-buffer-local . [(20120702 1636) nil "Install emacs24 color themes by buffer." single ((:url . "http://github.com/vic/color-theme-buffer-local") (:keywords "faces"))]) (load-relative . [(20130410 549) nil "relative file load (within a multi-file Emacs package)" single ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal"))]) (livid-mode . [(20131116 844) ((skewer-mode (1 5 3)) (s (1 8 0))) "Live browser eval of JavaScript every time a buffer changes" single ((:url . "https://github.com/pandeiro/livid-mode"))]) (livescript-mode . [(20140613 21) nil "Major mode for editing LiveScript files" single ((:url . "https://github.com/yhisamatsu/livescript-mode") (:keywords "languages" "livescript"))]) (lively . [(20120728 1413) nil "Interactively updating text" single nil]) (literate-coffee-mode . [(20140621 2341) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single ((:url . "https://github.com/syohex/emacs-literate-coffee-mode"))]) (litable . [(20140306 536) ((dash (2 6 0))) "dynamic evaluation replacement with emacs" single ((:keywords "lisp"))]) (list-utils . [(20140508 1641) nil "List-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions"))]) (list-register . [(20130824 1200) nil "List register" single nil]) (list-processes+ . [(20131117 1935) nil "Add process management to `list-processes'" single ((:url . "not distributed yet"))]) (list-packages-ext . [(20130927 1208) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single ((:keywords "convenience" "tools"))]) (lispyscript-mode . [(20130828 1019) nil "Major mode for LispyScript code." single ((:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages"))]) (lispy . [(20141008 753) ((helm (1 5 3)) (ace-jump-mode (2 0)) (s (1 4 0)) (noflet (0 0 10)) (multiple-cursors (1 3 0)) (iedit (0 97))) "vi-like Paredit" tar nil]) (lispxmp . [(20130824 1207) nil "Automagic emacs lisp code annotation" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/lispxmp.el") (:keywords "lisp" "convenience"))]) (linum-relative . [(20140731 1030) nil "display relative line number in emacs." single ((:url . "http://github.com/coldnew/linum-relative") (:keywords "converience"))]) (linphone . [(20130524 709) nil "Emacs interface to Linphone" tar ((:url . "https://github.com/zabbal/emacs-linphone") (:keywords "comm"))]) (linked-buffer . [(20141023 450) ((emacs (24)) (m-buffer (0 5)) (dash (2 5 0))) "One buffer as a view of another" tar nil]) (link . [(20140717 2329) nil "Hypertext links in text buffers" single ((:keywords "interface" "hypermedia"))]) (lingr . [(20100807 1331) nil "Lingr Client for GNU Emacs" single ((:url . "http://github.com/lugecy/lingr-el") (:keywords "chat" "client" "internet"))]) (light-soap-theme . [(20140903 1702) ((emacs (24))) "Emacs 24 theme with a light background." single nil]) (lice . [(20140116 957) nil "License And Header Template" tar ((:url . "https://github.com/buzztaiki/lice-el") (:keywords "template" "license" "tools"))]) (lib-requires . [(20131227 130) nil "Commands to list Emacs Lisp library dependencies." single ((:url . "http://www.emacswiki.org/lib-requires.el") (:keywords "libraries" "files"))]) (lfe-mode . [(20140113 1914) nil "Lisp Flavoured Erlang mode" tar nil]) (lexbind-mode . [(20140303 659) nil "Puts the value of lexical-binding in the mode line" single ((:url . "https://github.com/spacebat/lexbind-mode") (:keywords "convenience" "lisp"))]) (levenshtein . [(20051013 1756) nil "Edit distance between two strings." single ((:keywords "lisp"))]) (leuven-theme . [(20141022 518) nil "Awesome Emacs color theme on white background" single ((:url . "https://github.com/fniessen/emacs-leuven-theme") (:keywords "color" "theme"))]) (letcheck . [(20130213 1905) nil "Check the erroneous assignments in let forms" single ((:url . "https://github.com/Fuco1/letcheck") (:keywords "convenience"))]) (less-css-mode . [(20140919 824) nil "Major mode for editing LESS CSS files (lesscss.org)" single ((:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode"))]) (lemon-mode . [(20130216 804) nil "A major mode for editing lemon grammar files" single ((:keywords "lemon"))]) (lein . [(20130406 1612) ((nrepl (0 1 7))) "Eshell interface to Leiningen" single ((:url . "https://github.com/technomancy/lein.el") (:keywords "tools" "convenience"))]) (legalese . [(20100119 2148) nil "Add legalese to your program files" single ((:keywords "convenience"))]) (ledger-mode . [(20141011 102) nil "Helper code for use with the \"ledger\" command-line tool" tar nil]) (lcs . [(20121201 855) nil "find out the longest common sequence" single ((:url . "https://github.com/jorgenschaefer/circe/wiki/lcs"))]) (launch . [(20130619 1804) nil "launch files with OS-standard associated applications." single ((:url . "https://github.com/sfllaw/emacs-launch") (:keywords "convenience" "processes"))]) (latex-preview-pane . [(20140403 1349) nil "Makes LaTeX editing less painful by providing a updatable preview pane" tar nil]) (latex-pretty-symbols . [(20111011 846) nil "Display many latex symbols as their unicode counterparts" single ((:url . "https://bitbucket.org/mortiferus/latex-pretty-symbols.el") (:keywords "convenience" "display"))]) (latex-extra . [(20140921 652) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." single ((:url . "http://github.com/Bruce-Connor/latex-extra") (:keywords "tex"))]) (latest-clojure-libraries . [(20140314 917) nil "Clojure dependency resolver" single ((:url . "http://github.com/AdamClements/latest-clojure-libraries/"))]) (langtool . [(20140330 616) nil "Grammar check utility using LanguageTool" single ((:url . "https://github.com/mhayashi1120/Emacs-langtool/raw/master/langtool.el") (:keywords "docs"))]) (langdoc . [(20140120 2145) ((cl-lib (0 2))) "Help to define help document mode for various languages" single ((:url . "https://github.com/tom-tan/langdoc/") (:keywords "convenience" "eldoc"))]) (lang-refactor-perl . [(20131122 1627) nil "Simple refactorings, primarily for Perl" single ((:url . "https://github.com/jplindstrom/emacs-lang-refactor-perl") (:keywords "languages" "refactoring" "perl"))]) (lacarte . [(20140201 2051) nil "Execute menu items as commands, with completion." single ((:url . "http://www.emacswiki.org/lacarte.el") (:keywords "menu-bar" "menu" "command" "help" "abbrev" "minibuffer" "keys" "completion" "matching" "local" "internal" "extensions"))]) (kwin . [(20130207 131) nil "communcate with the KWin window manager" single ((:url . "http://github.com/Tass/kwin-minor-mode"))]) (kv . [(20140108 1034) nil "key/value data structure functions" single ((:keywords "lisp"))]) (kpm-list . [(20130131 448) nil "An emacs buffer list that tries to intelligently group together buffers." single ((:url . "https://github.com/KMahoney/kpm-list/"))]) (kolon-mode . [(20140122 634) nil "Syntax highlighting for Text::Xslate's Kolon syntax" single ((:url . "https://github.com/samvtran/kolon-mode") (:keywords "xslate" "perl"))]) (know-your-http-well . [(20140608 608) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar nil]) (kmacro-decision . [(20130919 1126) ((el-x (1 0)) (jb-misc-macros (0 2))) "Add conditional branching to keyboard macros" single ((:url . "https://github.com/vapniks/kmacro-decision") (:keywords "convenience"))]) (kivy-mode . [(20140524 857) nil "Emacs major mode for editing Kivy files" single nil]) (kite . [(20130201 1438) ((json (1 2)) (websocket (0 93 1))) "WebKit inspector front-end" tar ((:keywords "tools"))]) (killer . [(20120808 722) nil "kill and delete text" single ((:url . "http://github.com/tarsius/killer") (:keywords "convenience"))]) (kill-ring-search . [(20140422 1155) nil "incremental search for the kill ring" single ((:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching"))]) (kill-ring-ido . [(20140716 922) nil "command for keyring browsing with ido" single nil]) (kibit-mode . [(20140818 926) nil "No description available." tar nil]) (kfg . [(20140909 138) ((f (0 17 1))) "an emacs configuration system" single ((:url . "https://github.com/abingham/kfg"))]) (keymap-utils . [(20140314 1241) ((cl-lib (0 3))) "keymap utilities" single ((:url . "https://github.com/tarsius/keymap-utils") (:keywords "convenience" "extensions"))]) (keyfreq . [(20131109 1226) nil "track command frequencies" single nil]) (keydef . [(20090428 1531) nil "a simpler way to define keys, with kbd syntax" single ((:keywords "convenience" "lisp" "customization" "keyboard" "keys"))]) (keychain-environment . [(20121026 1546) nil "load keychain environment variables" single ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh"))]) (key-intercept . [(20140211 249) nil "Intercept prefix keys" single ((:url . "http://github.com/tarao/key-intercept-el") (:keywords "keyboard"))]) (key-combo . [(20140912 1725) nil "map key sequence to commands" tar ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input"))]) (key-chord . [(20140929 2246) nil "map pairs of simultaneously pressed keys to commands" single ((:keywords "keyboard" "chord" "input"))]) (kanban . [(20130815 348) nil "Parse org-todo headlines to use org-tables as Kanban tables" single ((:keywords "outlines" "convenience"))]) (kaesar-mode . [(20131031 212) ((kaesar (0 1 4))) "Encrypt/Decrypt buffer by AES with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-mode.el") (:keywords "data" "convenience"))]) (kaesar-file . [(20130912 512) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-file.el") (:keywords "data" "files"))]) (kaesar . [(20131031 212) nil "Another AES algorithm encrypt/decrypt string with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el") (:keywords "data"))]) (jvm-mode . [(20140313 432) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single ((:url . "https://github.com/martintrojer/jvm-mode.el") (:keywords "convenience"))]) (jump-to-line . [(20130122 1153) nil "Jump to line number at point." single ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl"))]) (jump-char . [(20140918 2234) nil "navigation by char" single ((:url . "https://github.com/lewang/jump-char"))]) (jump . [(20130702 333) ((findr (0 7)) (inflections (1 1))) "build functions which contextually jump between files" single ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation"))]) (jumblr . [(20140908 1652) ((s (1 8 0)) (dash (2 2 0))) "an anagram game for emacs" tar ((:url . "https://github.com/mkmcc/jumblr") (:keywords "anagram" "word game" "games"))]) (julia-mode . [(20141019 1241) nil "Major mode for editing Julia source code" single ((:url . "https://github.com/JuliaLang/julia") (:keywords "languages"))]) (jtags . [(20111208 1322) nil "enhanced tags functionality for Java development" tar ((:url . "http://jtags.sourceforge.net") (:keywords "languages" "tools"))]) (jsx-mode . [(20130908 1324) nil "major mode for JSX" single ((:url . "https://github.com/jsx/jsx-mode.el"))]) (jss . [(20130508 1023) ((emacs (24 1)) (websocket (0)) (js2-mode (0))) "An emacs interface to webkit and mozilla debuggers" tar ((:keywords "languages"))]) (json-snatcher . [(20140528 47) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single ((:url . "http://github.com/sterlingg/json-snatcher"))]) (json-rpc . [(20140602 1106) ((emacs (24 1)) (cl-lib (0 5))) "JSON-RPC library" single ((:url . "https://github.com/skeeto/elisp-json-rpc"))]) (json-reformat . [(20141009 1455) nil "Reformatting tool for JSON" single ((:url . "https://github.com/gongo/json-reformat") (:keywords "json"))]) (json-mode . [(20141009 1928) ((json-reformat (20141009 1155)) (json-snatcher (20131110 1107))) "Major mode for editing JSON files" single ((:url . "https://github.com/joshwnj/json-mode"))]) (js3-mode . [(20140805 1829) nil "An improved JavaScript editing mode" tar ((:keywords "javascript" "languages"))]) (js2-refactor . [(20141002 1205) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (20130218))) "A JavaScript refactoring library for emacs." tar nil]) (js2-mode . [(20141018 1505) ((emacs (24 1))) "Improved JavaScript editing mode" tar ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript"))]) (js2-closure . [(20140901 529) ((js2-mode (20140114))) "Google Closure dependency manager" single ((:url . "http://github.com/jart/js2-closure"))]) (js-doc . [(20131215 819) nil "Insert JsDoc style comment easily" single ((:url . "https://github.com/mooz/js-doc") (:keywords "document" "comment"))]) (js-comint . [(20080530 1057) nil "Run javascript in an inferior process window." single ((:keywords "javascript" "inferior-mode" "convenience"))]) (jquery-doc . [(20131223 1145) nil "jQuery api documentation interface for emacs" tar ((:keywords "docs" "jquery"))]) (jknav . [(20121006 1625) nil "Automatically enable j/k keys for line-based navigation" single ((:keywords "keyboard" "navigation"))]) (jira . [(20131210 1822) nil "Connect to JIRA issue tracking software" single nil]) (jinja2-mode . [(20120827 503) nil "A major mode for jinja2" single nil]) (jenkins-watch . [(20121004 1926) nil "Watch continuous integration build status" single ((:url . "https://github.com/ataylor284/jenkins-watch"))]) (jedi-direx . [(20140310 536) ((jedi (0 1 2)) (direx (0 1 -3))) "Tree style source code viewer for Python buffer" single nil]) (jedi . [(20140321 1623) ((epc (0 1 0)) (auto-complete (1 4)) (python-environment (0 0 2))) "Python auto-completion for Emacs" tar nil]) (javap-mode . [(20120223 1708) nil "Javap major mode" single ((:url . "http://github.com/hiredman/javap-mode"))]) (javadoc-lookup . [(20130618 2036) nil "Javadoc Emacs integration with Maven" tar ((:url . "https://github.com/skeeto/javadoc-lookup"))]) (java-snippets . [(20140728 136) ((yasnippet (0 8 0))) "Yasnippets for Java" tar ((:url . "https://github.com/nekop/yasnippet-java-mode"))]) (jaunte . [(20130413 519) nil "Emacs Hit a Hint" single nil]) (jape-mode . [(20140903 1106) nil "An Emacs editing mode mode for GATE's JAPE files" single ((:url . "http://github.com/tanzoniteblack/jape-mode") (:keywords "languages" "jape" "gate"))]) (japanlaw . [(20140610 500) ((revive (20121022 411))) "Japan law from law.e-gov.go.jp" single ((:keywords "docs" "help"))]) (japanese-holidays . [(20141023 13) ((cl-lib (0 3))) "calendar functions for the Japanese calendar" single ((:url . "https://github.com/emacs-jp/japanese-holidays") (:keywords "calendar"))]) (jade-mode . [(20131018 1310) ((sws-mode (0))) "Major mode for editing .jade files" single ((:url . "https://github.com/brianc/jade-mode"))]) (jabber . [(20140930 1508) nil "A Jabber client for Emacs." tar nil]) (j-mode . [(20140702 1109) nil "Major mode for editing J programs" tar ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges"))]) (iy-go-to-char . [(20130901 729) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single ((:url . "https://github.com/doitian/iy-go-to-char") (:keywords "navigation" "search"))]) (ix . [(20131027 1229) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single ((:url . "http://www.github.com/theanalyst/ix.el"))]) (ivs-edit . [(20140720 646) ((emacs (24 3)) (dash (2 6 0)) (cl-lib (1 0))) "IVS (Ideographic Variation Sequence) editing tool" tar ((:url . "http://github.com/kawabata/ivs-edit") (:keywords "text"))]) (ivariants . [(20140721 27) ((emacs (24 3)) (ivs-edit (1 0))) "Ideographic variants editor and browser" tar ((:url . "http://github.com/kawabata/ivariants") (:keywords "i18n" "languages"))]) (iterator . [(20140413 53) ((emacs (24)) (cl-lib (0 5))) "A library to create and use elisp iterators objects." single ((:url . "https://github.com/thierryvolpiatto/iterator"))]) (itail . [(20140505 1831) nil "An interactive tail mode" single ((:url . "https://github.com/re5et/itail") (:keywords "tail"))]) (iss-mode . [(20141001 1513) nil "Mode for InnoSetup install scripts" single nil]) (isgd . [(20130927 957) nil "Shorten URLs using the isgd.com shortener service" single ((:url . "https://github.com/chmouel/isgd.el"))]) (isend-mode . [(20130419 558) nil "Interactively send parts of an Emacs buffer to an interpreter" single ((:url . "https://github.com/ffevotte/isend-mode.el"))]) (isearch-symbol-at-point . [(20130728 1821) nil "Use isearch to search for the symbol at point" single ((:url . "https://github.com/re5et/isearch-symbol-at-point") (:keywords "isearch"))]) (isearch-prop . [(20140711 2058) nil "Search text-property or overlay-property contexts." single ((:url . "http://www.emacswiki.org/isearch-prop.el") (:keywords "search" "matching" "invisible" "thing" "help"))]) (isearch+ . [(20141008 2226) nil "Extensions to `isearch.el' (incremental search)." single ((:url . "http://www.emacswiki.org/isearch+.el") (:keywords "help" "matching" "internal" "local"))]) (irony . [(20141013 1305) ((cl-lib (0 5))) "C/C++ minor mode powered by libclang" tar ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools"))]) (irfc . [(20130824 1207) nil "Interface for IETF RFC document." single ((:url . "http://www.emacswiki.org/emacs/download/irfc.el") (:keywords "rfc" "ietf"))]) (iregister . [(20140525 1756) nil "Interactive register commands for Emacs." tar ((:url . "https://github.com/atykhonov/iregister.el") (:keywords "convenience"))]) (ir-black-theme . [(20130303 255) nil "Port of ir-black theme" single ((:keywords "faces"))]) (ipretty . [(20140407 120) nil "Interactive Emacs Lisp pretty-printing" single ((:url . "https://github.com/steckerhalter/ipretty") (:keywords "pretty-print" "elisp" "buffer"))]) (iplayer . [(20140724 1440) nil "Browse and download BBC TV/radio shows" single ((:keywords "multimedia"))]) (io-mode-inf . [(20140128 1434) nil "Interaction with an Io interpreter." single ((:url . "https://github.com/slackorama/io-emacs") (:keywords "io" "languages"))]) (io-mode . [(20140814 621) nil "Major mode to edit Io language files in Emacs" single ((:url . "https://github.com/superbobry/io-mode") (:keywords "languages" "io"))]) (interval-tree . [(20130325 1007) ((dash (1 1 0))) "Interval tree data structure for 1D range queries" single ((:url . "https://github.com/Fuco1/interval-tree") (:keywords "extensions" "data structure"))]) (interaction-log . [(20140502 2310) ((cl-lib (0))) "exhaustive log of interactions with Emacs" single ((:url . "https://github.com/michael-heerdegen/interaction-log.el") (:keywords "convenience"))]) (instapaper . [(20130104 921) nil "add URLs to instapaper from emacs" single ((:url . "htts://bitbucket.org/jfm/emacs-instapaper"))]) (insfactor . [(20140206 1612) nil "Client for a Clojure project with insfactor in it" single ((:url . "http://github.com/duelinmarkers/insfactor.el") (:keywords "clojure"))]) (insert-shebang . [(20140721 822) nil "Insert shebang line automatically." single ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience"))]) (inlineR . [(20120520 1032) nil "insert Tag for inline image of R graphics" single ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el"))]) (inline-crypt . [(20130409 807) nil "Simple inline encryption via openssl" tar nil]) (inkpot-theme . [(20120505 1008) nil "port of vim's inkpot theme" single ((:url . "http://github.com/siovan/emacs24-inkpot.git"))]) (initsplit . [(20140203 741) nil "code to split customizations into different files" single ((:url . "http://www.gci-net.com/users/j/johnw/emacs.html") (:keywords "lisp"))]) (init-loader . [(20140828 2106) nil "Loader for configuration files" single ((:url . "https://github.com/emacs-jp/init-loader/"))]) (inform7-mode . [(20131010 254) ((sws-mode (0 1))) "Major mode for editing Inform 7 source files" single ((:keywords "inform" "inform7" "interactive fiction"))]) (info+ . [(20140504 2110) nil "Extensions to `info.el'." single ((:url . "http://www.emacswiki.org/info+.el") (:keywords "help" "docs" "internal"))]) (inflections . [(20121016 457) nil "convert english words between singular and plural" single ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop"))]) (inf-ruby . [(20141005 850) nil "Run a Ruby process in a buffer" single ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby"))]) (inf-php . [(20130414 321) ((php-mode (1 5 0))) "Run a php interactive shell in a buffer" single ((:url . "https://github.com/taksatou/inf-php") (:keywords "languages" "php"))]) (inf-mongo . [(20131216 528) nil "Run a MongoDB shell process in a buffer" single ((:url . "http://github.com/tobiassvn/inf-mongo") (:keywords "databases" "mongodb"))]) (indicators . [(20130217 1705) nil "Display the buffer relative location of line in the fringe." single ((:url . "https://github.com/Fuco1/indicators.el") (:keywords "fringe" "frames"))]) (indent-guide . [(20140913 735) nil "show vertical lines to guide indentation" single ((:url . "http://hins11.yu-yake.com/"))]) (import-popwin . [(20140414 141) ((popwin (0 6)) (cl-lib (0 5))) "popwin buffer near by import statements with popwin" single ((:url . "https://github.com/syohex/emacs-import-popwin"))]) (impatient-mode . [(20140908 2300) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar ((:url . "https://github.com/netguy204/imp.el"))]) (immutant-server . [(20140311 1808) nil "Run your Immutant server in Emacs" single ((:url . "http://www.github.com/leathekd/immutant-server.el"))]) (imenu-anywhere . [(20140817 1315) ((cl-lib (0 5))) "ido/helm imenu tag selection across all buffers with the same mode" single ((:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags"))]) (imenu+ . [(20140621 2127) nil "Extensions to `imenu.el'." single ((:url . "http://www.emacswiki.org/imenu+.el") (:keywords "tools" "menus"))]) (image-dired+ . [(20130811 2041) nil "Image-dired extensions" single ((:url . "https://github.com/mhayashi1120/Emacs-image-diredx/raw/master/image-dired+.el") (:keywords "extensions" "multimedia"))]) (image+ . [(20130221 1120) nil "Image manupulation extensions for Emacs" single ((:url . "http://github.com/mhayashi1120/Emacs-imagex/raw/master/image+.el") (:keywords "multimedia" "extensions"))]) (igrep . [(20130824 1207) nil "An improved interface to `grep` and `find`" single ((:keywords "tools" "processes" "search"))]) (ignoramus . [(20140512 958) nil "Ignore backups, build files, et al." single ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools"))]) (iflipb . [(20130331 1408) nil "interactively flip between recently visited buffers" single ((:url . "http://hg.rosdahl.net/iflipb"))]) (iedit . [(20131021 416) nil "Edit multiple regions in the same way simultaneously." tar ((:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring"))]) (ids-edit . [(20140925 1159) ((emacs (24 3))) "IDS (Ideographic Description Sequence) editing tool" tar ((:url . "http://github.com/kawabata/ids-edit") (:keywords "text"))]) (idris-mode . [(20141019 737) ((emacs (24))) "Major mode for editing Idris code" tar ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages"))]) (idomenu . [(20111122 1048) nil "imenu tag selection a la ido" single nil]) (ido-vertical-mode . [(20140516 2220) nil "Makes ido-mode display vertically." single ((:url . "https://github.com/gempesaw/ido-vertical-mode.el") (:keywords "convenience"))]) (ido-ubiquitous . [(20140904 1847) ((emacs (24 1))) "Use ido (nearly) everywhere." single ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido"))]) (ido-sort-mtime . [(20131117 830) nil "Sort Ido's file list by modification time" single ((:keywords "convenience" "files"))]) (ido-select-window . [(20131220 1547) ((emacs (24 1))) "Select a window using ido and buffer names" single ((:url . "https://github.com/pjones/ido-select-window"))]) (ido-load-library . [(20140611 1200) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion"))]) (ido-hacks . [(20130411 2159) nil "Put more IDO in your IDO" single ((:keywords "convenience"))]) (ido-gnus . [(20140216 1146) ((gnus (5 13))) "Access gnus groups or servers using ido" single ((:url . "https://github.com/vapniks/ido-gnus") (:keywords "comm"))]) (ido-complete-space-or-hyphen . [(20130228 508) nil "Complete SPACE or HYPHEN when type SPACE in ido" single ((:url . "https://github.com/doitian/ido-complete-space-or-hyphen") (:keywords "ido" "completion"))]) (ido-at-point . [(20140416 956) ((emacs (24))) "ido-style completion-at-point" single ((:url . "https://github.com/katspaugh/ido-at-point") (:keywords "convenience" "abbrev"))]) (idle-require . [(20090715 1803) nil "load elisp libraries while Emacs is idle" single ((:url . "http://nschum.de/src/emacs/idle-require/") (:keywords "internal"))]) (idle-highlight-mode . [(20120920 1248) nil "highlight the word the point is on" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience"))]) (identica-mode . [(20130204 1753) nil "Major mode API client for status.net open microblogging" tar ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web"))]) (icomplete+ . [(20140415 1655) nil "Extensions to `icomplete.el'." single ((:url . "http://www.emacswiki.org/icomplete+.el") (:keywords "help" "abbrev" "internal" "extensions" "local" "completion" "matching"))]) (icicles . [(20141019 1815) nil "Minibuffer input completion and cycling." tar ((:url . "http://www.emacswiki.org/icicles.el") (:keywords "extensions" "help" "abbrev" "local" "minibuffer" "keys" "apropos" "completion" "matching" "regexp" "command"))]) (ibuffer-vc . [(20141013 1042) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes"))]) (ibuffer-tramp . [(20140301 1306) nil "Group ibuffer's list by TRAMP connection" single ((:url . "http://github.com/svend/ibuffer-tramp") (:keywords "themes"))]) (ibuffer-git . [(20110508 331) nil "show git status in ibuffer column" single ((:keywords "convenience"))]) (iasm-mode . [(20131004 1944) nil "interactive assembly major mode." tar ((:url . "https://github.com/RAttab/iasm-mode") (:keywords ":" "tools"))]) (i2b2-mode . [(20140709 2104) nil "Highlights corresponding PHI data in the text portion of an i2b2 XML Document." single ((:keywords "xml" "phi" "i2b2" "deidi2b2"))]) (hyde . [(20140131 756) nil "Major mode to help create and manage Jekyll blogs" tar nil]) (hy-mode . [(20140201 2355) nil "Major mode for Hy code" single ((:url . "http://github.com/hylang/hy-mode") (:keywords "languages" "lisp"))]) (hungry-delete . [(20140805 2027) nil "hungry delete minor mode" single ((:url . "http://github.com/nflath/hungry-delete"))]) (httprepl . [(20140928 1544) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single ((:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl"))]) (httpcode . [(20121001 2345) nil "explains the meaning of an HTTP status code" single ((:url . "http://github.com/rspivak/httpcode.el"))]) (http-twiddle . [(20121117 1112) nil "send & twiddle & resend HTTP requests" single ((:url . "https://github.com/hassy/http-twiddle/blob/master/http-twiddle.el") (:keywords "http" "rest" "soap"))]) (http-post-simple . [(20131011 358) nil "HTTP POST requests using the url library" single ((:keywords "comm" "data" "processes" "hypermedia"))]) (htmlize . [(20130207 1502) nil "Convert buffer text and decorations to HTML." single ((:keywords "hypermedia" "extensions"))]) (html-to-markdown . [(20131212 1741) nil "HTML to Markdown converter written in Emacs-lisp." single ((:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages"))]) (html-script-src . [(20120403 1415) nil "Insert <script src=\"..\"> for popular JavaScript libraries" single ((:url . "http://github.com/rejeep/html-script-src") (:keywords "tools" "convenience"))]) (ht . [(20140122 1855) nil "The missing hash table library for Emacs" single ((:keywords "hash table" "hash map" "hash"))]) (howdoi . [(20140309 1914) nil "Instant coding answers via Emacs." tar nil]) (how-many-lines-in-project . [(20140807 42) nil "Calculate how many lines are there in your project." single ((:keywords "project" "convenience"))]) (hookify . [(20140914 747) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience"))]) (hlinum . [(20140107 520) ((cl-lib (0 2))) "Extension for linum.el to highlight current line number" single ((:url . "http://code.google.com/p/hlinum-mode/") (:keywords "convenience" "extensions"))]) (hl-todo . [(20140309 2059) nil "highlight TODO keywords" single ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience"))]) (hl-spotlight . [(20131226 1913) nil "Extension of hl-line.el to spotlight current few lines." single ((:url . "http://www.emacswiki.org/hl-spotlight.el") (:keywords "highlight" "cursor" "accessibility"))]) (hl-sexp . [(20101130 743) nil "highlight the current sexp" single ((:keywords "faces" "frames" "emulation"))]) (hl-sentence . [(20140802 1220) nil "highlight a sentence based on customizable face" single ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting"))]) (hl-line+ . [(20140617 1425) nil "Extensions to hl-line.el." single ((:url . "http://www.emacswiki.org/hl-line+.el") (:keywords "highlight" "cursor" "accessibility"))]) (hl-defined . [(20131226 1912) nil "Highlight defined or undefined symbols in Emacs-Lisp." single ((:url . "http://www.emacswiki.org/hl-defined.el") (:keywords "highlight" "lisp" "functions"))]) (hiwin . [(20140522 34) nil "Visible active window mode." single ((:keywords "faces" "editing" "emulating"))]) (hive . [(20131217 1012) ((sql (3 0))) "Hive SQL mode extension" single ((:keywords "sql" "hive"))]) (historyf . [(20131203 322) nil "file history library like browser" single ((:url . "https://github.com/k1LoW/emacs-historyf"))]) (hippie-namespace . [(20140508 1641) nil "Special treatment for namespace prefixes in hippie-expand" single ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion"))]) (hippie-expand-slime . [(20130907 432) nil "Hook slime's completion into hippie-expand" single ((:url . "https://github.com/purcell/hippie-expand-slime"))]) (hippie-exp-ext . [(20130824 1207) nil "Extension of hippie-expand" single ((:url . "http://www.emacswiki.org/emacs/download/hippie-exp-ext.el") (:keywords "abbrev" "convenience" "completions" "hippie-expand"))]) (highlight-unique-symbol . [(20130612 142) ((deferred (0 3 2))) "highlight symbols which not appear in the repository" single ((:url . "https://github.com/hitode909/emacs-highlight-unique-symbol"))]) (highlight-tail . [(20140416 141) nil "draw a colourful \"tail\" while you write" single ((:keywords "highlight" "tail" "eye-candy" "visual-effect" "light" "color" "burn" "web" "page:" "http://nic-nac-project.net/~necui/ht.html"))]) (highlight-symbol . [(20140923 1029) nil "automatic and manual symbol highlighting" single ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching"))]) (highlight-stages . [(20140929 1303) nil "highlight staged (quasi-quoted) expressions" single ((:url . "http://hins11.yu-yake.com/"))]) (highlight-quoted . [(20140916 1422) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single ((:url . "https://github.com/Fanael/highlight-quoted"))]) (highlight-parentheses . [(20140620 1558) nil "highlight surrounding parentheses" single ((:url . "http://nschum.de/src/emacs/highlight-parentheses/") (:keywords "faces" "matching"))]) (highlight-numbers . [(20140916 1421) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single ((:url . "https://github.com/Fanael/highlight-numbers"))]) (highlight-indentation . [(20131207 1135) nil "Minor modes for highlighting indentation" single ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs"))]) (highlight-escape-sequences . [(20130531 1812) nil "Highlight escape sequences" single ((:url . "https://github.com/dgutov/highlight-escape-sequences") (:keywords "convenience"))]) (highlight-defined . [(20140916 1419) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single ((:url . "https://github.com/Fanael/highlight-defined"))]) (highlight-current-line . [(20051013 1756) nil "highlight line where the cursor is." single ((:keywords "faces"))]) (highlight-cl . [(20091012 1730) nil "Highlighting `cl' functions." single ((:url . "http://www.emacswiki.org/emacs/highlight-cl.el") (:keywords "faces"))]) (highlight-chars . [(20140513 444) nil "Highlight specified sets of characters, including whitespace." single ((:url . "http://www.emacswiki.org/highlight-chars.el") (:keywords "highlight" "whitespace" "characters" "unicode"))]) (highlight-blocks . [(20141020 1803) ((emacs (24))) "Highlight the blocks point is in" single ((:url . "https://github.com/Fanael/highlight-blocks"))]) (highlight . [(20140922 1850) nil "Highlighting commands." single ((:url . "http://www.emacswiki.org/highlight.el") (:keywords "faces" "help" "local"))]) (hideshow-org . [(20120223 1750) nil "Provides org-mode like hide and show for hideshow.el" single ((:keywords "c" "c++" "java" "lisp" "tools" "editing" "comments" "blocks" "hiding" "outlines" "org-mode" "this" "file" "is" "not" "part" "of" "gnu" "emacs."))]) (hide-region . [(20140201 1114) nil "hide regions of text using overlays" single ((:url . "http://mathias.dahl.net/pgm/emacs/elisp/hide-region.el") (:keywords "hide" "region"))]) (hide-lines . [(20130824 1207) nil "Commands for hiding lines based on a regexp" single ((:url . "https://github.com/vapniks/hide-lines") (:keywords "convenience"))]) (hide-comnt . [(20140206 1830) nil "Hide/show comments in code." single ((:url . "http://www.emacswiki.org/hide-comnt.el") (:keywords "comment" "hide" "show"))]) (hi2 . [(20141005 1531) nil "indentation module for Haskell Mode" single ((:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell"))]) (hexrgb . [(20140817 2014) nil "Functions to manipulate colors, including RGB hex strings." single ((:url . "http://www.emacswiki.org/hexrgb.el") (:keywords "number" "hex" "rgb" "color" "background" "frames" "display"))]) (heroku-theme . [(20130810 43) nil "Heroku color theme" single ((:url . "https://github.com/jonathanchu/heroku-theme"))]) (heroku . [(20120629 1413) nil "Interface to Heroku apps." single ((:url . "https://github.com/technomancy/heroku.el") (:keywords "convenience" "api" "database"))]) (hemisu-theme . [(20130508 1444) nil "Hemisu for Emacs." tar ((:url . "http://github/anrzejsliwa/django-theme"))]) (help-mode+ . [(20140117 2115) nil "Extensions to `help-mode.el'" single ((:url . "http://www.emacswiki.org/help-mode+.el") (:keywords "help"))]) (help-fns+ . [(20140810 2204) nil "Extensions to `help-fns.el'." single ((:url . "http://www.emacswiki.org/help-fns+.el") (:keywords "help" "faces" "characters" "packages" "description"))]) (help+ . [(20140504 2037) nil "Extensions to `help.el'." single ((:url . "http://www.emacswiki.org/help+.el") (:keywords "help"))]) (helm-themes . [(20140909 957) ((helm (1 0))) "Color theme selection with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-themes"))]) (helm-swoop . [(20141020 230) ((helm (1 0)) (emacs (24))) "Efficiently hopping squeezed lines powered by helm interface" single ((:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search"))]) (helm-spotify . [(20131014 1721) ((helm (0 0 0)) (multi (2 0 0))) "Control Spotify with Helm." single ((:url . "https://github.com/krisajenkins/helm-spotify") (:keywords "helm" "spotify"))]) (helm-spaces . [(20130605 1200) ((helm (1 0)) (spaces (0 1 0))) "helm sources for spaces" single ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience"))]) (helm-sheet . [(20130630 839) ((helm (1 0))) "helm sources for sheet" single ((:url . "https://github.com/yasuyk/helm-sheet") (:keywords "helm" "sheet"))]) (helm-sage . [(20141005 713) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 1))) "A helm extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm"))]) (helm-rubygems-org . [(20140826 756) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single ((:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm"))]) (helm-rubygems-local . [(20130711 2111) ((helm (1 5 3))) "Installed local rubygems find-file for helm" single ((:url . "https://github.com/f-kubotar/helm-rubygems-local"))]) (helm-robe . [(20140805 959) ((helm (1 0))) "completing read function for robe" single ((:url . "https://github.com/syohex/emacs-helm-robe"))]) (helm-recoll . [(20130905 2122) ((helm (1 5 4))) "helm interface for the recoll desktop search tool." single ((:url . "https://github.com/emacs-helm/helm-recoll") (:keywords "convenience"))]) (helm-rb . [(20131123 1139) ((helm (1 0)) (helm-ag-r (20131123))) "Search Ruby's method by ag and display helm" tar ((:url . "https://github.com/yuutayamada/helm-rb") (:keywords "searching" "ruby"))]) (helm-rails . [(20130424 1119) ((helm (1 5 1)) (inflections (1 1))) "Helm extension for Rails projects." single ((:url . "https://github.com/asok/helm-rails") (:keywords "helm" "rails" "git"))]) (helm-pydoc . [(20140701 2214) ((helm (1 0)) (cl-lib (0 5))) "pydoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-pydoc"))]) (helm-prosjekt . [(20140129 217) ((prosjekt (0 3)) (helm (1 5 9))) "Helm integration for prosjekt." single ((:url . "https://github.com/abingham/prosjekt"))]) (helm-projectile-all . [(20140429 1252) ((helm (1 6 0)) (projectile (0 10 0)) (dash (1 5 0)) (s (1 9 0))) "Find files in all projectile projects using helm" single nil]) (helm-projectile . [(20141023 347) ((helm (1 4 0)) (projectile (0 11 0)) (cl-lib (0 3))) "Helm integration for Projectile" single ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience"))]) (helm-project-persist . [(20130601 1628) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single ((:keywords "project-persist" "project" "helm"))]) (helm-proc . [(20140504 457) ((helm (1 6 0))) "Helm interface for managing system processes" tar nil]) (helm-perldoc . [(20140701 2133) ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) "perldoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-perldoc"))]) (helm-package . [(20140109 123) ((helm (1 0)) (cl-lib (0 3))) "Listing ELPA packages with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-package"))]) (helm-orgcard . [(20130608 730) ((helm (1 5 2))) "browse the orgcard by helm" single ((:url . "https://github.com/emacs-helm/helm-orgcard") (:keywords "convenience" "helm" "org"))]) (helm-open-github . [(20140701 1839) ((helm (1 0)) (gh (1 0)) (cl-lib (0 5))) "Utilities of Opening Github Page" single ((:url . "https://github.com/syohex/emacs-helm-open-github"))]) (helm-mode-manager . [(20140224 1804) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single ((:url . "https://github.com/istib/helm-mode-manager"))]) (helm-migemo . [(20130820 740) ((helm (1 5 3)) (migemo (1 9))) "Migemo plug-in for helm" single ((:url . "https://github.com/emacs-helm/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n"))]) (helm-make . [(20140625 1228) ((helm (1 5 3))) "Select makefile target with helm" single ((:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile"))]) (helm-ls-hg . [(20140930 224) ((helm (1 5))) "List hg files in hg project." single nil]) (helm-ls-git . [(20141014 257) ((helm (1 5))) "list git files." single nil]) (helm-j-cheatsheet . [(20131228 741) ((helm (1 5 3))) "Quick J reference for Emacs" single ((:url . "https://github.com/abo-abo/helm-j-cheatsheet"))]) (helm-itunes . [(20140606 37) ((helm (1 6 1))) "Play local iTunes and Spotify tracks" single ((:url . "https://github.com/daschwa/helm-itunes"))]) (helm-idris . [(20140718 1729) ((helm (0 0 0)) (idris-mode (0 9 14))) "A Helm datasource for Idris documentation, queried from the compiler" single ((:keywords "languages" "helm"))]) (helm-hoogle . [(20140919 803) ((helm (1 6 2))) "Use helm to navigate query results from Hoogle" single ((:url . "https://github.com/jwiegley/haskell-config") (:keywords "haskell" "programming" "hoogle"))]) (helm-helm-commands . [(20130902 1348) ((helm (1 5 4))) "List all helm commands with helm" single ((:url . "https://github.com/vapniks/helm-helm-commands") (:keywords "convenience"))]) (helm-hayoo . [(20140730 1725) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single ((:keywords "helm"))]) (helm-hatena-bookmark . [(20131128 857) ((helm (1 5 6))) "Hatena::Bookmark helm.el interface" single ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark"))]) (helm-gtags . [(20141022 133) ((helm (1 5 6)) (cl-lib (0 5))) "GNU GLOBAL helm interface" single ((:url . "https://github.com/syohex/emacs-helm-gtags"))]) (helm-growthforecast . [(20140119 2244) ((helm (1 5 9))) "helm extensions for growthforecast." single ((:url . "https://github.com/daic-h/helm-growthforecast"))]) (helm-google . [(20140405 2023) ((helm (0)) (google (0))) "Emacs Helm Interface for quick Google searches" single ((:url . "https://github.com/steckerhalter/helm-google") (:keywords "helm" "google" "search" "browse"))]) (helm-go-package . [(20140211 1757) ((helm (1 0)) (go-mode (9)) (deferred (0 3 2))) "helm sources for Go programming language's package" single ((:url . "https://github.com/yasuyk/helm-go-package") (:keywords "helm" "go"))]) (helm-github-stars . [(20131123 1117) ((helm (1 5 5))) "Helm integration for your starred repositories on github" single ((:keywords "helm" "github" "stars"))]) (helm-git-grep . [(20140222 2122) ((helm (1 5 9))) "helm for git grep, an incremental git-grep(1)" single ((:url . "https://github.com/yasuyk/helm-git-grep") (:keywords "helm" "git"))]) (helm-git-files . [(20140214 1359) ((helm (1 5 9))) "helm for git files" single ((:keywords "helm" "git"))]) (helm-git . [(20120630 1703) nil "Helm extension for Git." single ((:url . "https://github.com/maio/helm-git") (:keywords "helm" "git"))]) (helm-gist . [(20120819 2035) ((helm (20120811)) (gist (1 0 1))) "helm-sources and some utilities for gist." single ((:keywords "convenience" "emulation"))]) (helm-ghq . [(20141008 834) ((helm (1 6 2))) "ghq with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-ghq"))]) (helm-flymake . [(20130717 144) ((helm (1 0))) "helm interface for flymake" single ((:url . "https://github.com/tam17aki"))]) (helm-flycheck . [(20140915 1052) ((dash (2 4 0)) (flycheck (0 20 -3)) (helm (1 5 7))) "Show flycheck errors with helm" single ((:url . "https://github.com/yasuyk/helm-flycheck") (:keywords "helm" "flycheck"))]) (helm-filesets . [(20140929 1435) ((helm (1 6 3)) (filesets+ (0))) "A helm source for emacs filesets" single ((:url . "https://github.com/gcla/helm-filesets") (:keywords "filesets"))]) (helm-emmet . [(20131014 229) ((helm (1 0)) (emmet-mode (1 0 2))) "helm sources for emmet-mode's snippets" single ((:url . "https://github.com/yasuyk/helm-emmet") (:keywords "convenience" "helm" "emmet"))]) (helm-dired-recent-dirs . [(20131228 914) ((helm (1 0))) "Show recent dirs with helm.el support." single ((:keywords "helm" "dired" "zsh"))]) (helm-dictionary . [(20140506 926) ((helm (1 5 5))) "Helm source for looking up dictionaries" single ((:url . "https://github.com/emacs-helm/helm-dictionary"))]) (helm-descbinds . [(20140123 58) ((helm (1 5))) "Yet Another `describe-bindings' with `helm'." single ((:keywords "helm" "help"))]) (helm-dash . [(20141020 1026) ((helm (0 0 0))) "Helm extension to search dash docsets" single ((:url . "http://github.com/areina/helm-dash") (:keywords "docs"))]) (helm-css-scss . [(20140626 2025) ((helm (1 0)) (emacs (24))) "CSS/SCSS/LESS Selectors with helm interface" single ((:url . "https://github.com/ShingoFukuyama/helm-css-scss") (:keywords "scss" "css" "less" "selector" "helm"))]) (helm-company . [(20140920 408) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single ((:url . "https://github.com/yasuyk/helm-company"))]) (helm-cmd-t . [(20140828 712) nil "cmd-t style completion" tar ((:url . "https://github.com/lewang/helm-cmd-t") (:keywords "helm" "project-management" "completion" "convenience" "cmd-t" "textmate"))]) (helm-chrome . [(20140116 552) ((helm (1 0)) (cl-lib (0 3)) (emacs (24))) "Helm interface for Chrome bookmarks" single ((:url . "https://github.com/kawabata/helm-chrome") (:keywords "tools"))]) (helm-c-yasnippet . [(20140131 526) ((helm (1 5 8)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single ((:keywords "convenience" "emulation"))]) (helm-c-moccur . [(20140115 2243) ((helm (20120811)) (color-moccur (2 71))) "helm source for color-moccur.el" single ((:keywords "convenience" "emulation"))]) (helm-bm . [(20131224 1005) ((bm (1 0)) (cl-lib (0 3)) (helm (1 5 7)) (s (1 8 0))) "helm sources for bm.el" single ((:url . "https://github.com/yasuyk/helm-bm") (:keywords "helm" "bookmark"))]) (helm-bind-key . [(20141007 2341) ((bind-key (1 0)) (helm (1 6 4))) "helm-source for for bind-key." single ((:keywords "convenience" "emulation"))]) (helm-bibtexkey . [(20140214 1004) ((helm (1 5 8))) "Bibtexkey source for helm" tar ((:url . "https://github.com/kenbeese/helm-bibtexkey") (:keywords "bib" "tex"))]) (helm-bibtex . [(20140813 1345) ((helm (1 5 5)) (ebib (1 15)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5))) "Helm source for managing BibTeX bibliographies" single nil]) (helm-backup . [(20140124 1704) ((helm (1 5 5)) (s (1 8 0))) "Backup each file change using git" single ((:url . "http://github.com/antham/helm-backup") (:keywords "backup"))]) (helm-aws . [(20140928 522) nil "No description available." single nil]) (helm-anything . [(20131217 2132) ((helm (20130406)) (anything (20120101))) "Bridge between anything and helm" single ((:url . "http://www.emacswiki.org/emacs/download/helm-anything.el") (:keywords "helm" "anything" "convenience" "search" "tools"))]) (helm-ag-r . [(20131123 1031) ((helm (1 0))) "Search something by ag and display by helm" single ((:url . "https://github.com/yuutayamada/helm-ag-r") (:keywords "searching"))]) (helm-ag . [(20141021 2349) ((helm (1 5 6)) (cl-lib (0 5))) "the silver searcher with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ag"))]) (helm-ad . [(20140807 530) ((dash (2 8 0)) (helm (1 6 2))) "helm source for Active Directory" single ((:keywords "comm"))]) (helm-ack . [(20140508 27) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ack"))]) (helm-R . [(20120819 2014) ((helm (20120517)) (ess (20120509))) "helm-sources and some utilities for GNU R." single ((:url . "https://github.com/myuhe/helm-R.el") (:keywords "convenience"))]) (helm . [(20141022 1216) ((emacs (24)) (cl-lib (0 5)) (async (1 2))) "Helm is an Emacs incremental and narrowing framework" tar nil]) (header2 . [(20140723 1525) nil "Support for creation and update of file headers." single ((:url . "http://www.emacswiki.org/header2.el") (:keywords "tools" "docs" "maint" "abbrev" "local"))]) (header-button . [(20130110 1151) nil "clickable buttons in header lines" single ((:url . "https://github.com/emacsattic/header-button") (:keywords "extensions"))]) (hc-zenburn-theme . [(20140811 1131) nil "An higher contrast version of the Zenburn theme." single ((:url . "https:github.com/edran/hc-zenburn-emacs"))]) (hayoo . [(20140831 821) ((emacs (24)) (json (1 3))) "Query hayoo and show results in a tabulated buffer." single ((:url . "https://github.com/benma/hayoo.el/") (:keywords "hayoo" "haskell"))]) (haxe-mode . [(20131004 442) nil "An Emacs major mode for Haxe" single ((:url . "http://people.debian.org/~jps/misc/haxe-mode.el"))]) (haste . [(20131203 1640) ((json (1 2))) "Emacs client for hastebin (http://hastebin.com/about.md)" single ((:url . "http://github.com/rlister/emacs-haste-client"))]) (haskell-mode . [(20141023 422) ((cl-lib (0 5))) "A Haskell editing mode" tar nil]) (hardhat . [(20140827 2156) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience"))]) (hardcore-mode . [(20111205 116) nil "Disable arrow keys + optionally backspace and return" single ((:keywords "marking" "region"))]) (handlebars-sgml-mode . [(20130623 1933) nil "Add Handlebars contextual indenting support to sgml-mode" single ((:url . "http://github.com/jacott/handlebars-sgml-mode"))]) (handlebars-mode . [(20140703 232) nil "A major mode for editing Handlebars files." single nil]) (hamlet-mode . [(20131208 224) ((cl-lib (0 3)) (dash (2 3 0)) (s (1 7 0))) "Hamlet editing mode" single ((:url . "https://github.com/lightquake/hamlet-mode") (:keywords "wp" "languages" "comm"))]) (haml-mode . [(20140807 522) ((ruby-mode (1 0))) "Major mode for editing Haml files" single ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html"))]) (ham-mode . [(20140815 1635) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown." single ((:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp"))]) (hackernews . [(20140328 1105) ((json (1 2))) "Access the hackernews aggregator from Emacs" tar nil]) (gvpr-mode . [(20131208 1218) nil "A major mode offering basic syntax coloring for gvpr scripts." single ((:url . "https://raw.github.com/rodw/gvpr-lib/master/extra/gvpr-mode.el") (:keywords "graphviz" "gv" "dot" "gvpr" "graph"))]) (guru-mode . [(20140905 1002) nil "Become an Emacs guru" single ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience"))]) (guide-key-tip . [(20140406 2120) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single ((:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip"))]) (guide-key . [(20140828 1107) ((popwin (0 3 0))) "Guide the following key bindings automatically and dynamically" single ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience"))]) (gs-mode . [(20131230 216) nil "Major mode for editing GrADS script files" single ((:keywords "grads" "script" "major-mode"))]) (gruvbox-theme . [(20140618 1134) nil "A retro-groove colour theme for Emacs" single ((:url . "http://github.com/Greduan/emacs-theme-gruvbox"))]) (grunt . [(20140808 15) ((dash (2 6 0))) "Some glue to stick Emacs and Gruntfiles together" single ((:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt"))]) (gruber-darker-theme . [(20141010 405) nil "Gruber Darker color theme for Emacs 24." single ((:url . "http://github.com/rexim/gruber-darker-theme"))]) (groovy-mode . [(20141018 141) nil "Major mode for Groovy source files" tar ((:keywords "languages"))]) (grizzl . [(20130810 502) ((cl-lib (0 1))) "Fuzzy Search Library & Completing Read" tar nil]) (grin . [(20110806 258) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find"))]) (grep-a-lot . [(20131006 947) nil "manages multiple search results buffers for grep.el" single ((:url . "https://github.com/ZungBang/emacs-grep-a-lot") (:keywords "tools" "convenience" "search"))]) (grep+ . [(20131226 1851) nil "Extensions to standard library `grep.el'." single ((:url . "http://www.emacswiki.org/grep+.el") (:keywords "tools" "processes" "compile"))]) (grass-mode . [(20140812 1725) ((cl-lib (0 2)) (dash (2 8 0))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(20131001 1134) nil "HTTP request lib with flexible callback dispatch" single ((:url . "http://www.github.com/leathekd/grapnel"))]) (graphviz-dot-mode . [(20140303 1601) nil "Mode for the dot-language used by graphviz (att)." single ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att"))]) (graphene . [(20141012 1417) ((exec-path-from-shell (20140219)) (project-persist (20131030)) (sr-speedbar (20140505)) (smex (20140425)) (web-mode (20140505)) (smartparens (20140427)) (flycheck (20140422)) (company (20140517))) "Friendly Emacs defaults" tar nil]) (grandshell-theme . [(20140416 125) nil "Dark color theme for Emacs > 24 with intensive colors." tar nil]) (grails-projectile-mode . [(20141020 519) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." single ((:keywords "grails" "projectile"))]) (grails-mode . [(20120510 1855) nil "minor-mode that adds some Grails project management to a grails project" single ((:url . "http://blog.wolfman.com"))]) (gradle-mode . [(20140603 1417) ((s (1 8 0))) "Gradle integration with Emacs' compile" single ((:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle"))]) (gplusify . [(20121211 822) nil "Add Google Plus markup to a piece of code" single ((:url . "https://github.com/jorgenschaefer/gplusify"))]) (goto-last-change . [(20121115 1014) nil "Move point through buffer-undo-list positions" single ((:keywords "convenience"))]) (goto-gem . [(20140729 1445) ((s (1 9 0))) "Open dired in gem directory" single ((:keywords "gemfile" "convenience"))]) (goto-chg . [(20131228 1459) nil "goto last change" single ((:keywords "convenience" "matching"))]) (gotest . [(20140521 346) ((s (1 9 0)) (f (0 11 0)) (go-mode (20131222))) "Launch GO unit tests" single ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "go" "tests"))]) (gore-mode . [(20131028 127) nil "Simple mode for gore, a command-line evaluator for golang." single ((:keywords "go" "repl"))]) (google-translate . [(20141006 1805) nil "Emacs interface to Google Translate." tar nil]) (google-this . [(20140925 442) ((emacs (24 1))) "A set of functions and bindings to google under point." single ((:url . "http://github.com/Bruce-Connor/emacs-google-this") (:keywords "convenience" "hypermedia"))]) (google-maps . [(20130412 530) nil "Access Google Maps from Emacs" tar ((:keywords "comm"))]) (google-contacts . [(20140530 533) ((oauth2 (0 10))) "Support for Google Contacts in Emacs" tar ((:url . "http://julien.danjou.info/projects/emacs-packages#google-contacts") (:keywords "comm"))]) (google-c-style . [(20140929 1418) nil "Google's C/C++ style for c-mode" single ((:keywords "c" "tools"))]) (google . [(20140330 1156) nil "Emacs interface to the Google API" single ((:keywords "comm" "processes" "tools"))]) (gom-mode . [(20131007 2253) nil "Major mode for Gomfile" single ((:url . "https://github.com/syohex/emacs-gom-mode"))]) (golint . [(20140122 1422) nil "lint for the Go source code" single ((:url . "https://github.com/golang/lint"))]) (golden-ratio . [(20130921 444) nil "Automatic resizing of Emacs windows to the golden ratio" single ((:keywords "window" "resizing"))]) (gold-mode . [(20140606 2206) ((sws-mode (0))) "Major mode for editing .gold files" single ((:url . "https://github.com/yuutayamada/gold-mode-el") (:keywords "golang" "template" "gold"))]) (god-mode . [(20140811 1425) nil "God-like command entering minor mode" single ((:url . "https://github.com/chrisdone/god-mode"))]) (go-snippets . [(20130821 1144) ((yasnippet (0 8 0))) "Yasnippets for go" tar nil]) (go-projectile . [(20140826 1248) ((projectile (0 10 0)) (go-mode (0)) (go-eldoc (0 16))) "Go add-ons for Projectile" single ((:url . "https://github.com/dougm/go-projectile") (:keywords "project" "convenience"))]) (go-play . [(20120914 1548) nil "Paste to play.golang.org" single nil]) (go-mode . [(20140906 110) nil "Major mode for the Go programming language" single ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go"))]) (go-errcheck . [(20140107 1346) nil "errcheck integration for go-mode" single nil]) (go-eldoc . [(20140921 2125) ((go-mode (0)) (cl-lib (0 5))) "eldoc for go-mode" single ((:url . "https://github.com/syohex/emacs-go-eldoc"))]) (go-direx . [(20140701 1126) ((direx (0 1 -3)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single ((:url . "https://github.com/syohex/emacs-go-direx"))]) (go-autocomplete . [(20140528 4) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single ((:keywords "languages"))]) (gnus-x-gm-raw . [(20140610 331) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single ((:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus"))]) (gnus-summary-ext . [(20131222 2321) ((macro-utils (1 0))) "Extra limit and process mark commands for the gnus summary buffer" single ((:url . "https://github.com/vapniks/gnus-summary-ext") (:keywords "comm"))]) (gnus-spotlight . [(20130901 1435) nil "Search mail with Spotlight" single ((:keywords "mail" "searching" "spotlight"))]) (gnus-desktop-notify . [(20140918 1147) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single ((:url . "http://www.thregr.org/~wavexx/software/gnus-desktop-notify/"))]) (gnus-alias . [(20130824 1206) nil "an alternative to gnus-posting-styles" single ((:keywords "personality" "identity" "news" "mail" "gnus"))]) (gnuplot-mode . [(20131204 59) nil "Major mode for editing gnuplot scripts" single ((:url . "https://github.com/mkmcc/gnuplot") (:keywords "gnuplot" "plotting"))]) (gnuplot . [(20130206 2001) nil "drive gnuplot from within emacs" tar ((:keywords "gnuplot" "plotting"))]) (gnu-apl-mode . [(20140910 1031) ((emacs (24))) "Integrate GNU APL with Emacs" tar nil]) (gntp . [(20140330 431) nil "Growl Notification Protocol for Emacs" single nil]) (gnomenm . [(20140308 1238) ((s (1 9 0)) (dash (2 3 0)) (kv (0 0 19))) "Emacs interface to Gnome nmcli command" single ((:url . "http://github.com/nicferrier/emacs-nm") (:keywords "processes" "hardware"))]) (gnome-calendar . [(20140112 659) nil "Integration with the GNOME Shell calendar" single ((:keywords "gnome" "calendar"))]) (gmail-message-mode . [(20140815 1116) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ((:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation"))]) (glsl-mode . [(20140930 1448) nil "major mode for Open GLSL shader files" single ((:url . "http://artis.inrialpes.fr/~Xavier.Decoret/resources/glsl-mode/") (:keywords "languages"))]) (gitty . [(20121014 1042) nil "vc-mode extension for fast git interaction" single ((:url . "https://github.com/jorgenschaefer/gitty") (:keywords "vc"))]) (gitignore-mode . [(20140605 820) nil "Major mode for editing .gitignore files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (github-clone . [(20141006 510) ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) "Fork and clone github repos" single ((:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools"))]) (github-browse-file . [(20140609 1450) nil "View the file you're editing on GitHub" single ((:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github"))]) (gitconfig-mode . [(20140605 820) nil "Major mode for editing .gitconfig files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (gitconfig . [(20130718 535) nil "Emacs lisp interface to work with git-config variables" single ((:keywords "git" "gitconfig" "git-config"))]) (gitattributes-mode . [(20140605 820) nil "Major mode for editing .gitattributes files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (git-timemachine . [(20140825 1251) ((cl-lib (0 5))) "Walk through git revisions of a file" single ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git"))]) (git-rebase-mode . [(20140928 1847) nil "Major mode for editing git rebase files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (git-messenger . [(20140923 1038) ((popup (0 5 0))) "Pop up last commit information of current line" single ((:url . "https://github.com/syohex/emacs-git-messenger"))]) (git-link . [(20140919 2221) nil "Get the GitHub/Bitbucket/Gitorious URL for a buffer location" single ((:url . "http://github.com/sshaw/git-link") (:keywords "git"))]) (git-gutter-fringe . [(20140827 221) ((git-gutter (0 73)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single ((:url . "https://github.com/syohex/emacs-git-gutter-fringe"))]) (git-gutter-fringe+ . [(20140729 703) ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) "Fringe version of git-gutter+.el" single ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus"))]) (git-gutter . [(20141008 227) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single ((:url . "https://github.com/syohex/emacs-git-gutter"))]) (git-gutter+ . [(20141002 1412) ((git-commit-mode (0 14))) "Manage Git hunks straight from the buffer" single ((:url . "https://github.com/nonsequitur/git-gutter-plus"))]) (git-dwim . [(20130130 2150) nil "Context-aware git commands such as branch handling" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/git-dwim.el") (:keywords "git" "tools" "convenience"))]) (git-commit-training-wheels-mode . [(20131121 844) ((git-commit-mode (0 14 0))) "Helps you craft well formed commit messages with git-commit-mode" single ((:url . "https://github.com/yasuyk/git-commit-training-wheels-mode") (:keywords "convenience" "vc" "git"))]) (git-commit-mode . [(20141014 1934) nil "Major mode for editing git commit messages" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (git-blame . [(20110509 1226) nil "Minor mode for incremental blame for Git" single ((:keywords "git" "version control" "release management"))]) (git-auto-commit-mode . [(20131007 1723) nil "Emacs Minor mode to automatically commit and push" single ((:url . "http://ryuslash.org/projects/git-auto-commit-mode/") (:keywords "vc"))]) (git-annex . [(20131119 1745) nil "Mode for easy editing of git-annex'd files" single ((:url . "https://github.com/jwiegley/git-annex-el") (:keywords "files" "data" "git" "annex"))]) (git . [(20140128 541) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single ((:url . "http://github.com/rejeep/git.el") (:keywords "git"))]) (gist . [(20140706 1803) ((eieio (1 3)) (gh (0 7 2)) (tabulated-list (0))) "Emacs integration for gist.github.com" single ((:keywords "gist" "git" "github" "paste" "pastie" "pastebin"))]) (gherkin-mode . [(20140107 1104) nil "An emacs major mode for editing gherkin files." single ((:keywords "languages"))]) (ghci-completion . [(20140317 231) ((emacs (24 1))) "Completion for GHCi commands in inferior-haskell buffers" single ((:keywords "convenience"))]) (ghc . [(20141003 1539) nil "Sub mode for Haskell mode" tar nil]) (gh . [(20140706 1806) ((eieio (1 3)) (pcache (0 2 4)) (logito (0 1))) "A GitHub library for Emacs" tar nil]) (ggtags . [(20141002 11) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience"))]) (ggo-mode . [(20130524 743) nil "Gengetopt major mode" single ((:keywords "extensions" "convenience" "local"))]) (gerrit-download . [(20140828 910) ((emacs (24 0)) (magit (20130828 1540))) "Show gerrit reviews in a diff buffer." single ((:url . "https://github.com/chmouel/gerrit-download.el") (:keywords "tools" "gerrit" "git"))]) (genrnc . [(20140612 837) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml"))]) (geiser . [(20141006 1447) nil "GNU Emacs and Scheme talk to each other" tar nil]) (gedit-mode . [(20140109 1228) ((tabbar (0)) (shell-pop (0)) (move-text (0)) (whole-line-or-region (0))) "Emulate the look & feel of GEdit in Emacs" single ((:url . "https://github.com/robru/gedit-mode") (:keywords "gedit" "keys" "keybindings" "easy" "cua"))]) (geben . [(20100330 643) nil "DBGp protocol frontend, a script debugger" tar ((:url . "http://code.google.com/p/geben-on-emacs/") (:keywords "dbgp" "debugger" "php" "xdebug" "perl" "python" "ruby" "tcl" "komodo"))]) (gather . [(20140115 852) nil "Gather string in buffer." single ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools"))]) (gap-mode . [(20140913 1558) nil "Major mode for editing files in the GAP programing language." tar ((:url . "https://bitbucket.org/gvol/gap-mode") (:keywords "gap"))]) (gandalf-theme . [(20130809 547) nil "Gandalf color theme" single ((:keywords "color" "theme"))]) (fyure . [(20130216 814) nil "An interface to fix Japanese hyoki-yure" tar ((:keywords "languages"))]) (fwb-cmds . [(20131209 1900) nil "misc frame, window and buffer commands" single ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience"))]) (fvwm-mode . [(20140824 935) nil "major mode for editing Fvwm configuration files" single ((:keywords "files"))]) (fuzzy-match . [(20131226 1850) nil "fuzzy matching" single ((:url . "http://www.emacswiki.org/fuzzy-match.el") (:keywords "matching" "completion" "string"))]) (fuzzy-format . [(20130824 1200) nil "select indent-tabs-mode and format code automatically." single ((:url . "http://code.101000lab.org, http://trac.codecheck.in"))]) (fuzzy . [(20131026 243) nil "Fuzzy Matching" single ((:keywords "convenience"))]) (furl . [(20110112 2007) nil "Friendly URL retrieval" single nil]) (function-args . [(20141016 1050) nil "C++ completion for GNU Emacs" single ((:url . "https://github.com/abo-abo/function-args"))]) (fullscreen-mode . [(20130524 1256) nil "fullscreen window support for Emacs" single ((:url . "https://github.com/ryantm/fullscreen-mode") (:keywords "fullscreen" "fullscreen-mode"))]) (fullframe . [(20140619 605) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single ((:keywords "fullscreen"))]) (full-ack . [(20140223 1232) nil "a front-end for ack" single ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching"))]) (fuel . [(20141021 1720) ((cl-lib (0 2)) (emacs (24 2))) "Major mode for the Factor programming language." tar nil]) (fsharp-mode . [(20140828 1159) ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) "F# mode for Emacs" tar nil]) (fringe-helper . [(20140620 1709) nil "helper functions for fringe bitmaps" single ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp"))]) (fringe-current-line . [(20140110 2311) nil "show current line on the fringe." single ((:url . "http://github.com/kyanagi/fringe-current-line/raw/master/fringe-current-line.el"))]) (free-keys . [(20140309 1351) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single ((:url . "https://github.com/Fuco1/free-keys") (:keywords "convenience"))]) (framesize . [(20131017 1732) ((key-chord (0 5 20080915))) "change the size of frames in Emacs" single ((:url . "http://github.com/nicferrier/emacs-framesize") (:keywords "frames"))]) (framemove . [(20130328 1133) nil "directional frame selection routines" single ((:keywords "frame" "movement" "convenience"))]) (frame-tag . [(20120527 436) nil "Minor mode that assigns a unique number to each frame for easy switching" single ((:url . "http://github.com/liangzan/frame-tag.el") (:keywords "frame" "movement"))]) (frame-restore . [(20140811 1709) ((emacs (24 1))) "Restore Emacs frame" single ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience"))]) (frame-fns . [(20131226 1849) nil "Non-interactive frame and window functions." single ((:url . "http://www.emacswiki.org/frame-fns.el") (:keywords "internal" "extensions" "local" "frames"))]) (frame-cmds . [(20141016 102) ((frame-fns (0))) "Frame and window commands (interactive functions)." single ((:url . "http://www.emacswiki.org/frame-cmds.el") (:keywords "internal" "extensions" "mouse" "frames" "windows" "convenience"))]) (fountain-mode . [(20141013 135) ((s (1 9 0))) "Major mode for screenwriting in Fountain markup" single ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp"))]) (fortpy . [(20140911 1833) ((epc (0 1 0)) (auto-complete (1 4)) (python-environment (0 0 2)) (pos-tip (0 4 5))) "a Fortran auto-completion for Emacs" tar nil]) (foreign-regexp . [(20140823 2042) nil "search and replace by foreign regexp." tar ((:keywords "convenience" "emulations" "matching" "tools" "unix" "wp"))]) (font-utils . [(20140712 1558) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions"))]) (font-lock-studio . [(20141017 1733) ((emacs (24 3))) "interactive debugger for Font Lock keywords." single ((:url . "https://github.com/Lindydancer/font-lock-studio") (:keywords "faces" "tools"))]) (font-lock-menus . [(20131226 1847) nil "Font-lock menus: enhanced `font-menus.el'" single ((:url . "http://www.emacswiki.org/font-lock-menus.el") (:keywords "font" "highlighting" "syntax" "decoration"))]) (font-lock+ . [(20140831 615) nil "Enhancements to standard library `font-lock.el'." single ((:url . "http://www.emacswiki.org/font-lock+.el") (:keywords "languages" "faces" "highlighting"))]) (fold-this . [(20131113 547) nil "Just fold this region please" single ((:keywords "convenience"))]) (fold-dwim-org . [(20131203 851) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode"))]) (fold-dwim . [(20140208 1137) nil "Unified user interface for Emacs folding modes" single ((:url . "http://www.dur.ac.uk/p.j.heslin/Software/Emacs"))]) (fm . [(20130126 1918) nil "follow mode for compilation/output buffers" single ((:keywords "outlines"))]) (flyspell-lazy . [(20140520 1100) nil "Improve flyspell responsiveness using idle timers" single ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling"))]) (flyparens . [(20140723 1446) nil "Check for unbalanced parens on the fly" tar ((:keywords "faces" "convenience" "lisp" "matching" "parentheses" "parens"))]) (flymake-yaml . [(20130423 1148) ((flymake-easy (0 1))) "A flymake handler for YAML" single ((:url . "https://github.com/yasuyk/flymake-yaml") (:keywords "yaml"))]) (flymake-shell . [(20121104 1400) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single ((:url . "https://github.com/purcell/flymake-shell"))]) (flymake-sass . [(20140308 625) ((flymake-easy (0 1))) "Flymake handler for sass and scss files" single ((:url . "https://github.com/purcell/flymake-sass"))]) (flymake-rust . [(20141004 1852) ((flymake-easy (0 1))) "A flymake handler for rust-mode files" single ((:url . "https://github.com/joaoxsouls/flymake-rust"))]) (flymake-ruby . [(20121104 1359) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single ((:url . "https://github.com/purcell/flymake-ruby"))]) (flymake-python-pyflakes . [(20131127 306) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single ((:url . "https://github.com/purcell/flymake-python-pyflakes"))]) (flymake-puppet . [(20141006 2155) ((flymake-easy (0 9))) "An Emacs flymake handler for syntax-checking puppet using puppet-lint" single ((:url . "https://github.com/benprew/flymake-puppet"))]) (flymake-phpcs . [(20140713 231) ((flymake-easy (0 9))) "making flymake work with PHP CodeSniffer" single ((:url . "https://github.com/senda-akiha/flymake-phpcs/") (:keywords "flymake" "phpcs" "php"))]) (flymake-php . [(20121104 1402) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ((:url . "https://github.com/purcell/flymake-php"))]) (flymake-perlcritic . [(20120328 414) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ((:url . "https://github.com/illusori/emacs-flymake-perlcritic"))]) (flymake-lua . [(20140310 530) nil "Flymake for Lua" single ((:keywords "lua"))]) (flymake-json . [(20130424 257) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single ((:url . "https://github.com/purcell/flymake-json"))]) (flymake-jslint . [(20130613 502) ((flymake-easy (0 1))) "A flymake handler for javascript using jslint" single ((:url . "https://github.com/purcell/flymake-jslint"))]) (flymake-jshint . [(20140319 1800) ((flymake-easy (0 8))) "making flymake work with JSHint" single ((:keywords "flymake" "jshint" "javascript"))]) (flymake-hlint . [(20130309 445) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single ((:url . "https://github.com/purcell/flymake-hlint"))]) (flymake-haskell-multi . [(20130620 722) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar nil]) (flymake-haml . [(20130324 651) ((flymake-easy (0 1))) "A flymake handler for haml files" single ((:url . "https://github.com/purcell/flymake-haml"))]) (flymake-google-cpplint . [(20140205 825) ((flymake-easy (0 9))) "Help to comply with the Google C++ Style Guide" single ((:url . "https://github.com/senda-akiha/flymake-google-cpplint/") (:keywords "flymake" "c" "c++"))]) (flymake-go . [(20130314 1041) ((flymake (0 4 13))) "A flymake handler for go-mode files" single ((:url . "https://github.com/robert-zaremba/flymake-go") (:keywords "go" "flymake"))]) (flymake-gjshint . [(20130327 832) nil "A flymake handler for javascript using both jshint and gjslint" single ((:keywords "flymake" "javascript" "jshint" "gjslint"))]) (flymake-elixir . [(20130810 1017) nil "A flymake handler for elixir-mode .ex files." single nil]) (flymake-easy . [(20140818 355) nil "Helpers for easily building flymake checkers" single ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal"))]) (flymake-cursor . [(20130822 1032) nil "displays flymake error msg in minibuffer after delay" single ((:url . "http://www.emacswiki.org/emacs/flymake-cursor.el") (:keywords "languages" "mode" "flymake"))]) (flymake-css . [(20121104 1404) ((flymake-easy (0 1))) "Flymake support for css using csslint" single ((:url . "https://github.com/purcell/flymake-css"))]) (flymake-cppcheck . [(20140415 857) ((flymake-easy (0 9))) "Flymake work with Cppcheck for C/C++" single ((:url . "https://github.com/senda-akiha/flymake-cppcheck/") (:keywords "flymake" "cppcheck" "c" "c++"))]) (flymake-coffee . [(20140809 624) ((flymake-easy (0 1))) "A flymake handler for coffee script" single ((:url . "https://github.com/purcell/flymake-coffee"))]) (flycheck-tip . [(20141019 1459) ((flycheck (0 13)) (dash (1 2)) (emacs (24 1)) (popup (0 5 0)) (s (1 9 0))) "show flycheck's error by popup-tip" tar ((:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck"))]) (flycheck-rust . [(20140814 415) ((emacs (24 1)) (flycheck (0 20)) (dash (2 4 0))) "Flycheck: Rust additions and Cargo support" single ((:url . "https://github.com/flycheck/flycheck-rust") (:keywords "tools" "convenience"))]) (flycheck-pyflakes . [(20140630 1821) ((flycheck (0 18))) "Support pyflakes in flycheck" single nil]) (flycheck-pos-tip . [(20140606 810) ((flycheck (0 18)) (popup (0 5 0))) "Flycheck errors display in tooltip" single ((:url . "https://github.com/flycheck/flycheck-pos-tip") (:keywords "tools" "convenience"))]) (flycheck-mercury . [(20140806 1225) ((flycheck (0 20 -3 1)) (s (1 9 0)) (dash (2 4 0))) "Mercury support in Flycheck" single ((:url . "https://github.com/flycheck/flycheck-mercury") (:keywords "convenience" "languages" "tools"))]) (flycheck-ledger . [(20140605 1446) ((flycheck (0 15))) "Flycheck integration for ledger files" single ((:keywords "convenience" "languages" "tools"))]) (flycheck-hdevtools . [(20140829 1153) ((flycheck (0 21 -3 1)) (dash (2 0))) "A flycheck checker for Haskell using hdevtools" single ((:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools"))]) (flycheck-haskell . [(20141003 608) ((flycheck (0 19 -3)) (haskell-mode (13 7)) (dash (2 4 0))) "Flycheck: Cabal projects and sandboxes" tar ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience"))]) (flycheck-google-cpplint . [(20140806 1225) ((flycheck (0 20 -3 1))) "Help to comply with the Google C++ Style Guide" single ((:url . "https://github.com/flycheck/flycheck-google-cpplint/") (:keywords "flycheck" "c" "c++"))]) (flycheck-dmd-dub . [(20140814 1559) ((flycheck (0 17))) "Sets flycheck-dmd-include-paths from dub package information" single ((:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages"))]) (flycheck-dedukti . [(20141002 501) ((flycheck (0 19)) (dedukti-mode (0 1))) "Flycheck integration of Dedukti" single nil]) (flycheck-d-unittest . [(20140829 1154) ((flycheck (0 21 -3 1)) (dash (1 4 0))) "Add D unittest support to flycheck" single ((:url . "https://github.com/tom-tan/flycheck-d-unittest/") (:keywords "flycheck" "d"))]) (flycheck-color-mode-line . [(20131126 38) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ((:keywords "convenience" "language" "tools"))]) (flycheck-cask . [(20140814 416) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience"))]) (flycheck . [(20141020 1024) ((dash (2 4 0)) (pkg-info (0 4)) (cl-lib (0 3)) (emacs (24 1))) "Modern on-the-fly syntax checking for GNU Emacs" tar ((:url . "https://flycheck.readthedocs.org") (:keywords "convenience" "languages" "tools"))]) (flx-ido . [(20140821 2333) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ((:url . "https://github.com/lewang/flx"))]) (flx . [(20140921 1039) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ((:url . "https://github.com/lewang/flx"))]) (floobits . [(20141017 1633) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools"))]) (fliptext . [(20131114 218) nil "Input method for flipping characters upside down" single ((:keywords "games" "i18n"))]) (flex-isearch . [(20130508 1803) nil "Flex matching (like ido) in isearch." single ((:url . "https://bitbucket.org/jpkotta/flex-isearch") (:keywords "convenience" "search"))]) (flex-autopair . [(20120809 818) nil "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." single ((:url . "https://github.com/uk-ar/flex-autopair.el") (:keywords "keyboard" "input"))]) (flatui-theme . [(20141008 615) nil "A color theme for Emacs based on flatuicolors.com" single ((:url . "https://github.com/john2x/flatui-theme.el"))]) (flatland-theme . [(20140805 605) nil "A simple theme for Emacs based on the Flatland theme for Sublime Text" single ((:url . "http://github.com/gregchapple/flatland-emacs"))]) (flash-region . [(20130923 1417) nil "Flash a region" single ((:keywords "utility"))]) (flappymacs . [(20140715 1201) nil "flappybird clone for emacs" single ((:url . "https://github.com/taksatou/flappymacs") (:keywords "games"))]) (fixmee . [(20140609 851) ((button-lock (1 0 0)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience"))]) (fit-frame . [(20131226 1844) nil "Resize a frame.  In particular, fit a frame to its buffers." single ((:url . "http://www.emacswiki.org/fit-frame.el") (:keywords "internal" "extensions" "convenience" "local"))]) (fish-mode . [(20140909 257) ((emacs (24))) "Major mode for fish shell scripts" single ((:keywords "fish" "shell"))]) (firebelly-theme . [(20140410 455) ((cl-lib (0 5))) "a subdued, dark theme with pastelish colors." single ((:url . "https://github.com/startling/firebelly"))]) (fiplr . [(20140724 245) ((grizzl (0 1 0)) (cl-lib (0 1))) "Fuzzy Search for Files in Projects" tar nil]) (findr . [(20130824 1207) nil "Breadth-first file-finding facility for (X)Emacs" single ((:keywords "files"))]) (finder+ . [(20131226 1844) nil "Extensions to standard library finder.el" single ((:url . "http://www.emacswiki.org/finder+.el") (:keywords "help"))]) (find-things-fast . [(20140926 1308) nil "Find things fast, leveraging the power of git" single ((:keywords "project" "convenience"))]) (find-temp-file . [(20140808 523) nil "Open quickly a temporary file" single ((:url . "https://github.com/thisirs/find-temp-file.git") (:keywords "convenience"))]) (find-file-in-repository . [(20140920 2214) nil "Quickly find files in a git, mercurial or other repository" single ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control"))]) (find-file-in-project . [(20140603 1919) nil "Find files in a project quickly." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/FindFileInProject") (:keywords "project" "convenience"))]) (finalize . [(20140127 1346) ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar nil]) (fill-column-indicator . [(20140509 1401) nil "Graphically indicate the fill column" tar ((:keywords "convenience"))]) (filesets+ . [(20131226 1842) nil "Extensions to `filesets.el'." single ((:url . "http://www.emacswiki.org/filesets+.el"))]) (files+ . [(20140907 1958) nil "Enhancements of standard library `files.el'." single ((:url . "http://www.emacswiki.org/files+.el") (:keywords "internal" "extensions" "local"))]) (figlet . [(20120601 1615) nil "Annoy people with big, ascii art text" single nil]) (fic-mode . [(20140421 1622) nil "Show FIXME/TODO/BUG/KLUDGE in special face only in comments and strings" single nil]) (fetch . [(20131201 230) nil "Fetch and unpack resources" single ((:url . "https://github.com/crshd/fetch.el"))]) (feature-mode . [(20141018 946) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar nil]) (fastnav . [(20120211 957) nil "Fast navigation and editing routines." single ((:keywords "nav" "fast" "fastnav" "navigation"))]) (fasm-mode . [(20140907 1233) nil "Fasm major mode" single ((:url . "https://github.com/Fanael/fasm-mode"))]) (fasd . [(20140715 1511) ((grizzl (0))) "Emacs integration for the command-line productivity booster `fasd'" single ((:url . "https://github.com/steckerhalter/emacs-fasd") (:keywords "cli" "bash" "zsh" "autojump"))]) (fancy-narrow . [(20140424 1927) nil "narrow-to-region with more eye candy." single ((:url . "http://github.com/Bruce-Connor/fancy-narrow") (:keywords "faces" "convenience"))]) (fancy-battery . [(20140731 952) ((emacs (24 1))) "Fancy battery display" single ((:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware"))]) (fakir . [(20140729 1252) ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) "fakeing bits of Emacs" single ((:url . "http://github.com/nicferrier/emacs-fakir") (:keywords "lisp" "tools"))]) (fakespace . [(20120817 2006) nil "fake namespaces with defpackage" single ((:url . "https://github.com/skeeto/elisp-fakespace"))]) (factlog . [(20130209 2040) ((deferred (0 3 1))) "File activity logger" single ((:url . "https://github.com/tkf/factlog"))]) (faceup . [(20140921 1619) nil "Regression test system for font-lock" single ((:url . "https://github.com/Lindydancer/faceup") (:keywords "faces" "languages"))]) (faces+ . [(20131226 1840) nil "Extensions to `faces.el'." single ((:url . "http://www.emacswiki.org/faces+.el") (:keywords "faces" "local"))]) (facemenu+ . [(20140831 551) nil "Extensions to `facemenu.el'." single ((:url . "http://www.emacswiki.org/facemenu+.el") (:keywords "faces" "extensions" "convenience" "menus" "local"))]) (face-remap+ . [(20131226 1839) nil "Extensions to standard library `face-remap.el'." single ((:url . "http://www.emacswiki.org/face-remap+.el") (:keywords "window" "frame" "face" "font"))]) (fabric . [(20140514 1154) nil "Launch Fabric using Emacs" tar ((:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric"))]) (f . [(20140828 1016) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories"))]) (ez-query-replace . [(20140810 817) ((dash (1 2 0))) "a smarter context-sensitive query-replace that can be reapplied" single nil]) (eyedropper . [(20131226 1838) ((hexrgb (0))) "Pick foreground and background colors at cursor or pointer." single ((:url . "http://www.emacswiki.org/eyedropper.el") (:keywords "color" "rgb" "hsv" "hexadecimal" "face" "frame"))]) (eyebrowse . [(20141014 255) ((dash (2 7 0))) "Easy window config switching" single ((:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience"))]) (extend-dnd . [(20130328 1334) nil "R drag and Drop" tar ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop"))]) (express . [(20140508 1641) ((string-utils (0 3 2))) "Alternatives to `message'" single ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface"))]) (expand-region . [(20140610 1819) nil "Increase selected region by semantic units." tar nil]) (exec-path-from-shell . [(20140731 1207) nil "Get environment variables such as $PATH from the shell" single ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment"))]) (eww-lnum . [(20140509 1823) nil "Operations using link numbers" single ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror"))]) (evm . [(20141007 756) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single ((:url . "http://github.com/rejeep/evm"))]) (evil-visualstar . [(20130925 1414) ((evil (0))) "Starts a * or # search from the visual selection" single ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar"))]) (evil-terminal-cursor-changer . [(20140423 1451) ((evil (1 0 8))) "Change cursor by evil state on terminal." single ((:url . "https://github.com/7696122/evil-terminal-cursor-changer") (:keywords "evil" "terminal" "cursor"))]) (evil-tabs . [(20140821 2019) ((evil (0 0 0)) (elscreen (0 0 0))) "Integrating Vim-style tabs for Evil mode users." single ((:url . "https://github.com/krisajenkins/evil-tabs") (:keywords "evil" "tab" "tabs" "vim"))]) (evil-surround . [(20140616 1427) nil "emulate surround.vim from Vim" single ((:keywords "emulation" "vi" "evil mailing list: <implementations-list at lists.ourproject.org> subscribe: http://tinyurl.com/implementations-list newsgroup: nntp://news.gmane.org/gmane.emacs.vim-emulation archives: http://dir.gmane.org/gmane.emacs.vim-emulation"))]) (evil-space . [(20140626 332) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion"))]) (evil-search-highlight-persist . [(20140920 517) nil "Persistent highlights after search" single nil]) (evil-paredit . [(20141006 401) ((evil (0 0 0)) (paredit (1))) "Paredit support for evil keybindings" single ((:url . "https://github.com/roman/evil-paredit") (:keywords "paredit" "evil"))]) (evil-org . [(20141002 553) ((evil (0)) (org (0))) "evil keybindings for org-mode" single ((:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets"))]) (evil-numbers . [(20140606 851) nil "increment/decrement numbers like in vim" single ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary"))]) (evil-nerd-commenter . [(20141021 1746) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar nil]) (evil-matchit . [(20141021 946) nil "Vim matchit ported into Emacs (requires EVIL)" tar nil]) (evil-lisp-state . [(20141021 2316) ((evil (1 0 9)) (smartparens (1 6 1))) "An evil state to navigate Lisp code and modify it with smartparens" single ((:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic"))]) (evil-leader . [(20140606 843) ((evil (0))) "let there be <leader>" single ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader"))]) (evil-jumper . [(20140806 1024) ((evil (0))) "Jump like vimmers do!" single ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list"))]) (evil-indent-textobject . [(20130831 1819) ((evil (0))) "evil textobjects based on indentation" single ((:url . "http://github.com/cofi/evil-indent-textobject") (:keywords "convenience" "evil"))]) (evil-god-state . [(20140830 814) ((evil (1 0 8)) (god-mode (2 12 0))) "use god-mode keybindings in evil-mode" single ((:url . "https://github.com/gridaphobe/evil-god-state") (:keywords "evil" "leader" "god-mode"))]) (evil-exchange . [(20140409 2345) ((evil (1 0 7)) (cl-lib (0 3))) "Exchange text more easily within Evil" single ((:url . "http://github.com/Dewdrops/evil-exchange") (:keywords "evil" "plugin"))]) (evil-args . [(20140329 1729) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single ((:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation"))]) (evil . [(20141020 450) ((undo-tree (0 6 3)) (goto-chg (1 6))) "Extensible Vi layer for Emacs." tar nil]) (eval-sexp-fu . [(20131230 1651) ((highlight (0))) "Tiny functionality enhancements for evaluating sexps." single ((:keywords "lisp" "highlight" "convenience"))]) (eval-in-repl . [(20140913 1743) ((dash (0 0 0)) (paredit (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar nil]) (ethan-wspace . [(20140709 843) nil "whitespace customizations for emacs" single ((:keywords "whitespace" "tab" "newline" "trailing" "clean"))]) (etags-table . [(20130824 1157) nil "Set tags table(s) based on current file" single ((:keywords "etags" "tags" "tag"))]) (etags-select . [(20130824 1200) nil "Select from multiple tags" single ((:keywords "etags" "tags" "tag" "select"))]) (esxml . [(20140320 1621) ((kv (0 0 5))) "Library for working with xml via esxml and sxml" single ((:keywords "tools" "lisp" "comm"))]) (esup . [(20141017 1645) nil "the Emacs StartUp Profiler (ESUP)" single ((:url . "http://github.com/jschaf/esup") (:keywords "emacs-lisp" "elisp" "profile" "startup"))]) (ess-smart-underscore . [(20131229 2151) ((ess (0))) "Ess Smart Underscore" tar ((:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore"))]) (ess-R-object-popup . [(20130302 636) ((popup (20130117 1954)) (ess (20130225 1754))) "popup description of R object" single ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess"))]) (ess-R-data-view . [(20130509 758) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience"))]) (ess . [(20141023 315) nil "No description available." tar nil]) (esqlite-helm . [(20140121 923) ((esqlite (0 2 0)) (helm (20131207 845))) "Define helm source for sqlite database" single ((:url . "https://github.com/mhayashi1120/Emacs-esqlite/raw/master/esqlite-helm.el") (:keywords "data"))]) (esqlite . [(20140310 608) ((pcsv (1 3 3))) "Manipulate sqlite file from Emacs" single ((:url . "https://github.com/mhayashi1120/Emacs-esqlite/raw/master/esqlite.el") (:keywords "data"))]) (espuds . [(20140317 1115) ((s (1 7 0)) (dash (2 2 0)) (noflet (0 0 10)) (f (0 12 1))) "Ecukes step definitions" single ((:url . "http://github.com/ecukes/espuds") (:keywords "test"))]) (espresso-theme . [(20130301 248) nil "Espresso Tutti Colori port for Emacs" single ((:url . "https://github.com/dgutov/espresso-theme"))]) (eshell-prompt-extras . [(20140821 354) nil "Display extra information for your eshell prompt." single ((:keywords "eshell" "prompt"))]) (esh-help . [(20140107 522) ((dash (1 4 0))) "Add some help functions and support for Eshell" single ((:url . "https://github.com/tom-tan/esh-help/") (:keywords "eshell" "extensions"))]) (esh-buf-stack . [(20140107 518) nil "Add a buffer stack feature to Eshell" single ((:keywords "eshell" "extensions"))]) (escreen . [(20091203 1313) nil "emacs window session manager" single ((:keywords "extensions"))]) (es-windows . [(20140211 404) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single ((:url . "https://github.com/sabof/es-windows"))]) (es-mode . [(20140919 651) nil "A major mode for editing Elasticsearch queries" tar ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch"))]) (es-lib . [(20131029 407) ((cl-lib (0 3))) "A collection of emacs utilities" tar ((:url . "https://github.com/sabof/es-lib"))]) (ert-runner . [(20140610 1029) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test"))]) (ert-modeline . [(20140115 515) ((s (1 3 1)) (dash (1 2 0)) (emacs (24 1)) (projectile (0 9 1))) "displays ert test results in the modeline." single ((:keywords "tools" "tests" "convenience"))]) (ert-junit . [(20140830 1821) ((ert (0))) "JUnit XML reports from ert results" single ((:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert"))]) (ert-expectations . [(20130824 1200) nil "The simplest unit test framework in the world" single ((:url . "http://www.emacswiki.org/emacs/download/ert-expectations.el") (:keywords "test" "unittest" "ert" "expectations"))]) (ert-async . [(20140908 438) nil "Async support for ERT" single ((:url . "http://github.com/rejeep/ert-async.el") (:keywords "test"))]) (erlang . [(20141002 315) nil "Erlang major mode" tar nil]) (ergoemacs-mode . [(20141021 1056) ((emacs (24 1)) (undo-tree (0 6 5))) "Emacs mode based on common modern interface and ergonomics." tar ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience"))]) (erefactor . [(20140119 1201) nil "Emacs-Lisp refactoring utilities" single ((:url . "https://github.com/mhayashi1120/Emacs-erefactor/raw/master/erefactor.el") (:keywords "extensions" "tools" "maint"))]) (eredis . [(20120808 2307) nil "eredis, a Redis client in emacs lisp" single ((:url . "http://code.google.com/p/eredis/"))]) (ercn . [(20121230 1313) nil "Flexible ERC notifications" single ((:url . "http://www.github.com/leathekd/ercn"))]) (erc-youtube . [(20140827 1356) ((erc (5 3))) "Show received youtube urls in the ERC buffer" single ((:keywords "multimedia"))]) (erc-view-log . [(20140227 1539) nil "Major mode for viewing ERC logs" single ((:url . "http://github.com/Niluge-KiWi/erc-view-log/raw/master/erc-view-log.el") (:keywords "erc" "viewer" "logs" "colors"))]) (erc-tweet . [(20140827 1356) ((erc (5 3))) "shows text of a tweet when an url is posted in erc buffers" single ((:keywords "extensions"))]) (erc-track-score . [(20130328 815) nil "Add score support to tracked channel buffers" single ((:url . "http://julien.danjou.info/erc-track-score.html"))]) (erc-terminal-notifier . [(20140115 524) nil "OSX notifications via the terminal-notifier gem for Emacs ERC." single ((:url . "http://github.com/julienXX/") (:keywords "erc" "terminal-notifier" "nick"))]) (erc-image . [(20140225 1326) ((erc (5 3))) "Show received image urls in the ERC buffer" single ((:keywords "multimedia"))]) (erc-hl-nicks . [(20140619 822) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((:url . "http://www.github.com/leathekd/erc-hl-nicks"))]) (erc-crypt . [(20140316 951) nil "Symmetric Encryption for ERC" single ((:keywords "application"))]) (erc-colorize . [(20140808 520) nil "Per user colorization of whole message" single ((:url . "https://github.com/thisirs/erc-colorize.git") (:keywords "erc" "convenience"))]) (eproject . [(20141019 1046) ((helm (1 6 4))) "assign files to projects, programatically" tar ((:keywords "programming" "projects"))]) (eprime-mode . [(20140513 1416) nil "An E-prime checking mode for Emacs" single ((:url . "https://github.com/AndrewHynes/eprime-mode") (:keywords "e-prime" "english" "grammar"))]) (epresent . [(20140904 2253) nil "Simple presentation mode for Emacs Org-mode" single ((:keywords "gui"))]) (epl . [(20140823 909) ((cl-lib (0 3))) "Emacs Package Library" single ((:url . "http://github.com/cask/epl") (:keywords "convenience"))]) (epic . [(20130320 240) ((htmlize (1 47))) "Evernote Picker" tar ((:keywords "evernote" "applescript"))]) (epc . [(20140610 134) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc"))]) (ensime . [(20141023 440) ((s (1 3 0)) (dash (2 8 0)) (popup (0 5 0)) (auto-complete (1 4 0)) (scala-mode2 (0 21))) "ENhanced Scala Interaction Mode for Emacs" tar nil]) (enotify . [(20130407 948) nil "A networked notification system for emacs" tar nil]) (enh-ruby-mode . [(20140901 1522) nil "Major mode for editing Ruby files" tar ((:url . "http://github.com/zenspider/Enhanced-Ruby-Mode") (:keywords "languages elisp" "ruby"))]) (engine-mode . [(20140512 1625) nil "Define and query search engines from within Emacs." single ((:url . "https://github.com/hrs/engine-mode/engine-mode.el"))]) (enclose . [(20121008 1214) nil "Enclose cursor within punctuation pairs." tar nil]) (emr . [(20140817 1904) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1))) "Emacs refactoring system." tar ((:keywords "tools" "convenience" "refactoring"))]) (emoji-display . [(20140117 513) nil "emoji displaying module" single ((:url . "https://github.com/ikazuhiro/emoji-display") (:keywords "emoji"))]) (emms-soundcloud . [(20131221 645) ((emms (20131016)) (json (1 2))) "EMMS source for Soundcloud audio sharing platform" single ((:url . "http://github.com/osener/emms-soundcloud") (:keywords "emms" "soundcloud"))]) (emms-mark-ext . [(20130528 2327) ((emms (3 0))) "Extra functions for emms-mark-mode and emms-tag-edit-mode" single ((:url . "https://github.com/vapniks/emms-mark-ext") (:keywords "convenience" "multimedia"))]) (emms-info-mediainfo . [(20131223 800) ((emms (0))) "Info-method for EMMS using medianfo" single ((:keywords "multimedia" "processes"))]) (emms . [(20141015 2309) nil "The Emacs Multimedia System" tar ((:keywords "emms" "mp3" "mpeg" "multimedia"))]) (emmet-mode . [(20141014 10) nil "Unofficial Emmet's support for emacs" single ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience"))]) (emamux-ruby-test . [(20130812 1239) ((emamux (0 1)) (projectile (0 9 1))) "Ruby test with emamux" single ((:url . "https://github.com/syohex/emamux-ruby-test"))]) (emamux . [(20140926 5) ((cl-lib (0 5))) "Interact with tmux" single ((:url . "https://github.com/syohex/emacs-emamux"))]) (emagician-fix-spell-memory . [(20130415 1544) nil "Simple hack into ispell to fix (muscle) memory problems" single ((:keywords "erc" "bitlbee" "bot" "version" "0.1"))]) (emacsql . [(20140525 1915) ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0)) (pg (0 12))) "high-level SQL database front-end" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsc . [(20131027 525) nil "helper for emacsc(1)" tar ((:url . "https://github.com/knu/emacsc") (:keywords "tools"))]) (emacsagist . [(20140331 1430) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools"))]) (emacs-setup . [(20120727 1026) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar nil]) (emacs-eclim . [(20140809 507) ((json (1 2)) (s (1 9 0))) "An interface to the Eclipse IDE." tar nil]) (elx . [(20140310 1349) ((emacs (24 3 50))) "extract information from Emacs Lisp libraries" single ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages"))]) (elwm . [(20140217 828) ((dash (1 1 0))) "Minimalistic window manager for emacs" single ((:url . "https://github.com/Fuco1/elwm") (:keywords "docs"))]) (elscreen-mew . [(20140629 1116) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:url . "https://github.com/masutaka/elscreen-mew"))]) (elscreen . [(20140421 714) nil "Emacs window session manager" tar nil]) (elpy . [(20140810 307) ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (idomenu (0 1)) (pyvenv (1 3)) (yasnippet (0 8 0))) "Emacs Python Development Environment" tar nil]) (elpa-mirror . [(20140902 337) nil "ELPA mirror from locally installed packages is easy" tar nil]) (elpa-audit . [(20131230 1644) nil "Handy functions for inspecting and comparing package archives" single ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint"))]) (elnode . [(20140203 1806) ((web (0 1 4)) (dash (1 1 0)) (noflet (0 0 7)) (s (1 5 0)) (creole (0 8 14)) (fakir (0 1 6)) (db (0 0 5)) (kv (0 0 17))) "The Emacs webserver." tar nil]) (elmine . [(20130330 1600) nil "Redmine API access via elisp." single ((:url . "http://github.com/leoc/elmine") (:keywords "tools"))]) (elmacro . [(20140907 1759) ((s (1 9 0)) (dash (1 5 0)) (cl-lib (0 5))) "Convert keyboard macros to elisp" single ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience"))]) (elm-mode . [(20140601 1805) nil "Major mode for Elm" tar ((:url . "https://github.com/jcollard/elm-mode"))]) (elixir-yasnippets . [(20141020 951) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar nil]) (elixir-mode . [(20141005 1220) nil "Major mode for editing Elixir files" tar ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir"))]) (elixir-mix . [(20141003 932) nil "Emacs integration for Elixir's mix" single ((:url . "http://github.com/tonini/elixir-mix.el") (:keywords "elixir" "mix" "elixir-mix"))]) (elisp-slime-nav . [(20140619 554) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp"))]) (elisp-sandbox . [(20131116 1342) nil "Evaluate EmacsLisp expressions in a sandbox" single ((:url . "https://github.com/joelmccracken/elisp-sandbox") (:keywords "lisp"))]) (elisp-depend . [(20120427 123) nil "Parse depend libraries of elisp file." single ((:url . "http://www.emacswiki.org/emacs/download/elisp-depend.el") (:keywords "elisp-depend"))]) (elhome . [(20131202 1408) ((initsplit (20120630))) "A framework for a \"home\" Emacs configuration" tar ((:url . "http://github.com/demyanrogozhin/elhome") (:keywords "lisp"))]) (elfeed-web . [(20140702 1926) ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) "web interface to Elfeed" tar nil]) (elfeed-org . [(20141003 1843) ((elfeed (1 1 1)) (org (7))) "Configure elfeed with one or more org-mode files" single ((:url . "https://github.com/remyhonig/elfeed-org") (:keywords "news"))]) (elfeed . [(20141005 1030) ((emacs (24 1))) "an Emacs Atom/RSS feed reader" tar nil]) (elein . [(20120120 616) nil "running leiningen commands from emacs" single ((:url . "https://github.com/remvee/elein") (:keywords "tools" "processes"))]) (electric-spacing . [(20140929 2117) ((cl-lib (0 5))) "insert spaces automatically between user-defined patterns" single ((:url . "http://hins11.yu-yake.com/"))]) (electric-case . [(20130620 454) nil "insert camelCase, snake_case words without \"Shift\"ing" single ((:url . "http://hins11.yu-yake.com/"))]) (eldoc-extension . [(20140306 1445) nil "Some extension for eldoc" single ((:keywords "eldoc"))]) (eldoc-eval . [(20140929 1055) nil "Enable eldoc support when minibuffer is in use." single nil]) (el-x . [(20140111 1701) nil "main entry point for el-x package" tar ((:keywords "lisp"))]) (el-swank-fuzzy . [(20130824 1157) nil "fuzzy symbol completion." single ((:keywords "matching" "completion" "string"))]) (el-spy . [(20131226 1508) nil "Mocking framework for Emacs lisp. It also support spy, proxy." single ((:url . "https://github.com/uk-ar/el-spy") (:keywords "test"))]) (el-sprunge . [(20140106 2039) ((web-server (20140105 2246)) (htmlize (20130207 1202)) (emacs (24 3))) "Command line paste server with Emacs highlighting" tar nil]) (el-spice . [(20140805 1438) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar ((:url . "https://github.com/vedang/el-spice") (:keywords "languages" "extensions"))]) (el-spec . [(20121018 304) nil "ruby's rspec like syntax test frame work" single ((:url . "https://github.com/uk-ar/el-spec") (:keywords "test"))]) (el-mock . [(20140219 806) nil "Tiny Mock and Stub framework in Emacs Lisp" single ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest"))]) (el-get . [(20141022 2237) nil "Manage the external elisp bits and pieces you depend upon" tar ((:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki"))]) (el-autoyas . [(20120918 917) nil "Automatically create Emacs-Lisp Yasnippets" tar ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet"))]) (ein . [(20140317 1414) ((websocket (0 9)) (request (0 2)) (auto-complete (1 4))) "Emacs IPython Notebook" tar nil]) (eimp . [(20140630 1447) nil "Emacs Image Manipulation Package" single nil]) (eide . [(20140826 222) nil "IDE interface" tar nil]) (egison-mode . [(20140829 246) nil "Egison editing mode" single ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el"))]) (egg . [(20140827 52) nil "Emacs Got Git - Emacs interface to Git" tar ((:keywords "git" "version control" "release management"))]) (efire . [(20130811 1949) ((circe (1 2))) "Use campfire from Emacs" single ((:url . "https://github.com/capitaomorte/efire") (:keywords "convenience" "tools"))]) (edts . [(20141003 536) ((auto-complete (1 3 1)) (auto-highlight-symbol (1 53)) (dash (1 5 0)) (eproject (1 5)) (erlang (2 4 1)) (f (0 16 0)) (popup (0 4))) "Erlang Development Tool Suite" tar nil]) (editorconfig . [(20140928 219) nil "EditorConfig Emacs extension" single ((:url . "http://github.com/editorconfig/editorconfig-emacs#readme"))]) (edit-server-htmlize . [(20130329 1848) ((edit-server (1 9))) "(de)HTMLization hooks for edit-server.el" single ((:url . "https://github.com/frobtech/edit-server-htmlize"))]) (edit-server . [(20141018 2203) nil "server that responds to edit requests from Chrome" single ((:url . "https://github.com/stsquad/emacs_chrome"))]) (edit-list . [(20100930 1043) nil "edit a single list" single ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el"))]) (edit-color-stamp . [(20130529 1333) ((es-lib (0 2)) (cl-lib (1 0))) "Edit a hex color stamp, using a QT or the internal color picker" tar ((:url . "https://github.com/sabof/edit-color-stamp"))]) (edebug-x . [(20130616 225) nil "Extensions for Edebug" single ((:url . "https://github.com/ScottyB/edebug-x") (:keywords "extensions"))]) (ede-compdb . [(20141003 1810) ((ede (1 2)) (semantic (2 2)) (cl-lib (0 4))) "Support for compilation database projects in EDE" single ((:keywords "development" "ninja" "build" "cedet" "ede"))]) (edbi-sqlite . [(20140923 340) ((emacs (24)) (edbi (0 1 3))) "Open sqlite files with edbi" single ((:url . "https://github.com/proofit404/edbi-sqlite"))]) (edbi-django . [(20141010 1711) ((emacs (24)) (edbi (0 1 3)) (f (0 17 1))) "Run edbi with django settings" tar ((:url . "https://github.com/proofit404/edbi-django"))]) (edbi-database-url . [(20140831 1439) ((emacs (24)) (edbi (0 1 3))) "Run edbi with database url" single ((:url . "https://github.com/proofit404/edbi-database-url"))]) (edbi . [(20140920 335) ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) "Emacs Database Interface" tar nil]) (ecukes . [(20140404 148) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar nil]) (ecb . [(20140215 414) nil "a code browser for Emacs" tar ((:keywords "browser" "code" "programming" "tools"))]) (ebib . [(20140827 1000) nil "a BibTeX database manager" tar ((:keywords "text" "bibtex"))]) (easy-kill-extras . [(20140930 747) ((easy-kill (0 9 4))) "Extra functions for easy-kill." single ((:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience"))]) (easy-kill . [(20141001 1147) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" tar ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience"))]) (easy-after-load . [(20121224 2149) nil "eval-after-load for all files in a directory" single ((:url . "https://github.com/pd/easy-after-load"))]) (e2wm-term . [(20141009 908) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single ((:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager"))]) (e2wm-sww . [(20140524 458) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single ((:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager"))]) (e2wm-svg-clock . [(20130303 1626) ((e2wm (20130225 1602)) (svg-clock (0 4))) "e2wm plugin for svg-clock" single ((:url . "https://github.com/myuhe/e2wm-svg-clock.el") (:keywords "convenience" "e2wm"))]) (e2wm-pkgex4pl . [(20140525 647) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single ((:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl"))]) (e2wm-direx . [(20140815 1913) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single ((:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience"))]) (e2wm-bookmark . [(20120812 250) ((e2wm (1 2))) "Bookmark plugin for e2wm.el" single ((:keywords "convenience"))]) (e2wm-R . [(20130506 108) ((e2wm (20130225 1602)) (inlineR (20120520 2332)) (ess (20130225 1754))) "some e2wm plugin and perspective for GNU R" single ((:url . "https://github.com/myuhe/e2wm-R.el") (:keywords "convenience" "e2wm"))]) (e2wm . [(20140829 256) ((window-layout (1 2))) "simple window manager for emacs" tar ((:keywords "tools" "window manager"))]) (dynamic-fonts . [(20140731 826) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames"))]) (dylan-mode . [(20140611 137) nil "Major mode for editing Dylan programs." tar nil]) (dvorak-mode . [(20141016 1719) nil "Switch to dvorak layout easily" single ((:url . "https://github.com/proofit404/dvorak-mode"))]) (duplicate-thing . [(20120515 1248) nil "Duplicate current line & selection" single ((:keywords "command" "duplicate" "line" "selection"))]) (dummyparens . [(20141009 624) nil "parenthesis auto-pairing and wrapping" single ((:url . "https://github.com/snosov1/dummyparens") (:keywords "dummyparens" "auto-pair" "wrapping"))]) (dummy-h-mode . [(20140816 1233) nil "switch major mode to c-/c++-/objc-mode on .h file" single ((:keywords "c-mode" "c++-mode" "objc-mode"))]) (ducpel . [(20140419 116) ((cl-lib (0 5))) "Logic game with sokoban elements" tar ((:url . "https://github.com/alezost/ducpel") (:keywords "games"))]) (dts-mode . [(20141014 1709) nil "Major mode for Devicetree source code" single ((:keywords "languages"))]) (dtrt-indent . [(20140325 1630) nil "Adapt to foreign indentation offsets" tar ((:keywords "convenience" "files" "languages" "c"))]) (dsvn . [(20130120 1557) nil "Subversion interface" single ((:keywords "docs"))]) (drupal-spell . [(20130520 1255) nil "Aspell extra dictionary for Drupal" tar ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp"))]) (drupal-mode . [(20140916 1706) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal"))]) (dropdown-list . [(20120329 1636) nil "Drop-down menu interface" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/dropdown-list.el") (:keywords "menu" "convenience" "dropdown"))]) (dropbox . [(20130513 1837) ((json (1 2)) (oauth (1 0 3))) "Emacs backend for dropbox" single ((:keywords "dropbox"))]) (drill-instructor-AZIK-force . [(20120907 2117) ((popup (0 5))) "Support AZIK input" tar nil]) (drag-stuff . [(20140121 1023) nil "Drag stuff (lines, words, region, etc...) around" tar nil]) (draft-mode . [(20140609 1056) nil "Rough drafting for Emacs." single ((:url . "https://github.com/gaudecker/draft-mode") (:keywords "draft" "drafting"))]) (dpaste_de . [(20131015 825) ((web (0 3 7))) "Emacs mode to paste to dpaste.de" single ((:keywords "pastebin"))]) (dpaste . [(20141021 1101) nil "Emacs integration for dpaste.com" single ((:keywords "paste" "pastie" "pastebin" "dpaste" "python"))]) (downplay-mode . [(20140110 2358) nil "focus attention on a region of the buffer" single ((:url . "https://github.com/tobias/downplay-mode/"))]) (download-region . [(20141002 1101) ((cl-lib (0 3))) "Simple in-buffer download manager" single ((:url . "http://hins11.yu-yake.com/"))]) (dot-mode . [(20140128 1716) nil "No description available." single nil]) (dos . [(20140808 2135) nil "Major mode for editing Dos scripts" single ((:keywords "languages"))]) (doremi-mac . [(20131226 1835) nil "A macro for defining Do Re Mi commands." single ((:url . "http://www.emacswiki.org/doremi-mac.el") (:keywords "extensions" "convenience" "keys" "repeat" "cycle"))]) (doremi-frm . [(20131226 1834) ((doremi (0)) (faces+ (0)) (frame-fns (0)) (hexrgb (0))) "Incrementally adjust face attributes and frame parameters." single ((:url . "http://www.emacswiki.org/doremi-frm.el") (:keywords "frames" "extensions" "convenience" "keys" "repeat" "cycle"))]) (doremi-cmd . [(20131226 1833) ((doremi (0))) "Miscellaneous Do Re Mi commands" single ((:url . "http://www.emacswiki.org/doremi-cmd.el") (:keywords "keys" "cycle" "repeat"))]) (doremi . [(20131226 1835) nil "Do Re Mi: Incremental change using arrow keys or mouse wheel." single ((:url . "http://www.emacswiki.org/doremi.el") (:keywords "keys" "cycle" "repeat" "higher-order"))]) (dom . [(20091224 1827) nil "DOM implementation" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?XmlParser") (:keywords "xml"))]) (dollaro . [(20130620 1625) ((s (1 6 0))) "simple text templates" single ((:keywords "tools" "convenience"))]) (dokuwiki-mode . [(20140130 1236) nil "Major mode for DokuWiki document" single ((:url . "https://github.com/kbkbkbkb1/emacs-dokuwiki") (:keywords "dokuwiki"))]) (dockerfile-mode . [(20140623 1307) nil "Major mode for editing Docker's Dockerfiles" single nil]) (docbook-snippets . [(20130716 2149) ((yasnippet (0 8 0))) "Yasnippets for DocBook" tar ((:keywords "snippets"))]) (dna-mode . [(20130821 1405) nil "a major mode for editing dna sequences" tar ((:url . "http://www.mahalito.net/~harley/elisp/dna-mode.el") (:keywords "dna" "emacs" "editing"))]) (dkmisc . [(20131110 615) ((emacs (24 1))) "Miscellaneous functions required by dk* packages." tar nil]) (dklrt . [(20131110 841) ((dkmisc (0 50)) (ledger-mode (20130908 1357)) (emacs (24 1))) "Ledger Recurring Transactions." tar nil]) (dkdo . [(20131110 619) ((dkmisc (0 50)) (emacs (24 1))) "Do List major mode based on org-mode." tar nil]) (django-theme . [(20131022 502) nil "Custom face theme for Emacs" single ((:url . "http://github/anrzejsliwa/django-theme"))]) (django-snippets . [(20131229 1111) ((yasnippet (0 8 0))) "Yasnippets for django" tar ((:url . "https://github.com/myfreeweb/django-mode"))]) (django-mode . [(20140207 1350) nil "Major mode for Django web framework." tar ((:keywords "languages"))]) (dizzee . [(20111009 916) nil "A more pleasant way to manage your project's subprocesses in Emacs." tar nil]) (distinguished-theme . [(20140513 1450) nil "A dark and elegant theme for emacs." single ((:url . "https://github.com/Lokaltog/distinguished-theme"))]) (display-theme . [(20140115 1056) ((emacs (24))) "display current theme(s) at mode-line" single ((:url . "https://github.com/kawabata/emacs-display-theme/") (:keywords "tools"))]) (dispass . [(20140202 1031) ((dash (1 0 0))) "Emacs wrapper for DisPass" single ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes"))]) (disk . [(20081128 1506) nil "simplified find-file, revert-file, save-buffer interface" single ((:url . "http://www.emacswiki.org/emacs/DiskKey") (:keywords "convenience"))]) (discover-my-major . [(20140510 1307) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single ((:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys"))]) (discover-js2-refactor . [(20140129 1052) ((js2-refactor (20131221 501)) (discover (20140103 1339))) "Adds discover context menu for js2-refactor" single ((:keywords "js2-refactor" "discover"))]) (discover . [(20140103 1639) ((makey (0 3))) "discover more of Emacs" single nil]) (disaster . [(20130509 1355) nil "Disassemble C/C++ code under cursor in Emacs" single ((:url . "https://github.com/jart/disaster") (:keywords "tools"))]) (dirtree-prosjekt . [(20140129 404) ((prosjekt (0 3)) (dirtree (0 1))) "dirtree integration for prosjekt." single ((:url . "https://github.com/abingham/prosjekt"))]) (dirtree . [(20140129 832) ((tree-mode (1 1 1 1)) (windata (0))) "Directory tree views" single nil]) (direx-grep . [(20140515 1106) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single ((:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience"))]) (direx . [(20140323 1208) nil "Simple Directory Explorer" tar ((:keywords "convenience"))]) (dired-toggle-sudo . [(20131022 926) nil "Browse directory with sudo privileges." single ((:keywords "emacs" "dired"))]) (dired-toggle . [(20140907 1649) nil "provide a simple way to toggle dired buffer for current directory" single ((:url . "https://github.com/fasheng/dired-toggle") (:keywords "dired" "toggle"))]) (dired-subtree . [(20140706 1326) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Insert subdirectories in a tree-like fashion" single ((:keywords "files"))]) (dired-sort-menu . [(20130824 1207) nil "provide menu/dialogue for dired sort options" single ((:url . "http://centaur.maths.qmw.ac.uk/Emacs/") (:keywords "dired" "sort" "menu" "dialogue"))]) (dired-sort-menu+ . [(20131226 1833) ((dired-sort-menu (0))) "Extensions to `dired-sort-menu.el'" single ((:url . "http://www.emacswiki.org/dired-sort-menu+.el") (:keywords "directories" "diredp" "dired"))]) (dired-sort . [(20090209 438) nil "Sort files in dired." single ((:url . "http://www.emacswiki.org/emacs/download/dired-sort.el") (:keywords "dired" "sort"))]) (dired-single . [(20130824 1200) nil "Reuse the current dired buffer to visit another directory" single ((:keywords "dired" "reuse" "buffer" "latest" "version:" "http://www.northbound-train.com/emacs.html"))]) (dired-ranger . [(20141012 1227) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Implementation of useful ranger features for dired" single ((:keywords "files"))]) (dired-rainbow . [(20140719 1005) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Extended file highlighting according to its type" single ((:keywords "files"))]) (dired-open . [(20140319 808) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Open files from dired using using custom actions" single ((:keywords "files"))]) (dired-narrow . [(20140711 1526) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Live-narrowing of search results for dired" single ((:keywords "files"))]) (dired-k . [(20141013 951) ((cl-lib (0 5)) (emacs (24))) "highlight dired buffer by file size, modified time, git status" tar ((:url . "https://github.com/syohex/emacs-dired-k"))]) (dired-imenu . [(20140109 1110) nil "imenu binding for dired mode" single ((:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu"))]) (dired-hacks-utils . [(20140711 1529) ((dash (2 5 0))) "Utilities and helpers for dired-hacks collection" single ((:keywords "files"))]) (dired-filter . [(20141012 1225) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Ibuffer-like filtering for dired" single ((:keywords "files"))]) (dired-efap . [(20140122 1156) nil "Edit Filename At Point in a dired buffer" single ((:url . "https://github.com/juan-leon/dired-efap") (:keywords "dired" "environment" "files" "renaming"))]) (dired-dups . [(20130527 1725) nil "Find duplicate files and display them in a dired buffer" single ((:url . "https://github.com/vapniks/dired-dups") (:keywords "unix"))]) (dired-details . [(20130824 1158) nil "make file details hide-able in dired" single ((:keywords "dired" "hide"))]) (dired-details+ . [(20131226 1832) ((dired-details (0))) "Enhancements to library `dired-details+.el'." single ((:url . "http://www.emacswiki.org/dired-details+.el") (:keywords "dired" "frames"))]) (dired-avfs . [(20140719 754) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "AVFS support for dired" single ((:keywords "files"))]) (dired+ . [(20141015 1713) nil "Extensions to Dired." single ((:url . "http://www.emacswiki.org/dired+.el") (:keywords "unix" "mouse" "directories" "diredp" "dired"))]) (dircmp . [(20130806 1457) nil "Compare and sync directories." tar ((:url . "https://github.com/matthewlmcclure/dircmp-mode") (:keywords "unix" "tools"))]) (diminish . [(20091203 1312) nil "Diminished modes are minor modes with no modeline display" single ((:url . "http://www.eskimo.com/~seldon") (:keywords "extensions" "diminish" "minor" "codeprose"))]) (dim-autoload . [(20140309 2059) nil "dim complete autoload cookie lines" single ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience"))]) (digistar-mode . [(20141021 1946) nil "major mode for Digistar scripts" single ((:keywords "languages"))]) (diffscuss-mode . [(20141014 1957) nil "Major mode for diffscuss files." single ((:keywords "tools"))]) (diff-hl . [(20141002 829) ((cl-lib (0 2))) "Highlight uncommitted changes" tar ((:url . "https://github.com/dgutov/diff-hl") (:keywords "vc" "diff"))]) (dictionary . [(20140717 2329) ((connection (1 10)) (link (1 10))) "Client for rfc2229 dictionary servers" single ((:keywords "interface" "dictionary"))]) (dic-lookup-w3m . [(20141021 856) ((w3m (20120723 324)) (stem (20120826))) "look up dictionaries on the Internet" tar ((:keywords "emacs-w3m" "w3m" "dictionary"))]) (desktop-registry . [(20140119 1643) nil "Keep a central registry of desktop files" single ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience"))]) (demo-it . [(20140819 1138) nil "Utility functions for creating demonstrations" single ((:keywords "abbrev"))]) (demangle-mode . [(20140912 1725) ((emacs (24)) (cl-lib (0 1))) "Automatically demangle C++ symbols" single ((:url . "https://github.com/liblit/demangle-mode") (:keywords "c" "tools"))]) (delim-kill . [(20100517 220) nil "Kill text between delimiters." single ((:url . "http://github.com/thomas11/delim-kill/tree/master") (:keywords "convenience" "languages"))]) (deft . [(20131027 1057) nil "quickly browse, filter, and edit plain text notes" single ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity"))]) (deferred . [(20140817 105) nil "Simple asynchronous functions for emacs lisp" single ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async"))]) (dedukti-mode . [(20140929 1031) nil "Major mode for Dedukti files" single nil]) (dedicated . [(20090428 1531) nil "A very simple minor mode for dedicated buffers" single ((:keywords "dedicated" "buffer"))]) (decl . [(20140903 306) ((dash (2 5 0)) (emacs (24 3)) (cl-lib (0 3))) "Enables you to organize your code in a declarative manner." single ((:url . "https://github.com/preetpalS/decl.el"))]) (debug-print . [(20140125 1919) ((emacs (24))) "A nice printf debugging environment by the way Gauche do" single ((:url . "https://github.com/kenoss/debug-print") (:keywords "extensions" "lisp" "tools" "maint"))]) (debpaste . [(20140618 158) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single ((:url . "http://github.com/alezost/debpaste.el") (:keywords "paste"))]) (ddg . [(20140904 1410) nil "DuckDuckGo API for ELisp." single ((:url . "http://emacswiki.org/emacs/ddg.el"))]) (db-pg . [(20130131 1402) ((pg (0 12)) (db (0 0 6))) "A PostgreSQL adapter for emacs-db" single ((:keywords "data" "comm" "database" "postgresql"))]) (db . [(20140421 1711) ((kv (0 0 11))) "A database for EmacsLisp" single ((:keywords "data" "lisp"))]) (dayone . [(20131117 555) ((uuid (0 0 3)) (mustache (0 22)) (ht (1 5))) "Utility script for Day One" tar ((:url . "https://github.com/mori-dev/emacs-dayone") (:keywords "day one" "tools" "convenience"))]) (datomic-snippets . [(20130707 1615) ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) "Yasnippets for Datomic" tar nil]) (dash-functional . [(20141008 1012) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:keywords "lisp" "functions" "combinators"))]) (dash-at-point . [(20140626 335) nil "Search the word at point with Dash" single ((:url . "https://github.com/stanaka/dash-at-point"))]) (dash . [(20141008 1012) nil "A modern list library for Emacs" single ((:keywords "lists"))]) (dart-mode . [(20140815 1309) nil "Major mode for editing Dart files" single ((:url . "http://code.google.com/p/dart-mode") (:keywords "language"))]) (darkmine-theme . [(20140829 1014) nil "Yet another emacs dark color theme." single ((:url . "https://github.com/pierre-lecocq/darkmine-theme"))]) (darkburn-theme . [(20140510 1749) nil "A not-so-low contrast color theme for Emacs." single ((:url . "http://github.com/gorauskas/darkburn-theme"))]) (dark-souls . [(20140314 728) nil "Prepare to die" single ((:url . "http://github.com/tomjakubowski/dark-souls.el") (:keywords "games"))]) (darcula-theme . [(20141022 952) nil "Inspired by IntelliJ's Darcula theme" single ((:url . "https://github.com/fommil/darcula-theme-emacs") (:keywords "faces"))]) (darcsum . [(20140316 10) nil "a pcl-cvs like interface for managing darcs patches" tar ((:keywords "completion" "convenience" "tools" "vc"))]) (dakrone-theme . [(20140211 2345) nil "dakrone's custom dark theme" single ((:url . "https://github.com/dakrone/dakrone-theme") (:keywords "color" "themes" "this" "file" "is" "not" "part" "of" "gnu" "emacs."))]) (dactyl-mode . [(20140906 1325) nil "Major mode for editing Pentadactyl config files" single ((:url . "https://github.com/luxbock/dactyl-mode") (:keywords "languages" "vim"))]) (d-mode . [(20141018 143) nil "D Programming Language major mode for (X)Emacs" single ((:keywords "d" "programming" "language" "emacs" "cc-mode"))]) (cython-mode . [(20140705 1529) nil "Major mode for editing Cython files" single nil]) (cypher-mode . [(20140807 1250) nil "major mode for editing cypher scripts" single ((:url . "http://github.com/fxbois/cypher-mode") (:keywords "cypher" "graph"))]) (cycbuf . [(20131203 1537) nil "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el" single ((:url . "https://github.com/martinp26/cycbuf") (:keywords "files" "convenience" "buffer switching"))]) (cyberpunk-theme . [(20140630 2100) nil "Cyberpunk Color Theme" single ((:keywords "color" "theme" "cyberpunk"))]) (cus-edit+ . [(20140101 1842) nil "Enhancements to `cus-edit.el'." single ((:url . "http://www.emacswiki.org/cus-edit+.el") (:keywords "help" "customize" "help" "faces"))]) (cursor-test . [(20131207 1232) ((emacs (24))) "testing library for cursor position in emacs." single ((:url . "https://github.com/ainame/cursor-test.el"))]) (cursor-chg . [(20131226 1824) nil "Change cursor dynamically, depending on the context." single ((:url . "http://www.emacswiki.org/cursor-chg.el") (:keywords "cursor" "accessibility"))]) (cuda-mode . [(20140704 1657) nil "NVIDIA CUDA Major Mode" single ((:keywords "c" "languages"))]) (cucumber-goto-step . [(20131210 19) ((pcre2el (1 5))) "Jump to cucumber step definition" single ((:url . "http://orthogonal.me"))]) (ctxmenu . [(20140303 1642) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar ((:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup"))]) (ctl-mode . [(20131230 216) nil "Major mode for editing GrADS script files" single ((:keywords "grads" "script" "major-mode"))]) (ctags-update . [(20131125 1043) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags"))]) (ctags . [(20110911 604) nil "Exuberant Ctags utilities for Emacs" single ((:url . "https://bitbucket.org/semente/ctags.el") (:keywords "tags" "ctags" "etags"))]) (ctable . [(20140304 1959) nil "Table component for Emacs Lisp" single ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table"))]) (csv-nav . [(20130407 1820) nil "navigate and edit CSV files" single nil]) (cssh . [(20120823 1541) nil "clusterssh implementation for emacs" single ((:url . "http://tapoueh.org/emacs/cssh.html") (:keywords "clusterssh" "ssh" "cssh"))]) (css-eldoc . [(20140129 237) nil "an eldoc-mode plugin for CSS source code" tar nil]) (csharp-mode . [(20130824 1200) nil "C# mode derived mode" single ((:url . "http://code.google.com/p/csharpmode/") (:keywords "c#" "languages" "oop" "mode"))]) (cryptsy-public-api . [(20141008 828) ((json (1 2))) "Library for working with the Cryptsy public API" single ((:keywords "cryptsy" "bitcoin" "litecoin" "dogecoin"))]) (cryptol-mode . [(20140426 1304) nil "Cryptol major mode for Emacs" single ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography"))]) (crosshairs . [(20140722 2336) ((hl-line+ (0)) (col-highlight (0)) (vline (0))) "Highlight the current line and column." single ((:url . "http://www.emacswiki.org/crosshairs.el") (:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility"))]) (crontab-mode . [(20090510 1655) nil "Mode for editing crontab files" single ((:url . "http://www.mahalito.net/~harley/elisp/crontab-mode.el") (:keywords "cron" "crontab" "emacs"))]) (crm-custom . [(20140816 1248) nil "Alternate `completing-read-multiple' that uses `completing-read'" single ((:url . "https://github.com/DarwinAwardWinner") (:keywords "completion" "minibuffer" "multiple elements"))]) (creole-mode . [(20130721 2050) nil "a markup mode for creole" single ((:url . "https://github.com/nicferrier/creole-mode") (:keywords "hypermedia" "wp"))]) (creole . [(20140924 1100) ((noflet (0 0 3)) (kv (0 0 17))) "A parser for the Creole Wiki language" single ((:keywords "lisp" "creole" "wiki"))]) (creds . [(20140510 1306) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar nil]) (crappy-jsp-mode . [(20140311 531) nil "A pretty crappy major-mode for jsp." single ((:keywords "jsp" "major" "mode"))]) (crab . [(20140802 1408) ((websocket (1 0)) (json (1 2))) "WebSocket server to remotely control a browser" single ((:url . "https://github.com/puffnfresh/crab-emacs"))]) (cpputils-cmake . [(20141017 424) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar nil]) (cperl-mode . [(20140309 522) nil "Perl code editing commands for Emacs" single ((:keywords "languages" "perl"))]) (control-mode . [(20140218 907) nil "A \"control\" mode, similar to vim's \"normal\" mode" single ((:url . "https://github.com/stephendavidmarsh/control-mode") (:keywords "convenience" "emulations"))]) (connection . [(20140717 2329) nil "TCP-based client connection" single ((:keywords "network"))]) (conkeror-minor-mode . [(20140705 1307) nil "Mode for editing conkeror javascript files." single ((:url . "http://github.com/BruceConnor/conkeror-minor-mode") (:keywords "programming" "tools"))]) (confluence . [(20140410 2023) ((xml-rpc (1 6 4))) "Emacs mode for interacting with confluence wikis" tar ((:url . "http://code.google.com/p/confluence-el/") (:keywords "confluence" "wiki" "xmlrpc"))]) (concurrent . [(20140609 2240) ((deferred (0 3 1))) "Concurrent utility functions for emacs lisp" single ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent"))]) (company-ycmd . [(20140918 637) ((ycmd (0 1)) (company (0 8 3)) (deferred (0 2 0))) "company-mode backend for ycmd ;" single ((:url . "https://github.com/abingham/emacs-ycmd"))]) (company-tern . [(20140626 438) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single ((:url . "https://github.com/proofit404/company-tern"))]) (company-irony . [(20140629 1418) ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single ((:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience"))]) (company-inf-ruby . [(20140805 1654) ((company (0 6 10)) (inf-ruby (2 2 7)) (emacs (24 1))) "company-mode completion back-end for inf-ruby" single ((:url . "https://github.com/company-mode/company-inf-ruby"))]) (company-go . [(20140505 1612) ((company (0 8 0))) "company-mode backend for Go (using gocode)" single ((:keywords "languages"))]) (company-ghc . [(20141004 511) ((cl-lib (0 5)) (company (0 8 0)) (ghc (4 1 1)) (emacs (24))) "company-mode ghc-mod backend" single ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion"))]) (company-edbi . [(20140930 1515) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single ((:url . "https://github.com/proofit404/company-edbi"))]) (company-c-headers . [(20140930 1402) ((emacs (24 1)) (company (0 8))) "Company mode backend for C/C++ header files" single ((:keywords "development" "company"))]) (company-auctex . [(20140715 129) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Company-mode auto-completion for AUCTeX" single ((:url . "https://github.com/alexeyr/company-auctex/"))]) (company-anaconda . [(20140704 452) ((company (0 8 0)) (anaconda-mode (0 1 0)) (cl-lib (0 5 0))) "Anaconda backend for company-mode" single ((:url . "https://github.com/proofit404/anaconda-mode"))]) (company . [(20141018 1530) ((emacs (24 1)) (cl-lib (0 5))) "Modular text completion framework" tar ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching"))]) (comment-dwim-2 . [(20141004 633) nil "An all-in-one comment command to rule them all" single ((:url . "https://github.com/remyferre/comment-dwim-2") (:keywords "convenience"))]) (commander . [(20140120 1352) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv"))]) (command-log-mode . [(20140711 2143) nil "log keyboard commands to buffer" single ((:url . "https://github.com/lewang/command-log-mode") (:keywords "help"))]) (column-marker . [(20121128 843) nil "Highlight certain character columns" single ((:keywords "tools" "convenience" "highlight"))]) (column-enforce-mode . [(20140902 1249) nil "Highlight text that extends beyond a  column" single ((:url . "www.github.com/jordonbiondo/column-enforce-mode"))]) (colorsarenice-theme . [(20140907 1232) ((emacs (24))) "A color theme." tar nil]) (color-theme-solarized . [(20140408 1609) ((color-theme (6 5 5))) "Solarized themes for Emacs" tar nil]) (color-theme-sanityinc-tomorrow . [(20140906 632) nil "A version of Chris Kempson's various Tomorrow themes" tar nil]) (color-theme-sanityinc-solarized . [(20140906 632) nil "A version of Ethan Schoonover's Solarized themes" tar nil]) (color-theme-buffer-local . [(20120702 1636) nil "Install color-themes by buffer." single ((:url . "http://github.com/vic/color-theme-buffer-local") (:keywords "faces"))]) (color-theme-approximate . [(20140227 2336) nil "Makes Emacs theme works on terminal transparently" single nil]) (color-theme . [(20080305 334) nil "install color themes" tar ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?ColorTheme") (:keywords "faces"))]) (color-moccur . [(20140925 754) nil "multi-buffer occur (grep) mode" single ((:url . "http://www.bookshelf.jp/elc/color-moccur.el") (:keywords "convenience"))]) (color-identifiers-mode . [(20140524 258) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single ((:url . "https://github.com/ankurdave/color-identifiers-mode") (:keywords "faces" "languages"))]) (colemak-evil . [(20140508 1912) ((evil (1 0 8))) "Colemak-friendly keybindings for Evil." single ((:url . "https://github.com/patbl/colemak-evil"))]) (col-highlight . [(20131226 1817) ((vline (0))) "Highlight the current column." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/col-highlight.el") (:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility"))]) (coffee-mode . [(20140930 506) ((emacs (24 1)) (cl-lib (0 5))) "Major mode to edit CoffeeScript files in Emacs" single ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode"))]) (coffee-fof . [(20131012 830) ((coffee-mode (0 4 1))) "A coffee-mode configuration for `ff-find-other-file'." single ((:url . "http://github.com/yasuyk/coffee-fof") (:keywords "coffee-mode"))]) (codic . [(20140822 648) ((cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar ((:url . "https://github.com/syohex/emacs-codic"))]) (codesearch . [(20141019 925) ((dash (2 8 0))) "Easy access to the codesearch tools" single ((:url . "https://github.com/abingham/codesearch.el") (:keywords "tools" "development" "search"))]) (codebug . [(20140929 1737) nil "Interact with codebug" single ((:url . "http://www.shanedowling.com/"))]) (cobra-mode . [(20140116 1616) nil "Major mode for .NET-based Cobra language" single ((:url . "http://github.com/Nekroze/cobra-mode") (:keywords "languages"))]) (cn-outline . [(20100321 1214) nil "No description available." single nil]) (cmds-menu . [(20131226 1816) nil "`Recent Commands' submenu for the menu-bar `Tools' menu." single ((:url . "http://www.emacswiki.org/cmds-menu.el") (:keywords "convenience" "command" "menu"))]) (cmake-mode . [(20140217 959) nil "major-mode for editing CMake sources" single nil]) (cmake-ide . [(20140926 245) nil "No description available." single nil]) (cm-mode . [(20140506 2029) nil "Minor mode for CriticMarkup" single ((:keywords "text" "markdown"))]) (clues-theme . [(20140922 2356) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single ((:url . "https://github.com/jasonm23/emacs-clues-theme"))]) (cloud-to-butt-erc . [(20130627 1908) nil "Replace 'the cloud' with 'my butt'" single ((:url . "http://www.github.com/leathekd/cloud-to-butt-erc"))]) (closure-lint-mode . [(20101118 1624) nil "minor mode for the Closure Linter" single ((:url . "https://github.com/r0man/closure-lint-mode") (:keywords "tools" "closure" "javascript" "lint" "flymake"))]) (clojure-test-mode . [(20140617 604) ((clojure-mode (1 7)) (cider (0 4 0))) "Minor mode for Clojure tests" single ((:url . "http://emacswiki.org/cgi-bin/wiki/ClojureTestMode") (:keywords "languages" "lisp" "test"))]) (clojure-snippets . [(20140831 1212) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar nil]) (clojure-mode-extra-font-locking . [(20140902 1243) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp"))]) (clojure-mode . [(20140921 1145) ((emacs (24 1))) "Major mode for Clojure code" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp"))]) (clojure-cheatsheet . [(20140316 1820) ((helm (1 5 3)) (cider (0 1 8))) "The Clojure Cheatsheet for Emacs" single ((:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm"))]) (clmemo . [(20140321 1015) nil "Change Log MEMO" tar ((:url . "https://github.com/ataka/clmemo") (:keywords "convenience"))]) (cljsbuild-mode . [(20140619 426) nil "A minor mode for the ClojureScript 'lein cljsbuild' command" single ((:url . "http://github.com/kototama/cljsbuild-mode") (:keywords "clojure" "clojurescript" "leiningen" "compilation"))]) (clj-refactor . [(20141013 337) ((s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (22)) (multiple-cursors (1 2 2)) (cider (0 6 0))) "A collection of clojure refactoring functions" single ((:keywords "convenience"))]) (clips-mode . [(20131012 1701) nil "Major mode for editing CLIPS code and REPL" tar nil]) (clippy . [(20140417 714) ((pos-tip (1 0))) "Show tooltip with function documentation at point" single ((:url . "https://github.com/Fuco1/clippy.el") (:keywords "docs"))]) (clevercss . [(20131228 2055) nil "A major mode for editing CleverCSS files" single ((:keywords "languages" "css"))]) (clean-aindent-mode . [(20140615 1832) nil "Simple indent and unindent, trims indent white-space" single ((:url . "https://github.com/pmarinov/clean-aindent-mode") (:keywords "indentation" "whitespace" "backspace"))]) (clang-format . [(20140415 957) ((json (1 3))) "Format code using clang-format" single ((:keywords "tools" "c"))]) (cl-lib-highlight . [(20140127 1612) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ((:url . "https://github.com/skeeto/cl-lib-highlight"))]) (circe . [(20140903 853) ((lui (0)) (lcs (0))) "Client for IRC in Emacs" tar nil]) (cider-spy . [(20140901 255) ((cider (0 5 0)) (dash (2 5 0)) (cl-lib (0 5))) "Spy on CIDER to get info" single ((:url . "http://www.github.com/jonpither/cider-spy") (:keywords "languages" "clojure" "cider" "nrepl"))]) (cider-decompile . [(20131116 1302) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" single ((:url . "http://www.github.com/clojure-emacs/cider-decompile") (:keywords "languages" "clojure" "cider"))]) (cider . [(20141018 1350) ((clojure-mode (3 0 0)) (cl-lib (0 5)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24)) (queue (0 1 1))) "Clojure Integrated Development Environment and REPL" tar ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider"))]) (chruby . [(20141008 1225) nil "Emacs integration for chruby" single ((:url . "http://www.emacswiki.org/emacs/ChrubyEl") (:keywords "ruby" "chruby"))]) (chm-view . [(20110616 1719) nil "View CHM file." single ((:url . "http://www.emacswiki.org/emacs/download/chm-view.el") (:keywords "chm" "chm-view"))]) (chicken-scheme . [(20141015 137) nil "Scheme-mode extensions for Chicken Scheme" single ((:url . "http://github.com/dleslie/chicken-scheme"))]) (cherry-blossom-theme . [(20140930 2022) ((emacs (24 0))) "a soothing color theme for Emacs24." single ((:url . "https://github.com/byels/emacs-cherry-blossom-theme"))]) (chef-mode . [(20111121 1000) nil "minor mode for editing an opscode chef repository" single ((:keywords "chef" "knife"))]) (charmap . [(20131020 58) nil "Unicode table for Emacs" single ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs"))]) (change-inner . [(20130208 1430) ((expand-region (0 7))) "Change contents based on semantic units" single ((:keywords "convenience" "extensions"))]) (cg . [(20140823 620) nil "major mode for editing Constraint Grammar files" single ((:url . "http://beta.visl.sdu.dk/constraint_grammar.html") (:keywords "languages"))]) (cfengine-code-style . [(20131209 711) nil "C code style for CFEngine project." single ((:url . "https://github.com/cfengine/core"))]) (cerbere . [(20140418 1015) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar ((:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd"))]) (centimacro . [(20140306 927) nil "Assign multiple macros as global key bindings" single ((:url . "https://github.com/abo-abo/centimacro") (:keywords "macros"))]) (centered-window-mode . [(20140730 547) nil "Center the text when there's only one window" single ((:url . "https://github.com/ikame/centered-window-mode") (:keywords "faces" "windows"))]) (centered-cursor-mode . [(20131121 1237) nil "cursor stays vertically centered" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/centered-cursor-mode.el") (:keywords "convenience"))]) (cedit . [(20140727 1205) nil "paredit-like commands for c-like languages" single ((:url . "http://hins11.yu-yake.com/"))]) (cdnjs . [(20140217 1612) ((cl-lib (0 3)) (dash (2 5 0)) (deferred (0 3 2)) (f (0 16 0)) (pkg-info (0 4))) "A front end for http://cdnjs.com" single ((:url . "https://github.com/yasuyk/cdnjs.el") (:keywords "tools"))]) (cdlatex . [(20140707 726) nil "Fast input methods for LaTeX environments and math" single ((:keywords "tex"))]) (cd-compile . [(20140716 1934) nil "run compile in a specific directory" single nil]) (caskxy . [(20140513 1139) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single ((:url . "https://github.com/aki2o/caskxy") (:keywords "convenience"))]) (cask . [(20140908 423) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) "Cask: Project management for Emacs package development" tar ((:url . "http://github.com/cask/cask") (:keywords "speed" "convenience"))]) (capture . [(20130828 1244) nil "screencasting with \"avconv\" or \"ffmpeg\"" tar nil]) (caml . [(20141015 934) nil "No description available." tar nil]) (calmer-forest-theme . [(20130926 110) nil "Darkish theme with green/orange tint" single ((:url . "https://github.com/caldwell/calmer-forest-theme"))]) (calfw-gcal . [(20120111 500) nil "edit Google calendar for calfw.el." tar ((:url . "https://github.com/myuhe/calfw-gcal.el") (:keywords "convenience" "calendar" "calfw.el"))]) (calfw . [(20141005 723) nil "Calendar view framework on Emacs" tar ((:keywords "calendar"))]) (cal-china-x . [(20140907 855) nil "Chinese calendar extras" single ((:url . "http://xwl.appspot.com/ref/cal-china-x.el"))]) (cake2 . [(20140626 842) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP2 Minor Mode" tar ((:url . "http://code.101000lab.org"))]) (cake-inflector . [(20140415 458) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single ((:url . "https://github.com/k1LoW/emacs-cake-inflector"))]) (cake . [(20140604 31) ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP Minor Mode" tar ((:url . "https://github.com/k1LoW/emacs-cake"))]) (cacoo . [(20120319 1959) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar nil]) (cache . [(20111019 1900) nil "implementation of a hash table whose key-value pairs expire" single nil]) (c-eldoc . [(20140728 1752) nil "helpful description of the arguments to C functions" single ((:url . "http://github.com/nflath/c-eldoc"))]) (button-lock . [(20140512 1002) nil "Clickable text defined by regular expression" single ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions"))]) (butler . [(20140811 1017) ((deferred (3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar nil]) (busybee-theme . [(20130920 1242) nil "port of vim's mustang theme" single ((:url . "http://github.com/mswift42/busybee-theme"))]) (buster-snippets . [(20130714 840) nil "Yasnippets for the Buster javascript testing framework" tar ((:keywords "snippets"))]) (buster-mode . [(20140928 813) nil "Minor mode to speed up development when writing tests with Buster.js" single ((:keywords "buster" "testing" "javascript"))]) (bundler . [(20131213 657) ((inf-ruby (2 1))) "Interact with Bundler from Emacs" single ((:url . "http://github.com/tobiassvn/") (:keywords "bundler" "ruby"))]) (bug-reference-github . [(20131202 1603) nil "Automatically set `bug-reference-url-format' in Github repositories." tar ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools"))]) (bufshow . [(20130711 1339) ((emacs (24 1))) "A simple presentation tool for Emacs." single ((:url . "https://github.com/pjones/bufshow"))]) (buffer-utils . [(20140512 1000) nil "Buffer-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions"))]) (buffer-stack . [(20101223 1020) nil "Enhanced intelligent switch-to-other-buffer replacement." single ((:url . "http://www.sixfingeredman.net/proj/xemacs") (:keywords "buffer" "buffers" "switching buffers"))]) (buffer-move . [(20141010 417) nil "" single ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience"))]) (buffer-buttons . [(20131127 1246) nil "Define, save, and load code-safe buttons in files for emacs" single ((:url . "https://github.com/rpav/buffer-buttons"))]) (bubbleberry-theme . [(20141017 544) ((emacs (24 1))) "A theme based on LightTable for Emacs24" single ((:url . "https://github.com/jasonm23/emacs-bubbleberry-theme"))]) (btc-ticker . [(20140313 941) ((json (1 2)) (request (0 2 0))) "Shows latest bitcoin price" single ((:keywords "news"))]) (bs-ext . [(20130824 1159) nil "Extensions to emacs buffer-selection library (bs.el)" single ((:url . "http://www.emacswiki.org/emacs/download/bs-ext.el") (:keywords "convenience" "files"))]) (browse-url-dwim . [(20140731 1522) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia"))]) (browse-kill-ring . [(20141003 1251) nil "interactively insert items from kill-ring" single ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience"))]) (browse-kill-ring+ . [(20131226 1812) ((browse-kill-ring (0))) "Extensions to `browse-kill-ring.el'." single ((:url . "http://www.emacswiki.org/browse-kill-ring+.el") (:keywords "convenience"))]) (brainfuck-mode . [(20140220 2155) ((langdoc (20130601 1450))) "Brainfuck mode for Emacs" single ((:url . "https://github.com/tom-tan/brainfuck-mode/") (:keywords "brainfuck" "langdoc"))]) (bracketed-paste . [(20140222 2101) ((emacs (24 3))) "bracketed paste mode support within emacs -nw" single ((:keywords "terminals"))]) (bpe . [(20131228 20) nil "Blog from Org mode to Blogger" single ((:url . "https://github.com/yuutayamada/bpe") (:keywords "blogger" "blog"))]) (boxquote . [(20081011 1626) nil "Quote text with a semi-box." single nil]) (bookmark+ . [(20140904 1610) nil "Bookmark+: extensions to standard library `bookmark.el'." tar ((:url . "http://www.emacswiki.org/bookmark+.el") (:keywords "bookmarks" "bookmark+" "placeholders" "annotations" "search" "info" "url" "w3m" "gnus"))]) (bongo . [(20140514 1147) nil "play music with Emacs" tar nil]) (bog . [(20141016 33) ((dash (2 5 0))) "Extensions for research notes in Org mode" single ((:url . "https://github.com/kyleam/bog") (:keywords "bib" "outlines"))]) (bm . [(20140303 1832) nil "Visible bookmarks in buffer." single ((:url . "https://github.com/joodland/bm") (:keywords "bookmark" "highlight" "faces" "persistent"))]) (blgrep . [(20140325 613) ((clmemo (20140321 715))) "Block grep" tar ((:keywords "tools" "convenience"))]) (blank-mode . [(20130824 1159) nil "minor mode to visualize TAB, (HARD) SPACE, NEWLINE" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre") (:keywords "data" "wp"))]) (bitly . [(20130503 449) nil "Shorten URLs using the bitly.com shortener service" single ((:url . "https://github.com/jorgenschaefer/bitly-el"))]) (bitlbee . [(20130328 1318) nil "Help get Bitlbee (http://www.bitlbee.org) up and running." single nil]) (bison-mode . [(20141018 1319) nil "Major mode for editing bison, yacc and lex files." single ((:keywords "bison-mode" "yacc-mode"))]) (birds-of-paradise-plus-theme . [(20130419 1729) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes"))]) (bind-key . [(20140620 1643) nil "A simple way to manage personal keybindings" single ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs"))]) (bibtex-utils . [(20140707 1357) nil "Provides utilities for extending BibTeX mode" single ((:url . "https://bitbucket.org/tws/bibtex-utils") (:keywords "bibtex"))]) (bibslurp . [(20130904 1353) ((s (1 6 0)) (dash (1 5 0))) "retrieve BibTeX entries from NASA ADS" single ((:url . "https://github.com/mkmcc/bibslurp") (:keywords "bibliography" "nasa ads"))]) (bibretrieve . [(20131013 1432) ((auctex (11 87)) (emacs (24 3))) "Retrieving BibTeX entries from the web" tar ((:keywords "bibtex" "latex" "mathscinet" "arxiv" "zbmath"))]) (bf-mode . [(20130403 1042) nil "Browse file persistently on dired" single ((:url . "https://github.com/emacs-jp/bf-mode") (:keywords "convenience"))]) (better-registers . [(20140813 819) nil "facilities for more powerful registers" single ((:keywords "register" "macro"))]) (better-defaults . [(20140818 1237) nil "Fixing weird quirks and poor defaults" single ((:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience"))]) (bert . [(20131117 514) nil "BERT serialization library for Emacs" single ((:keywords "comm" "data"))]) (benchmark-init . [(20141004 909) nil "Benchmarks Emacs require and load calls" tar ((:keywords "benchmark"))]) (beeminder . [(20140421 1128) ((org (7))) "Emacs interface for Beeminder" single ((:url . "http://www.philnewton.net/code/beeminder-el/") (:keywords "beeminder"))]) (bdo . [(20140126 401) nil "Do things to a browser page from Emacs. BETA!" tar ((:keywords "development"))]) (bbdb2erc . [(20130607 229) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ((:keywords "irc" "contacts" "chat" "client" "internet"))]) (bbdb-vcard . [(20131216 1932) ((bbdb (3 0))) "vCard import/export for BBDB" tar ((:url . "http://github.com/vgeddes/bbdb-vcard") (:keywords "data" "calendar" "mail" "news"))]) (bbdb-ext . [(20130513 1452) ((bbdb (2 36))) "Extra commands for BBDB" single ((:url . "https://github.com/vapniks/bbdb-ext") (:keywords "extensions"))]) (bbdb-csv-import . [(20140802 742) ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) "import csv to bbdb version 3+" single ((:url . "https://gitlab.com/iankelling/bbdb-csv-import") (:keywords "csv" "util" "bbdb"))]) (bbdb . [(20140830 2331) nil "The Insidious Big Brother Database for GNU Emacs" tar nil]) (bbdb- . [(20140221 1854) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single ((:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail"))]) (bbcode-mode . [(20130227 1437) nil "Major mode for writing BBCode markup" single ((:url . "https://github.com/ejmr/bbcode-mode"))]) (batch-mode . [(20140807 2050) nil "major mode for editing ESRI batch scrips" single nil]) (bash-completion . [(20130526 844) nil "BASH completion for the shell buffer" tar nil]) (base16-theme . [(20130413 1955) nil "No description available." tar nil]) (badger-theme . [(20140716 2232) nil "A dark theme for Emacs 24." single ((:url . "https://github.com/ccann/badger-theme"))]) (backup-walker . [(20130720 1116) nil "quickly traverse all backups of a file" single ((:url . "https://github.com/lewang/backup-walker") (:keywords "backup"))]) (backup-each-save . [(20130704 1432) nil "backup each savepoint of a file" single nil]) (backtrace-mode . [(20130223 1454) nil "A better way to browse /var/log/messages files" single ((:url . "https://github.com/EricCrosson/backtrace-mode"))]) (back-button . [(20140508 1641) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface"))]) (babel . [(20131231 1025) nil "interface to web translation services such as Babelfish" single ((:url . "http://github.com/juergenhoetzel/babel.el") (:keywords "translation" "web"))]) (awk-it . [(20130917 1848) nil "Run AWK interactively on region!" single ((:keywords "awk"))]) (autotest . [(20140714 1917) nil "ZenTest's autotest integration with emacs." single ((:url . "https://github.com/zenspider/elisp/blob/master/autotest.el") (:keywords "testing" "ruby" "convenience"))]) (autopair . [(20140825 727) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations"))]) (automargin . [(20131112 314) nil "add margins to windows not-splitted, and center them" single ((:url . "http://hins11.yu-yake.com/"))]) (autofit-frame . [(20140514 1527) ((fit-frame (0))) "Automatically resize one-window frames to fit" single ((:url . "http://www.emacswiki.org/autofit-frame.el") (:keywords "internal" "extensions" "convenience" "local"))]) (autodisass-llvm-bitcode . [(20140918 1410) nil "Automatically disassemble LLVM bitcode" single ((:keywords "convenience" "data" "files"))]) (autodisass-java-bytecode . [(20141017 2001) nil "Automatically disassemble Java bytecode" single ((:keywords "convenience" "data" "files"))]) (auto-yasnippet . [(20140808 243) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single ((:url . "https://github.com/abo-abo/auto-yasnippet"))]) (auto-shell-command . [(20130404 1223) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ((:keywords "shell" "save" "async" "deferred" "auto"))]) (auto-save-buffers-enhanced . [(20130607 2249) nil "Automatically save buffers in a decent way" single nil]) (auto-install . [(20130824 1206) nil "Auto install elisp file" single ((:url . "http://www.emacswiki.org/emacs/download/auto-install.el") (:keywords "auto-install"))]) (auto-indent-mode . [(20140505 955) nil "Auto indent Minor mode" tar ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation"))]) (auto-highlight-symbol . [(20130313 543) nil "Automatic highlighting current symbol minor mode" single ((:url . "http://github.com/gennad/auto-highlight-symbol/raw/master/auto-highlight-symbol.el") (:keywords "highlight" "face" "match" "convenience"))]) (auto-dim-other-buffers . [(20140619 1202) nil "Makes non-current buffers less prominent" single ((:url . "https://github.com/mina86/auto-dim-other-buffers.el"))]) (auto-dictionary . [(20130628 553) nil "automatic dictionary switcher for flyspell" single ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp"))]) (auto-complete-sage . [(20141005 715) ((auto-complete (1 4 0)) (sage-shell-mode (0 0 1))) "An auto-complete source for sage-shell-mode." single ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete"))]) (auto-complete-rst . [(20140225 444) ((auto-complete (1 4))) "Auto-complete extension for ReST and Sphinx" tar ((:url . "https://github.com/tkf/auto-complete-rst"))]) (auto-complete-pcmp . [(20140227 151) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single ((:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion"))]) (auto-complete-nxml . [(20140220 2358) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ((:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml"))]) (auto-complete-exuberant-ctags . [(20140320 324) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single ((:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags"))]) (auto-complete-clang-async . [(20130526 1114) nil "Auto Completion source for clang for GNU Emacs" single ((:keywords "completion" "convenience"))]) (auto-complete-clang . [(20140409 352) ((auto-complete (1 3 1))) "Auto Completion source for clang for GNU Emacs" single ((:url . "https://github.com/brianjcj/auto-complete-clang") (:keywords "completion" "convenience"))]) (auto-complete-chunk . [(20140225 446) ((auto-complete (1 4))) "Auto-completion for dot.separated.words." single ((:url . "https://github.com/tkf/auto-complete-chunk"))]) (auto-complete-c-headers . [(20140325 1135) ((auto-complete (1 4))) "An auto-complete source for C/C++ header files" single ((:keywords "c"))]) (auto-complete-auctex . [(20140223 1258) ((yasnippet (0 6 1)) (auto-complete (1 4))) "auto-completion for auctex" single nil]) (auto-complete . [(20140824 1958) ((popup (0 5 0))) "Auto Completion for GNU Emacs" tar nil]) (auto-compile . [(20140913 1832) ((cl-lib (0 5)) (packed (0 3 5))) "automatically compile Emacs Lisp libraries" single ((:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp"))]) (auto-capitalize . [(20131014 505) nil "Automatically capitalize (or upcase) words" single ((:keywords "text" "wp" "convenience rcs $id: auto-capitalize.el" "v 2.20 2005/05/25 18:47:22 kevinr exp $"))]) (auto-auto-indent . [(20131106 1403) ((es-lib (0 1)) (cl-lib (1 0))) "Indents code as you type" single ((:url . "https://github.com/sabof/auto-auto-indent"))]) (auto-async-byte-compile . [(20140212 2212) nil "No description available." single nil]) (aurora-config-mode . [(20140520 503) nil "Major mode for Apache Aurora configuration files" single ((:url . "https://github.com/bdd/aurora-config.el") (:keywords "languages" "configuration"))]) (aurel . [(20140627 931) nil "Search, get info, vote and download AUR packages" single ((:url . "https://github.com/alezost/aurel") (:keywords "tools"))]) (audio-notes-mode . [(20140204 1454) nil "Play audio notes synced from somewhere else." single ((:url . "http://github.com/Bruce-Connor/audio-notes-mode") (:keywords "hypermedia" "convenience"))]) (auctex-lua . [(20130818 1420) nil "Lua editing support for AUCTeX" single ((:url . "http://github.com/vermiculus/auctex-lua") (:keywords "latex" "lua"))]) (auctex-latexmk . [(20140904 2218) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single ((:url . "https://github.com/tom-tan/auctex-latexmk/") (:keywords "tex"))]) (async . [(20141001 451) nil "Asynchronous processing in Emacs" tar nil]) (asn1-mode . [(20131218 720) ((emacs (24 3))) "ASN.1/GDMO mode for GNU Emacs" single ((:url . "https://github.com/kawabata/asn1-mode/") (:keywords "languages" "processes" "tools"))]) (ascope . [(20130824 1158) nil "Another cscope interface for emacs" single nil]) (ascii . [(20130824 1200) nil "ASCII code display." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre") (:keywords "data" "ascii"))]) (ariadne . [(20131117 1211) ((bert (0 1))) "Ariadne plugin for Emacs" single ((:keywords "comm" "convenience" "processes"))]) (arduino-mode . [(20140108 1902) nil "Major mode for the Arduino language" single ((:keywords "languages" "arduino"))]) (archive-region . [(20140201 2345) nil "Move region to archive file instead of killing" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/archive-region.el") (:keywords "languages"))]) (apt-utils-ido . [(20130527 1645) ((apt-utils (1 212))) "Ido commands for apt-utils" single ((:url . "https://github.com/vapniks/apt-utils-ido") (:keywords "convenience"))]) (apt-utils . [(20140713 1517) nil "Emacs interface to APT (Debian package management)" single nil]) (apropos-fn+var . [(20140506 608) nil "Apropos for functions and variables" single ((:url . "http://www.emacswiki.org/apropos-fn+var.el") (:keywords "apropos"))]) (applescript-mode . [(20090321 232) nil "major mode for editing AppleScript source" single ((:keywords "languages" "tools"))]) (apples-mode . [(20110120 2318) nil "Major mode for editing and executing AppleScript code" tar ((:keywords "applescript" "languages"))]) (apache-mode . [(20140625 1556) nil "major mode for editing Apache configuration files" single ((:keywords "languages" "faces last edit: 2005-01-06"))]) (aok . [(20130824 1127) nil "various useful ways to do `multi-occur'" single nil]) (anzu . [(20141005 2255) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single ((:url . "https://github.com/syohex/emacs-anzu"))]) (anything-sage . [(20141005 713) ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) "An anything extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything"))]) (anything-replace-string . [(20140317 636) ((anything (1 3 9))) "`replace-string' and `query-replace' `anything.el' interface" single ((:url . "http://code.101000lab.org"))]) (anything-prosjekt . [(20140129 304) ((prosjekt (0 3)) (anything (0))) "Anything integration for prosjekt." single ((:url . "https://github.com/abingham/prosjekt"))]) (anything-milkode . [(20140518 1043) ((milkode (0 3)) (anything (1 3 9))) "Command line search with Milkode" single ((:keywords "milkode" "anything" "search" "grep" "jump" "keyword"))]) (anything-git-grep . [(20130608 2240) ((anything (1 3 9))) "anything for git grep" tar ((:url . "https://github.com/mechairoi/anything-git-grep") (:keywords "anything" "git"))]) (anything-git-files . [(20130609 543) ((anything (1 3 9))) "anything for git files" single ((:keywords "anything" "git"))]) (anything-exuberant-ctags . [(20140316 1937) ((anything (1 3 9))) "Exuberant ctags anything.el interface" single ((:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags"))]) (anything . [(20130605 2046) nil "open anything / QuickSilver-like candidate-selection framework" tar ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines" "processes" "tools" "convenience" "anything"))]) (anyins . [(20131229 541) nil "Insert content at multiple places from shell command or kill-ring" single ((:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular"))]) (anx-api . [(20140208 1014) nil "Interact with the AppNexus API from Emacs." single ((:keywords "convenience" "json" "rest" "api" "appnexus"))]) (anti-zenburn-theme . [(20140812 1626) nil "Low-contrast Zenburn-inverted theme" single ((:url . "https://github.com/m00natic/anti-zenburn-theme"))]) (ant . [(20131228 207) nil "helpers for compiling with ant" single ((:keywords "compilation" "ant" "java"))]) (ansible-doc . [(20140911 727) ((emacs (24 1))) "Ansible documentation Minor Mode" single ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help"))]) (ansible . [(20140905 51) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:url . "http://101000lab.org"))]) (ansi . [(20141009 412) ((s (1 6 1)) (dash (1 5 0)) (noflet (0 0 11))) "Turn string into ansi strings" single ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi"))]) (annoying-arrows-mode . [(20130515 1300) nil "Ring the bell if using arrows too much" single ((:keywords "learning"))]) (angular-snippets . [(20140514 123) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar nil]) (angry-police-captain . [(20120829 852) nil "Show quote from http://theangrypolicecaptain.com in the minibuffer" single ((:keywords "games" "web" "fun"))]) (android-mode . [(20140717 247) nil "Minor mode for Android application development" single ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes"))]) (anchored-transpose . [(20080905 554) nil "Transposes a phrase around an anchor phrase" single ((:keywords "tools" "convenience"))]) (anaphora . [(20140728 1836) nil "anaphoric macros providing implicit temp variables" single ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions"))]) (anaconda-mode . [(20141014 1603) ((emacs (24)) (json-rpc (0 0 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" tar ((:url . "https://github.com/proofit404/anaconda-mode"))]) (ample-zen-theme . [(20131129 740) nil "AmpleZen Theme for Emacs 24" single ((:url . "https://github.com/mjwall/ample-zen") (:keywords "theme" "dark" "emacs 24"))]) (ample-theme . [(20140917 937) nil "Calm Dark Theme for Emacs" tar ((:url . "https://github.com/jordonbiondo/ample-theme") (:keywords "theme" "dark"))]) (ample-regexps . [(20140707 1648) nil "ample regular expressions for Emacs" single ((:keywords "regexps" "extensions" "tools"))]) (amd-mode . [(20140905 1125) ((projectile (0 10 0)) (s (1 9 0)) (f (0 16 2)) (dash (2 5 0)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single ((:keywords "javascript" "amd" "projectile"))]) (all-ext . [(20130824 1206) ((all (1 0))) "Extension of M-x all" single ((:url . "http://www.emacswiki.org/emacs/download/all-ext.el") (:keywords "all" "search" "replace" "anything" "helm" "occur"))]) (align-cljlet . [(20131017 256) ((clojure-mode (1 11 5))) "Space align various Clojure forms" single ((:url . "https://github.com/gstamp/align-cljlet"))]) (alert . [(20140506 2332) ((gntp (0 1))) "Growl-style notification system for Emacs" single ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message"))]) (alect-themes . [(20141021 1521) nil "Configurable color themes (light, dark and black) for Emacs 24" tar nil]) (airplay . [(20130212 726) ((request (20130110 2144)) (simple-httpd (1 4 1)) (deferred (0 3 1))) "Airplay bindings to Emacs" tar ((:url . "https://github.com/gongo/airplay-el") (:keywords "appletv" "airplay"))]) (ahg . [(20140818 430) nil "Alberto's Emacs interface for Mercurial (Hg)" single ((:url . "https://bitbucket.org/agriggio/ahg"))]) (aggressive-indent . [(20141023 513) ((emacs (24 1)) (names (0 5)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:url . "http://github.com/Bruce-Connor/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools"))]) (ag . [(20141017 1920) ((dash (2 8 0)) (s (1 9 0))) "A front-end for ag ('the silver searcher'), the C ack replacement." single nil]) (afternoon-theme . [(20140104 1359) ((emacs (24 1))) "Dark color theme with a deep blue background" single ((:url . "http://github.com/osener/emacs-afternoon-theme") (:keywords "themes"))]) (aes . [(20140515 1208) nil "Implementation of AES" single ((:url . "https://github.com/gaddhi/aes") (:keywords "data" "tools"))]) (adoc-mode . [(20130917 300) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc"))]) (addressbook-bookmark . [(20140430 310) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single ((:url . "https://github.com/thierryvolpiatto/addressbook-bookmark"))]) (actionscript-mode . [(20140605 1428) nil "A simple mode for editing Actionscript 3 files" single ((:keywords "language" "modes"))]) (ack-menu . [(20130312 431) ((mag-menu (0 1 0))) "A menu-based front-end for ack" single ((:url . "https://github.com/chumpage/ack-menu") (:keywords "tools" "matching" "convenience"))]) (achievements . [(20140916 28) ((keyfreq (0 0 3))) "Achievements for emacs usage." tar nil]) (ace-window . [(20140917 925) ((ace-jump-mode (2 0))) "Quickly switch windows using `ace-jump-mode'." single ((:url . "https://github.com/abo-abo/ace-window") (:keywords "cursor" "window" "location"))]) (ace-link . [(20140405 210) ((ace-jump-mode (2 0)) (noflet (0 0 10))) "Quickly follow links using `ace-jump-mode'" single ((:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links"))]) (ace-jump-zap . [(20140923 2213) ((ace-jump-mode (1 0))) "Character zapping, `ace-jump-mode` style" single ((:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions"))]) (ace-jump-mode . [(20140616 415) nil "a quick cursor location minor mode for emacs" single ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor"))]) (ace-jump-buffer . [(20140929 1012) ((ace-jump-mode (1 0)) (dash (2 4 0))) "fast buffer switching extension to `ace-jump-mode'" single ((:url . "https://github.com/waymondo/ace-jump-buffer"))]) (ace-isearch . [(20141018 640) ((ace-jump-mode (2 0)) (helm-swoop (1 4)) (emacs (24))) "A seamless bridge between isearch and ace-jump-mode" single ((:url . "https://github.com/tam17aki/ace-isearch"))]) (ac-sly . [(20141003 311) ((sly (2 9)) (auto-complete (1 4)) (cl-lib (0 5))) "An auto-complete source using sly completions" single ((:url . "https://github.com/qoocku/ac-sly"))]) (ac-slime . [(20141002 939) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single ((:url . "https://github.com/purcell/ac-slime"))]) (ac-octave . [(20140702 1102) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single ((:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion"))]) (ac-math . [(20131003 1904) ((auto-complete (1 4))) "Auto-complete sources for input of mathematical symbols and latex tags" single ((:url . "https://github.com/vitoshka/ac-math") (:keywords "latex" "auto-complete" "unicode" "symbols"))]) (ac-js2 . [(20140810 117) ((js2-mode (20090723)) (skewer-mode (1 4))) "Auto-complete source for Js2-mode, with navigation" tar ((:url . "https://github.com/ScottyB/ac-js2"))]) (ac-ispell . [(20140702 1853) ((auto-complete (1 4))) "ispell completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-ispell"))]) (ac-inf-ruby . [(20131115 650) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ((:keywords "languages" "tools"))]) (ac-helm . [(20140919 1217) ((helm (1 6 3)) (auto-complete (1 4 0)) (popup (0 5 0)) (cl-lib (0 5))) "Helm interface for auto-complete" single ((:keywords "completion" "convenience" "helm"))]) (ac-haskell-process . [(20140828 548) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:keywords "languages"))]) (ac-geiser . [(20130929 247) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar nil]) (ac-etags . [(20131127 611) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-etags"))]) (ac-emmet . [(20131015 1158) ((emmet-mode (1 0 2)) (auto-complete (1 4))) "auto-complete sources for emmet-mode's snippets" single ((:url . "https://github.com/yasuyk/ac-emmet") (:keywords "completion" "convenience" "emmet"))]) (ac-dcd . [(20140907 1044) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages"))]) (ac-dabbrev . [(20130906 518) nil "auto-complete.el source for dabbrev" single nil]) (ac-cider . [(20141013 1319) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment"))]) (ac-cake2 . [(20140320 308) ((cake2 (1 1 2)) (auto-complete (1 4 0))) "CakePHP 2 Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org"))]) (ac-cake . [(20140315 1229) ((cake (1 4 2)) (auto-complete (1 4 0))) "CakePHP Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org"))]) (ac-c-headers . [(20131016 239) nil "auto-complete source for C headers" single ((:url . "http://hins11.yu-yake.com/"))]) (ac-anaconda . [(20140705 331) ((auto-complete (1 4 0)) (anaconda-mode (0 1 0)) (dash (2 6 0))) "Anaconda sources for auto-complete-mode" single ((:url . "https://github.com/proofit404/ac-anaconda"))]) (abl-mode . [(20140724 935) nil "Python TDD minor mode" tar ((:url . "http://github.com/afroisalreadyinu/abl-mode"))]) (abc-mode . [(20140225 1244) nil "Major mode for editing abc music files" single ((:keywords "local" "docs"))]) (@ . [(20140707 820) ((queue (0 1)) (emacs (24))) "multiple-inheritance prototype-based objects DSL" tar ((:url . "https://github.com/skeeto/at-el"))]) (4clojure . [(20131014 1807) ((json (1 2)) (request (0 2 0))) "Open and evaluate 4clojure.com questions" single ((:keywords "languages" "data"))]) (2048-game . [(20140911 143) nil "play 2048 in Emacs" single ((:url . "https://bitbucket.org/zck/2048.el"))]))
